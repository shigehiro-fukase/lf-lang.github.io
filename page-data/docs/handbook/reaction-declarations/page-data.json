{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/reaction-declarations","result":{"data":{"markdownRemark":{"id":"9562e9fd-8d70-5f52-b5b1-0a79a3e238c2","excerpt":"Sometimes, it is inconvenient to mix Lingua Franca code with target code. Rather than defining reactions (i.e., complete with inlined target code), it is also…","html":"<p>Sometimes, it is inconvenient to mix Lingua Franca code with target code. Rather than <em>defining</em> reactions (i.e., complete with inlined target code), it is also possible to just <em>declare</em> them, and provide implementations in a separate file. The syntax of reaction declarations is the same as for reaction definitions, except they have no implementation. Reaction declarations can be thought of as function prototypes or interfaces.</p>\n<div class=\"lf-c\">\n<h2 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h2>\n<p>Consider the following program that has a single reaction named <code>hello</code> and is triggered at startup.\nIt has no implementation.</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">  cmake-include</span><span class=\"source-lf meta-targetspec-lflang\">: [</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">hello.cmake</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang\">],</span>\n<span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">  files</span><span class=\"source-lf meta-targetspec-lflang\">: [</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">hello.c</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang\">]</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">HelloDecl</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\"> hello</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n</pre>\n<p>The <code>cmake-include</code> target property is used to make the build system aware of an externally supplied implementation. The contents of <code>hello.cmake</code> is as follows:</p>\n<pre class=\"source-lf language-cmake\"><span class=\"source-cmake keyword-cmake\">target_sources</span><span class=\"source-cmake\">(</span><span class=\"source-cmake storage-source-cmake\">${LF_MAIN_TARGET}</span><span class=\"source-cmake\"> </span><span class=\"source-cmake entity-source-cmake\">PRIVATE</span><span class=\"source-cmake\"> hello.c)</span>\n</pre>\n<p>The <code>files</code> target property is used to make the file that has the implementation in <code>hello.c</code> accessible,\nwhich could look something like this:</p>\n<pre class=\"source-lf language-c\"><span class=\"source-c meta-preprocessor-include-c keyword-control-directive-include-c punctuation-definition-directive-c\">#</span><span class=\"source-c meta-preprocessor-include-c keyword-control-directive-include-c\">include</span><span class=\"source-c meta-preprocessor-include-c\"> </span><span class=\"source-c meta-preprocessor-include-c string-quoted-other-lt-gt-include-c punctuation-definition-string-begin-c\">&lt;</span><span class=\"source-c meta-preprocessor-include-c string-quoted-other-lt-gt-include-c\">stdio.h</span><span class=\"source-c meta-preprocessor-include-c string-quoted-other-lt-gt-include-c punctuation-definition-string-end-c\">&gt;</span>\n<span class=\"source-c meta-preprocessor-include-c keyword-control-directive-include-c punctuation-definition-directive-c\">#</span><span class=\"source-c meta-preprocessor-include-c keyword-control-directive-include-c\">include</span><span class=\"source-c meta-preprocessor-include-c\"> </span><span class=\"source-c meta-preprocessor-include-c string-quoted-double-include-c punctuation-definition-string-begin-c\">&quot;</span><span class=\"source-c meta-preprocessor-include-c string-quoted-double-include-c\">../include/HelloDecl/HelloDecl.h</span><span class=\"source-c meta-preprocessor-include-c string-quoted-double-include-c punctuation-definition-string-end-c\">&quot;</span>\n<span class=\"source-c\"></span>\n<span class=\"source-c storage-type-built-in-primitive-c\">void</span><span class=\"source-c\"> </span><span class=\"source-c meta-function-c meta-function-definition-parameters-c entity-name-function-c\">hello</span><span class=\"source-c meta-function-c meta-function-definition-parameters-c punctuation-section-parameters-begin-bracket-round-c\">(</span><span class=\"source-c meta-function-c meta-function-definition-parameters-c support-type-posix-reserved-c\">hellodecl_self_t</span><span class=\"source-c meta-function-c meta-function-definition-parameters-c keyword-operator-c\">*</span><span class=\"source-c meta-function-c meta-function-definition-parameters-c\"> </span><span class=\"source-c meta-function-c meta-function-definition-parameters-c variable-parameter-probably-c\">self</span><span class=\"source-c meta-function-c meta-function-definition-parameters-c punctuation-section-parameters-end-bracket-round-c\">)</span><span class=\"source-c\"> </span><span class=\"source-c meta-block-c punctuation-section-block-begin-bracket-curly-c\">{</span>\n<span class=\"source-c meta-block-c\">    </span><span class=\"source-c meta-block-c meta-function-call-c entity-name-function-c\">printf</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-function-call-c string-quoted-double-c punctuation-definition-string-begin-c\">&quot;</span><span class=\"source-c meta-block-c meta-function-call-c string-quoted-double-c\">Hello declaration!</span><span class=\"source-c meta-block-c meta-function-call-c string-quoted-double-c constant-character-escape-c\">\\n</span><span class=\"source-c meta-block-c meta-function-call-c string-quoted-double-c punctuation-definition-string-end-c\">&quot;</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c meta-block-c punctuation-section-block-end-bracket-curly-c\">}</span>\n<span class=\"source-c\"></span>\n</pre>\n<h2 id=\"file-structure\" style=\"position:relative;\"><a href=\"#file-structure\" aria-label=\"file structure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>File Structure</h2>\n<p>In the above example, the C file used <code>#include</code> to import a file called <code>HelloDecl.h</code>. This file\nwas generated from the Lingua Franca source file when the LF program was compiled. The file\n<code>HelloDecl.h</code> is named after the main reactor, which is called <code>HelloDecl</code>, and its parent\ndirectory, <code>include/HelloDecl</code>, is named after the file, <code>HelloDecl.lf</code>.</p>\n<p>In general, compiling a Lingua Franca program that uses reaction declarations will always generate a\ndirectory in the <code>include</code> directory for each file in the program. This directory will contain a\nheader file for each reactor that is defined in the file.</p>\n<p>As another example, if an LF program consists of files <code>F1</code> and <code>F2</code>, where <code>F1</code> defines reactors\n<code>A</code> and <code>B</code> and <code>F2</code> defines the reactor <code>C</code> and the main reactor <code>F2</code>, then the directory structure\nwill look something like this:</p>\n<pre class=\"source-lf language-text\">include/\n├ F1/\n│ ├ A.h\n│ └ B.h\n└ F2/\n  ├ C.h\n  └ F2.h\nsrc/\n├ F1.lf  // defines A and B\n└ F2.lf  // defines C and F2\nsrc-gen/</pre>\n<p>There is no particular location where you are required to place your C files or your CMake files.\nFor example, you may choose to place them in a directory called <code>c</code> that is a sibling of the <code>src</code>\ndirectory.</p>\n<h2 id=\"the-generated-header-files\" style=\"position:relative;\"><a href=\"#the-generated-header-files\" aria-label=\"the generated header files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Generated Header Files</h2>\n<p>The generated header files are necessary in order to separate your C code from your LF code because\nthe describe the signatures of the reaction functions that you must implement.</p>\n<p>In addition, they define structs that will be referenced by the reaction bodies. This includes the\n<code>self</code> struct of the reactor to which the header file corresponds, as well as structs for its ports,\nits actions, and the ports of its child reactors.</p>\n<p>As with preambles, programmer discipline is required to avoid breaking the deterministic semantics\nof Lingua Franca. In particular, although the information exposed in these header files allows\nregular C code to operate on ports and self structs, such information must not be saved in global or\nstatic variables.</p>\n<h2 id=\"linking-your-c-code\" style=\"position:relative;\"><a href=\"#linking-your-c-code\" aria-label=\"linking your c code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linking Your C Code</h2>\n<p>As with any Lingua Franca project that uses external C files, projects involving external reactions\nmust use the <code>cmake-include</code> target property to link those files into the main target.</p>\n<p>This is done using the syntax</p>\n<pre class=\"source-lf language-cmake\"><span class=\"source-cmake keyword-cmake\">target_sources</span><span class=\"source-cmake\">(</span><span class=\"source-cmake storage-source-cmake\">${LF_MAIN_TARGET}</span><span class=\"source-cmake\"> </span><span class=\"source-cmake entity-source-cmake\">PRIVATE</span><span class=\"source-cmake\"> &lt;files&gt;)</span>\n</pre>\n<p>where <code>&#x3C;files></code> is a list of the C files you need to link, with paths given relative to the project\nroot (the parent of the <code>src</code> directory).</p>\n</div>\n<div class=\"lf-cpp\">\nThe C++ target supports reaction declarations. Documentation of this feature is forthcoming.\n</div>\n<div class=\"lf-py lf-ts lf-rs\">\n<p>The $target-language$ target does not currently support reaction declarations.</p>\n</div>","headings":[{"value":"Example","depth":2},{"value":"File Structure","depth":2},{"value":"The Generated Header Files","depth":2},{"value":"Linking Your C Code","depth":2}],"frontmatter":{"permalink":"/docs/handbook/reaction-declarations","title":"Reaction Declarations","oneline":"Reaction declarations in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Contributing","oneline":"Contribute to Lingua Franca.","permalink":"/docs/handbook/contributing"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Contributing","oneline":"Contribute to Lingua Franca.","permalink":"/docs/handbook/contributing"}}}},"pageContext":{"slug":"/docs/handbook/reaction-declarations","repoPath":"/packages/documentation/copy/en/topics/Reaction Declarations.md","lang":"en","modifiedTime":"2023-09-03T07:55:40.509Z"}},"staticQueryHashes":[]}