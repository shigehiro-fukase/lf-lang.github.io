{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/preambles","result":{"data":{"markdownRemark":{"id":"7f5f499e-179a-51f4-a401-ed9dbd103eb9","excerpt":"$page-showing-target$ Preamble Reactions may contain arbitrary target-language code, but often it is convenient for that code to invoke external libraries or toâ€¦","html":"<p>$page-showing-target$</p>\n<h2 id=\"preamble\" style=\"position:relative;\"><a href=\"#preamble\" aria-label=\"preamble permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preamble</h2>\n<p>Reactions may contain arbitrary target-language code, but often it is convenient for that code to invoke external libraries or to share procedure definitions. For either purpose, a reactor may include a $preamble$ section.</p>\n<div class=\"lf-c\">\n<p>For example, the following reactor uses the <code>math</code> C library for its trigonometric functions:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp keyword-control-directive-include-cpp punctuation-definition-directive-cpp\">#</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp keyword-control-directive-include-cpp\">include</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp punctuation-definition-string-begin-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp\">math.h</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp punctuation-definition-string-end-cpp\">&gt;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">The cosine of 1 is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-other-placeholder\">%f</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">cos</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will print:</p>\n<pre class=\"source-lf language-text\">The cosine of 1 is 0.540302.</pre>\n<p>By putting the <code>#include</code> in the $preamble$, the library becomes available in all reactions of this reactor.\nIf you wish to have the library available in all reactors in the same file, you can provide the $preamble$ outside the reactor, as shown here:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp keyword-control-directive-include-cpp punctuation-definition-directive-cpp\">#</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp keyword-control-directive-include-cpp\">include</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp punctuation-definition-string-begin-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp\">math.h</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp punctuation-definition-string-end-cpp\">&gt;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Cos</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">The cosine of 1 is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-other-placeholder\">%f</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">cos</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Sin</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">The sine of 1 is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-other-placeholder\">%f</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">sin</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Cos</span><span class=\"source-lf\">()</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Sin</span><span class=\"source-lf\">()</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>You can also use the $preamble$ to define functions that are shared across reactions within a reactor, as in this example:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-qualified_type-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp entity-name-function-definition-cpp\">add_42</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-parameters-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp variable-parameter-cpp\">i</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-parameters-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-block-begin-bracket-curly-function-definition-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\">      </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp keyword-control-return-cpp\">return</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\"> i </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp keyword-operator-cpp\">+</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp constant-numeric-decimal-cpp\">42</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp punctuation-section-block-end-bracket-curly-function-definition-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">42 plus 42 is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">add_42</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">42</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">42 plus 1 is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">add_42</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Not surprisingly, this will print:</p>\n<pre class=\"source-lf language-text\">42 plus 42 is 84.\n42 plus 1 is 43.</pre>\n<p>(The order in which these are printed is arbitrary because the reactions can execute in parallel.)</p>\n<p>To share a function across <em>reactors</em>, however, is a bit trickers.\nA $preamble$ that is put outside the $reactor$ definition can only contain\n<em>declarations</em> not <em>definitions</em> of functions or variables.\nThe following code, for example will <strong>fail to compile</strong>:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-qualified_type-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp entity-name-function-definition-cpp\">add_42</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-parameters-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp variable-parameter-cpp\">i</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-parameters-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-block-begin-bracket-curly-function-definition-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp keyword-control-return-cpp\">return</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\"> i </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp keyword-operator-cpp\">+</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp constant-numeric-decimal-cpp\">42</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp punctuation-section-block-end-bracket-curly-function-definition-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Add_42</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">42 plus 42 is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">add_42</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">42</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Add_1</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">42 plus 1 is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">add_42</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">a</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Add_42</span><span class=\"source-lf\">()</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">b</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Add_1</span><span class=\"source-lf\">()</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The compiler will issue a <strong>duplicate symbol</strong> error because the function definition gets repeated in the separate C files generated for the two reactor classes, <code>Add_42</code> and <code>Add_1</code>. When the compiled C code gets linked, the linker will find two definitions for the function <code>add_42</code>.</p>\n<p>To correct this compile error, the file-level preamble should contain only a <em>declaration</em>, not a <em>definition</em>, as here:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-qualified_type-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp entity-name-function-definition-cpp\">add_42</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-parameters-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp variable-parameter-cpp\">i</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-parameters-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Add_42</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">42 plus 42 is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">add_42</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">42</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Add_1</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">42 plus 1 is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">add_42</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-qualified_type-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp entity-name-function-definition-cpp\">add_42</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-parameters-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp variable-parameter-cpp\">i</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-parameters-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-block-begin-bracket-curly-function-definition-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\">      </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp keyword-control-return-cpp\">return</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\"> i </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp keyword-operator-cpp\">+</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp constant-numeric-decimal-cpp\">42</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp punctuation-section-block-end-bracket-curly-function-definition-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">a</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Add_42</span><span class=\"source-lf\">()</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">b</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Add_1</span><span class=\"source-lf\">()</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The function <em>definition</em> here is put into the main reactor, but it can be put in any reactor defined in the file.</p>\n<p>Most header files contain only declarations, and hence can be safely included\nusing <code>#include</code> in a file-level $preamble$. If you wish to use a header file that includes both declarations and definitions, then you will need to include it within each reactor that uses it.</p>\n<p>If you wish to share <em>variables</em> across reactors, similar constraints apply.\nNote that sharing variables across reactors is <strong>strongly discouraged</strong> because it can undermine the determinacy of Lingua Franca, and you may have to implement mutual-exclusion locks to access such variables. But it is occassionaly justfiable, as in the following example:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp storage-modifier-specifier-extern-cpp\">extern</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp storage-modifier-specifier-const-cpp\">const</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">char</span><span class=\"source-lf meta-embedded-block-cpp\"> shared_string[]</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">A</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Reactor A says </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-other-placeholder\">%s</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> shared_string</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">B</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Reactor B says </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-other-placeholder\">%s</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> shared_string</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp storage-modifier-specifier-const-cpp\">const</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">char</span><span class=\"source-lf meta-embedded-block-cpp\"> shared_string[] </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Hello</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">a</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">A</span><span class=\"source-lf\">()</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">b</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">B</span><span class=\"source-lf\">()</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Notice the use of the <code>extern</code> keyword in C, which is required because the <em>definition</em> of the <code>shared_string</code> variable will be in a separate (code-generated) C file, the one for <code>main</code>, not the ones for <code>A</code> and <code>B</code>.</p>\n<p>One subtlety is that if you define symbols that you will use in $input$, $output$, or $state$ declarations, then the symbols <em>must</em> be defined in a file-level $preamble$.\nSpecifically, the following code will <strong>fail to compile</strong>:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp keyword-other-typedef-cpp\">typedef</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-cpp\"> foo</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">:</span><span class=\"source-lf meta-embedded-block-cpp storage-type-lflang\">foo</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">0</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">lf_print</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">State is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-cpp variable-other-property-cpp\">x</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The compiler will issue an <strong>unknown type name</strong> error. To correct this, just move the declaration to a file-level $preamble$:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp keyword-other-typedef-cpp\">typedef</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-cpp\"> foo</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">:</span><span class=\"source-lf meta-embedded-block-cpp storage-type-lflang\">foo</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">0</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">lf_print</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">State is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-cpp variable-other-property-cpp\">x</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n</div>\n<div class=\"lf-cpp\">\n<p>For example, the following reactor uses the <code>charconv</code> header from the c++ standard library to convert a string to an integer:</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">private</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp keyword-control-directive-include-cpp punctuation-definition-directive-cpp\">#</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp keyword-control-directive-include-cpp\">include</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp punctuation-definition-string-begin-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp\">charconv</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp punctuation-definition-string-end-cpp\">&gt;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp keyword-control-directive-include-cpp punctuation-definition-directive-cpp\">#</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp keyword-control-directive-include-cpp\">include</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp punctuation-definition-string-begin-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp\">string</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp punctuation-definition-string-end-cpp\">&gt;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf\">t) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">string raw </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">42</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp storage-type-cpp storage-type-built-in-cpp\">size_t</span><span class=\"source-lf meta-embedded-block-cpp\"> number</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\"></span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> result </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">from_chars</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">raw</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">data</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">raw</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">data</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-cpp\">+</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">raw</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">size</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> number</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp variable-other-object-access-cpp\">result</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp variable-other-property-cpp\">ec</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp keyword-operator-comparison-cpp\">==</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp entity-name-scope-resolution-cpp\">errc</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\">invalid_argument</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">      </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">cerr </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp\">Could not convert.</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-control-else-cpp\">else</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">      </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp\">Converted string: </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> raw </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp\"> to integer: </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> number </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will print:</p>\n<pre class=\"source-lf language-text\">[INFO]  Starting the execution\nConverted string: 42 to integer: 42\n[INFO]  Terminating the execution</pre>\n<p>By putting the #include in the preamble, the library becomes available in all reactions of this reactor. Note the private qualifier before the preamble keyword.\nThis ensures that the preamble is only visible to the reactions defined in this reactor and not to any other reactors. In contrast,\nthe public qualifier ensures that the preamble is also visible to other reactors in files that import the reactor defining the public preamble.</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Preamble</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">public</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-head-struct-cpp storage-type-struct-cpp\">struct</span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp entity-name-type-struct-cpp\">MyStruct</span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-head-struct-cpp punctuation-section-block-begin-bracket-curly-struct-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp\">      </span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp\"> foo</span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp\">      </span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp\">string bar</span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp punctuation-section-block-end-bracket-curly-struct-cpp\">}</span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">private</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-qualified_type-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp entity-name-function-definition-cpp\">add_42</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-parameters-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp variable-parameter-cpp\">i</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-parameters-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp variable-other-object-access-cpp\">noexcept </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp variable-other-property-cpp\">int</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-block-begin-bracket-curly-function-definition-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\">      </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp keyword-control-return-cpp\">return</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\"> i </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp keyword-operator-cpp\">+</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp constant-numeric-decimal-cpp\">42</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp punctuation-section-block-end-bracket-curly-function-definition-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">:</span><span class=\"source-lf meta-embedded-block-cpp entity-name-type-lflang\">MyStruct</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">schedule</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp\">{</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">add_42</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">42</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">baz</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\">}</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf\">a) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> value </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">get</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Received </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">value</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp variable-other-property-cpp\">foo</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\"> and &#039;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">value</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp variable-other-property-cpp\">bar</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">&#039;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>It defines both a public and a private preamble. The public preamble defines the type MyStruct. This type definition will be visible to all elements of the\nPreamble reactor as well as to all reactors defined in files that import Preamble. The private preamble defines the function <code>add_42(int i)</code>.\nThis function will only be usable to reactions within the Preamble reactor.</p>\n<p>You can think of public and private preambles as the equivalent of header files and source files in C++. In fact, the public preamble will be translated to a\nheader file and the private preamble to a source file. As a rule of thumb, all types that are used in port or action definitions as well as in state variables\nor parameters should be defined in a public preamble. Also, declarations of functions to be shared across reactors should be placed in the public preamble.\nEverything else, like function definitions or types that are used only within reactions, should be placed in a private preamble.</p>\n<p>Note that preambles can also be specified on the file level. These file level preambles are visible to all reactors within the file.\nAn example of this can be found in <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/target/PreambleFile.lf\">PreambleFile.lf</a>.</p>\n<p>Admittedly, the precise interactions of preambles and imports can become confusing. The preamble mechanism will likely be refined in future revisions.</p>\n<p>Note that functions defined in the preamble cannot access members such as state variables of the reactor unless they are explicitly passed as arguments.\nIf access to the inner state of a reactor is required, <a href=\"/docs/handbook/reactions-and-methods#method-declaration\">methods</a> present a viable and easy to use alternative.</p>\n</div>\n<div class=\"lf-py\">\n<p>For example, the following reactor uses the <code>platform</code> module to print the platform information and a defined method to add 42 to an integer:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Preamble</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">\t</span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">\t\t</span><span class=\"source-lf meta-embedded-block-py keyword-control-import-python\">import</span><span class=\"source-lf meta-embedded-block-py\"> platform</span>\n<span class=\"source-lf meta-embedded-block-py\">\t\tdef add_42(self, i):</span>\n<span class=\"source-lf meta-embedded-block-py\">\t\t\treturn i + 42</span>\n<span class=\"source-lf meta-embedded-block-py\">\t</span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">\t</span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t;</span>\n<span class=\"source-lf\">\t</span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">\t\t</span><span class=\"source-lf meta-embedded-block-py\">s</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py string-quoted-single-python\">42</span><span class=\"source-lf meta-embedded-block-py string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py\">\t\t</span><span class=\"source-lf meta-embedded-block-py\">i</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-type-python\">int</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">s</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">\t\t</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Converted string </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python storage-type-format-python\">:s</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\"> to int </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python storage-type-format-python\">:d</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">format</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">s</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">i</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">\t\t</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">42 plus 42 is </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">add_42</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">42</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">\t\t</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Your platform is </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">platform</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">system</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">\t</span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>On a Linux machine, this will print:</p>\n<pre class=\"source-lf language-text\">Converted string 42 to int 42.\n42 plus 42 is 84\nYour platform is Linux</pre>\n<p>By putting import in the $preamble$, the module becomes available in all reactions of this reactor using the <code>self</code> modifier.</p>\n<p><strong>Note:</strong> Preambles will be put in the generated Python class for the given reactor, and thus is part of the instance of the reactor. This means that anything you put in the preamble will be specific to a particular reactor instance and cannot be used to share information between different instantiations of the reactor (this is a feature, not a bug, because it helps ensure determinacy). For more information about implementation details of the Python target, see <a href=\"/docs/handbook/target-language-details#python-target-implementation-details\">Implementation Details</a>.</p>\n<p>Alternatively, you can define a $preamble$ outside any reactor definition. Such a $preamble$ can be used for functions such as import or to define a global function. The following example shows importing the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/include/hello.py\">hello</a> module:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">  files</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang storage-type-lflang\">include</span><span class=\"source-lf meta-targetspec-lflang keyword-operator-lflang\">/</span><span class=\"source-lf meta-targetspec-lflang variable-other-constant-reactorinstance-lflang\">hello</span><span class=\"source-lf meta-targetspec-lflang keyword-operator-lflang\">.</span><span class=\"source-lf meta-targetspec-lflang variable-other-lflang\">py</span>\n<span class=\"source-lf meta-targetspec-lflang\">};</span>\n<span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">  </span><span class=\"source-lf meta-embedded-block-py keyword-control-import-python\">import</span><span class=\"source-lf meta-embedded-block-py\"> hello</span>\n<span class=\"source-lf meta-embedded-block-py\">=}</span>\n</pre>\n<p>Notice the usage of the <code>files</code> target property to move the <code>hello.py</code> module located in the <code>include</code> folder of the test directory into the working directory (located in <code>src-gen/NAME</code>).</p>\n<p>For another example, the following program uses the built-in Python <code>input()</code> function to get typed input from the user:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py keyword-control-import-python\">import</span><span class=\"source-lf meta-embedded-block-py\"> threading</span>\n<span class=\"source-lf meta-embedded-block-py\">    def external(self, a):</span>\n<span class=\"source-lf meta-embedded-block-py\">      while (True):</span>\n<span class=\"source-lf meta-embedded-block-py\">        from_user = input() # Blocking</span>\n<span class=\"source-lf meta-embedded-block-py\">        a.schedule(0, from_user)</span>\n<span class=\"source-lf meta-embedded-block-py\">  </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">thread</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">physical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">secs</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">secs</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">thread</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">threading</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">Thread</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-parameter-function-call-python\">target</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">external</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-parameter-function-call-python\">args</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-parenthesis-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-separator-element-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-parenthesis-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">thread</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">start</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Type something.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">  </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">elapsed_time</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">lf</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">logical_elapsed</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">A time </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">elapsed_time</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\"> nsec after start, received: </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">a</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">  </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Waiting ...</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">  </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Within the $preamble$, we specify to import the <code>threading</code> Python module and define a function that will be started in a separate thread in the reaction to $startup$. The thread function named <code>external</code> blocks when <code>input()</code> is called until the user types something and hits the return or enter key. Usually, you do not want a Lingua Franca program to block waiting for input. In the above reactor, a $timer$ is used to repeatedly trigger a reaction that reminds the user that it is waiting for input.</p>\n</div>\n<div class=\"lf-ts\">\n<p>For example, the following reactor uses Nodeâ€™s built-in path module to extract the base name from a path:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Preamble</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-import-ts keyword-control-import-ts\">import</span><span class=\"source-lf meta-embedded-block-ts meta-import-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-import-ts constant-language-import-export-all-ts\">*</span><span class=\"source-lf meta-embedded-block-ts meta-import-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-import-ts keyword-control-as-ts\">as</span><span class=\"source-lf meta-embedded-block-ts meta-import-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-import-ts variable-other-readwrite-alias-ts\">path</span><span class=\"source-lf meta-embedded-block-ts meta-import-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-import-ts keyword-control-from-ts\">from</span><span class=\"source-lf meta-embedded-block-ts meta-import-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-import-ts string-quoted-single-ts punctuation-definition-string-begin-ts\">&#039;</span><span class=\"source-lf meta-embedded-block-ts meta-import-ts string-quoted-single-ts\">path</span><span class=\"source-lf meta-embedded-block-ts meta-import-ts string-quoted-single-ts punctuation-definition-string-end-ts\">&#039;</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">  </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\"> (</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">var</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">filename</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts variable-other-object-ts\">path</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts entity-name-function-ts\">basename</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts string-quoted-single-ts punctuation-definition-string-begin-ts\">&#039;</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts string-quoted-single-ts\">/Users/Refsnes/demo_path.js</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts string-quoted-single-ts punctuation-definition-string-end-ts\">&#039;</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">filename</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">  </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will print:</p>\n<pre class=\"source-lf language-text\">demo_path.js</pre>\n<p>By putting the <code>import</code> in the <strong>preamble</strong>, the library becomes available in all reactions of this reactor. Oddly, it also becomes available in all subsequently defined reactors in the same file. Itâ€™s a bit more complicated to <a href=\"#using-node-modules\">set up Node.js modules from npm</a> that arenâ€™t built-in, but the reaction code to <code>import</code> them is the same as what you see here.</p>\n<p>You can also use the preamble to define functions that are shared across reactions and reactors:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Preamble</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-function-ts storage-type-function-ts\">function</span><span class=\"source-lf meta-embedded-block-ts meta-function-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-definition-function-ts entity-name-function-ts\">add42</span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-parameters-ts punctuation-definition-parameters-begin-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-parameters-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-parameters-ts variable-parameter-ts\">i</span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-parameters-ts meta-type-annotation-ts keyword-operator-type-annotation-ts\">:</span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-parameters-ts meta-type-annotation-ts support-type-primitive-ts\">number</span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-parameters-ts punctuation-definition-parameters-end-ts\">)</span><span class=\"source-lf meta-embedded-block-ts meta-function-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-block-ts\">      </span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-block-ts keyword-control-flow-ts\">return</span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-block-ts variable-other-readwrite-ts\">i</span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-block-ts constant-numeric-decimal-ts\">42</span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-function-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">  </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">s</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts string-quoted-double-ts\">42</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">radix</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts constant-numeric-decimal-ts\">10</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">i</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts support-function-ts\">parseInt</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts variable-other-readwrite-ts\">s</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts variable-other-readwrite-ts\">radix</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Converted string </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">s</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\"> to number </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">i</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">42 plus 42 is </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts entity-name-function-ts\">add42</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">42</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">  </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Not surprisingly, this will print:</p>\n<pre class=\"source-lf language-text\">Converted string 42 to number 42\n42 plus 42 is 84</pre>\n<h3 id=\"using-node-modules\" style=\"position:relative;\"><a href=\"#using-node-modules\" aria-label=\"using node modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Node Modules</h3>\n<p>Installing Node.js modules for TypeScript reactors with <code>npm</code> is essentially the same as installing modules for an ordinary Node.js program. First, write a Lingua Franca program (<code>Foo.lf</code>) and compile it. It may not type check if if youâ€™re <a href=\"#preamble\">importing modules in the preamble</a> and you havenâ€™t installed the modules yet, but compiling your program will cause the TypeScript code generator to <a href=\"#typescript-target-implementation-details\">produce a project</a> for your program. There should now be a package.json file in the same directory as your .lf file. Open a terminal and navigate to that directory. You can use the standard <a href=\"https://docs.npmjs.com/cli/install\"><code>npm install</code></a> command to install modules for your TypeScript reactors.</p>\n<p>The important takeaway here is with the package.json file and the compiled JavaScript in the Foo/dist/ directory, you have a standard Node.js program that executes as such. You can modify and debug it just as you would a Node.js program.</p>\n</div>\n<div class=\"lf-rs warning\">\n<p>FIXME: Add $preamble$ example.</p>\n</div>","headings":[{"value":"Preamble","depth":2},{"value":"Using Node Modules","depth":3}],"frontmatter":{"permalink":"/docs/handbook/preambles","title":"Preambles","oneline":"Defining preambles in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Generic Reactors","oneline":"Defining generic reactors in Lingua Franca.","permalink":"/docs/handbook/generics"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Distributed Execution","oneline":"Distributed Execution (preliminary)","permalink":"/docs/handbook/distributed-execution"}}}},"pageContext":{"id":"1-preambles","slug":"/docs/handbook/preambles","repoPath":"/packages/documentation/copy/en/topics/Preambles.md","previousID":"2a0b9619-72b6-5ee7-8a38-83ff8d48005a","nextID":"79d9c9b2-eee4-5652-9541-c483de60119e","lang":"en","modifiedTime":"2023-09-03T07:55:40.509Z"}},"staticQueryHashes":[]}