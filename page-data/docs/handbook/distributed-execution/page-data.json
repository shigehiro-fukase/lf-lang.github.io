{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/distributed-execution","result":{"data":{"markdownRemark":{"id":"01e8e05d-d3c6-5a55-a16a-4c1baf83a83c","excerpt":"Federated execution is not supported in $target-language$. $page-showing-target$ NOTE: Distributed execution of Lingua Franca programs is at an early stage of…","html":"<div class=\"lf-cpp lf-rs\">\n<p><strong>Federated execution is not supported in $target-language$.</strong></p>\n</div>\n<div class=\"lf-c lf-py lf-ts\">\n<p>$page-showing-target$</p>\n<p><strong>NOTE:</strong> Distributed execution of Lingua Franca programs is at an early stage of development with many missing capabilities and a rather brittle execution. It is ready for experimentation, but not yet for deployment of serious systems. The capability has been tested on macOS and Linux, and there are no plans currently to support Windows systems.</p>\n<p>A distributed Lingua Franca program is called a <strong>federation</strong>. Each reactor within the main reactor is called a <strong>federate</strong>. The LF compiler generates a separate program for each federate and synthesizes the code for the federates to communicate. The federates can be distributed across networks and eventually will be able to be written in different target languages, although this is not yet supported.</p>\n<p>In addition to the federates, there is a program called the <strong>RTI</strong>, for <strong>runtime infrastructure</strong>, that coordinates startup and shutdown and may, if the coordination is centralized, mediate communication. The RTI needs to be compiled and installed separately on the system before any federation can execute.</p>\n<p>It is possible to encapsulate federates in Docker containers for deployment.\nSee <a href=\"/docs/handbook/containerized-execution\">containerized execution</a>.</p>\n<h2 id=\"installation-of-the-rti\" style=\"position:relative;\"><a href=\"#installation-of-the-rti\" aria-label=\"installation of the rti permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation of the RTI</h2>\n<p>Federated execution requires installation of a separate stand-alone program called the Runtime Infrastructure or <strong>RTI</strong>. At the current time, the only way to install this is from source files:</p>\n<pre class=\"source-lf language-shell\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">git</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">clone</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">https://github.com/lf-lang/reactor-c.git</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell support-function-builtin-shell\">cd</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">reactor-c/core/federated/RTI/</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">mkdir</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">build</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell punctuation-separator-statement-and-shell\">&amp;&amp;</span><span class=\"source-shell meta-statement-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell support-function-builtin-shell\">cd</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">build</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">cmake</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">../</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">make</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">sudo</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">make</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">install</span>\n</pre>\n<p>The above will create a program called <code>RTI</code> and install it at <code>/usr/local/bin/RTI</code>. Once this program is available in your path, you can compile and execute federated Lingua Franca programs using <a href=\"/download\">Epoch, VS Code, or the command-line tools</a>. For more details, see the <a href=\"https://github.com/lf-lang/reactor-c/blob/main/core/federated/RTI/README.md\">README file</a>.</p>\n<h2 id=\"minimal-example\" style=\"position:relative;\"><a href=\"#minimal-example\" aria-label=\"minimal example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Minimal Example</h2>\n<p>A minimal federated execution is specified by using the $federated$ keyword instead of $main$ for the main federate. An example is given below:</p>\n<p>$start(Federated)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> c:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">c</span><span class=\"source-lf meta-embedded-block-c keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Print</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> in:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(in) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_print</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Received: </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\"> at (</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%lld</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">, </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">)</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span>\n<span class=\"source-lf meta-embedded-block-c\">            </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_time_logical_elapsed</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_tag</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">microstep</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Print</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">in</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"> </span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf\">WARNING: No source file found: </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">code</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">cpp</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">Federated</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">lf</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> c(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">out</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">set</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">c</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">c</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">+=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">1</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Print</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> inp</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(inp) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">Received: </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">inp</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">at (</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">lf</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">logical_elapsed</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">, </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">lf</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">tag</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">microstep</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Print</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">inp</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"> </span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang comment-line-double-dash-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang comment-line-double-dash-lflang\">// FIXME: This should work with timeout: 0 msec.</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">1</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-lflang\">msec</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-lflang\">string</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">out</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Hello World!</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Destination</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> inp:</span><span class=\"source-lf storage-type-lflang\">string</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(inp) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Received: </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">inp</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Federated</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Destination</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">inp</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf\">WARNING: No source file found: </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">code</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">rs</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">Federated</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">lf</span>\n</pre>\n<p>$end(Federated)$</p>\n<p>The $federated$ keyword tells the code generator that the program is to be split into several distinct programs, one for each top level reactor.</p>\n<p>When you run the code generator on <code>src/Federated.lf</code> containing the above code, the following three programs will appear:</p>\n<div class=\"lf-c\">\n<pre class=\"source-lf language-text\">bin/Federated\nbin/Federated_s\nbin/Federated_d</pre>\n</div>\n<div class=\"lf-py\">\n<pre class=\"source-lf language-text\">bin/Federated\nsrc-gen/Federated/s/Federated_s.py\nsrc-gen/Federated/d/Federated_d.py</pre>\n</div>\n<div class=\"lf-ts\">\n<pre class=\"source-lf language-text\">bin/Federated\nsrc-gen/dist/Federated/Federated_s.js\nsrc-gen/dist/Federated/Federated_d.js</pre>\n</div>\n<p>The root name, <code>Federated</code>, is the name of the .lf file from which these are generated (and the name of the main reactor, which is required to match if it is specified). The suffixes “_s” and “_d” come from the names of the top-level instances. There will always be one federate for each top-level reactor instance.</p>\n<p>To run the program, you can simply run <code>bin/Federated</code>, which is a <code>bash</code> script that launches the RTI and two other programs, <code>Federated_s</code> and <code>Federated_d</code>.\nAlternatively, you can manually execute the RTI followed by the two federate programs by starting them on the command line. It is best to use three separate terminal windows (so that outputs from the three programs do not get jumbled together) to execute the following commands:</p>\n<div class=\"lf-c\">\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">RTI</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">n</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell constant-numeric-shell constant-numeric-integer-shell\">2</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">bin/Federated_s</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">bin/Federated_d</span>\n</pre>\n</div>\n<div class=\"lf-py\">\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">RTI</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">n</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell constant-numeric-shell constant-numeric-integer-shell\">2</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">python3</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">src-gen/Federated/s/Federated_s.py</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">python3</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">src-gen/Federated/d/Federated_d.py</span>\n</pre>\n</div>\n<div class=\"lf-ts\">\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">RTI</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">n</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell constant-numeric-shell constant-numeric-integer-shell\">2</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">node</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">src-gen/Federated/dist/Federated_s.js</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">node</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">src-gen/Federated/dist/Federated_d.js</span>\n</pre>\n</div>\n<p>The <code>-n</code> argument to the <code>RTI</code> specifies that there it should expect two federates to join the federation.</p>\n<p>Upon running the program, you will see information printed about the starting and ending of the federation, and buried in the output will be this line:</p>\n<div class=\"lf-c\">\n<pre class=\"source-lf language-text\">Federate 1: Received: Hello World!</pre>\n<p>The prefix <code>Federate 1</code> is automatically added by the built-in <code>lf_print</code> function to help disambiguate the outputs from multiple concurrent federates.</p>\n</div>\n<div class=\"lf-py\">\n<pre class=\"source-lf language-text\">Received: Hello World!</pre>\n</div>\n<div class=\"lf-ts\">\n<pre class=\"source-lf language-text\">Received: Hello World!</pre>\n</div>\n<h2 id=\"federation-id\" style=\"position:relative;\"><a href=\"#federation-id\" aria-label=\"federation id permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Federation ID</h2>\n<p>You may have several federations running on the same machine(s) or even several instances of the same federation. In this case, it is necessary to distinguish between the federations. To accomplish this, you can pass a <code>-i</code> or <code>--id</code> parameter to the RTI and its federates with an identifier that is unique to the particular federation. For example,</p>\n<div class=\"lf-c\">\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">RTI</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">n</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell constant-numeric-shell constant-numeric-integer-shell\">2</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">i</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">myFederation</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">bin/Federated_s</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">i</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">myFederation</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">bin/Federated_d</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">i</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">myFederation</span>\n</pre>\n</div>\n<div class=\"lf-py\">\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">RTI</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">n</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell constant-numeric-shell constant-numeric-integer-shell\">2</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">i</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">myFederation</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">python3</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">src-gen/Federated/s/Federated_s.py</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">i</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">myFederation</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">python3</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">src-gen/Federated/d/Federated_d.py</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">i</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">myFederation</span>\n</pre>\n</div>\n<div class=\"lf-ts\">\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">RTI</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">n</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell constant-numeric-shell constant-numeric-integer-shell\">2</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">i</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">myFederation</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">node</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">src-gen/Federated/dist/Federated_s.js</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">i</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">myFederation</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">node</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">src-gen/Federated/dist/Federated_d.js</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">i</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">myFederation</span>\n</pre>\n</div>\n<p>Each federate must have the same ID as the RTI in order to join the federation.\nThe <code>bash</code> script that executes each of the components of the federation automatically generates a unique federation ID each time you run it.</p>\n<h2 id=\"coordinated-start\" style=\"position:relative;\"><a href=\"#coordinated-start\" aria-label=\"coordinated start permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coordinated Start</h2>\n<p>When the above programs execute, each federate registers with the RTI. When all expected federates have registered, the RTI broadcasts to the federates the logical time at which they should start execution. Hence, all federates start at the same logical time.</p>\n<p>The starting logical time is determined as follows. When each federate starts executing, it sends its current physical time (drawn from its real-time clock) to the RTI. When the RTI has heard from all the federates, it chooses the largest of these physical times, adds a fixed offset (currently one second), and broadcasts the resulting time to each federate.</p>\n<p>When a federate receives the starting time from the RTI, if it is running in realtime mode (the default), then it will wait until its local physical clock matches or exceeds that starting time. Thus, to the extent that the machines have <a href=\"#clock-synchronization\">synchronized clocks</a>, the federates will all start executing at roughly the same physical time, a physical time close to the starting logical time.</p>\n<h2 id=\"coordinated-shutdown\" style=\"position:relative;\"><a href=\"#coordinated-shutdown\" aria-label=\"coordinated shutdown permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coordinated Shutdown</h2>\n<p>Coordinating the shutdown of a distributed program is discussed in <a href=\"/docs/handbook/termination\">Termination</a>.</p>\n<h2 id=\"communication-between-federates\" style=\"position:relative;\"><a href=\"#communication-between-federates\" aria-label=\"communication between federates permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Communication Between Federates</h2>\n<p>When one federate sends data to another, by default, the timestamp at the receiver will match the timestamp at the sender. You can also specify a logical delay on the communication using the <strong>after</strong> keyword. For example, if we had instead specified</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">\t</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">in</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">after</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">;</span>\n</pre>\n<p>then the timestamp at the receiving end will be incremented by 200 msec compared to the timestamp at the sender.</p>\n<p>The preservation of timestamps across federates implies some constraints (unless you use <a href=\"#physical-connections\">physical connections</a>). How these constraints are managed depends on whether you choose <strong>centralized</strong> or <strong>decentralized</strong> coordination.</p>\n<h2 id=\"centralized-coordination\" style=\"position:relative;\"><a href=\"#centralized-coordination\" aria-label=\"centralized coordination permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Centralized Coordination</h2>\n<p>In the <strong>centralized</strong> mode of coordination (the default), the RTI regulates the advancement of time in each of the federates in order to ensure that the logical time semantics of Lingua Franca is respected. If the <code>p</code> federate above has an event with timestamp <em>t</em> that it wants to react to (it is the earliest event in its event queue), then it needs to get the OK from the RTI to advance its logical time to <em>t</em>. The RTI grants this time advance only when it can assure that <code>p</code> has received all messages that it will ever receive with timestamps <em>t</em> or less.</p>\n<p>First, note that, by default, logical time on each federate never advances ahead of physical time, as reported by its local physical clock. Consider the consequences for the above connection. Suppose the timestamp of the message sent by <code>s</code> is <em>t</em>. This message cannot be sent before the local clock at <code>s</code> reaches <em>t</em> and also cannot be sent before the RTI grants to <code>s</code> a time advance to <em>t</em>. Since <code>s</code> has no federates upstream of it, the RTI will always grant it such a time advance (in fact, it does not even wait for a response from the RTI).</p>\n<p>Suppose that the communication latency is <em>L</em>. That is, it takes <em>L</em> time units (in physical time) for a message to traverse the network. Then the <code>p</code> federate will not see the message from <code>s</code> before physical time <em>t</em> + <em>L</em>, where this physical time is measured by the physical clock on <code>s</code>’s host. If that clock differs from the clock on <code>p</code>’s host by <em>E</em>, then <code>p</code> will see the message at physical time <em>t</em> + <em>E</em> + <em>L</em>, as measured by its own clock. Let the value of the <strong>after</strong> specification (200 msec above) be <em>a</em>. Then the timestamp of the received message is <em>t</em> + <em>a</em>. The relationship between logical and physical times at the receiving end (the <code>p</code> federate), therefore, will depend on the relationship between <em>a</em> and <em>E</em> + <em>L</em>. If, for example, <em>E</em> + <em>L</em> > <em>a</em>, then federate <code>p</code> will lag behind physical time by at least <em>E</em> + <em>L</em> - <em>a</em>.</p>\n<p>Assume the RTI has granted a time advance to <em>t</em> to federate <code>s</code>. Hence, <code>s</code> is able to send a message with timestamp <em>t</em>. The RTI now cannot grant any time advance to <code>p</code> that is greater than or equal to <em>t</em> + <em>a</em> until the message has been delivered to <code>p</code>. In centralized coordination, all messages flow through the RTI, so the RTI will deliver a <strong>Tag Advance Grant</strong> (<strong>TAG</strong>) message to <code>p</code> only after it has delivered the message.</p>\n<p>If <em>a</em> > <em>E</em> + <em>L</em>, then the existence of this communication does not cause <code>p</code>’s logical time to lag behind physical time. This means that if we were to modify <code>p</code> to have a <strong>physical action</strong>, the RTI will be able to immediately grant a <strong>TAG</strong> to <code>p</code> to advance the timestamp of that physical action. However, if <em>a</em> &#x3C; <em>E</em> + <em>L</em>, then the RTI will delay granting a time advance to <code>p</code> by at least <em>E</em> + <em>L</em> - <em>a</em>. Hence, <em>E</em> + <em>L</em> - <em>a</em> represents an additional latency in the processing of physical actions! This latency could present a problem for meeting deadlines. For this reason, if there are physical actions or deadlines at a federate that receives network messages, it is desirable to have $after$ delays on the connection to that federate larger than any expected <em>E</em> + <em>L</em>. This way, there is no additional latency to processing physical actions at this federate and no additional risk of missing deadlines.</p>\n<p>If, in addition, the physical clocks on the hosts are allowed to drift with respect to one another, then <em>E</em> can grow without bound, and hence the lag between logical time and physical time in processing events can grow without bound. This is mitigated either by hosts that themselves realize some clock synchronization algorithm, such as <a href=\"https://en.wikipedia.org/wiki/Network_Time_Protocol\">NTP</a> or <a href=\"https://en.wikipedia.org/wiki/Precision_Time_Protocol\">PTP</a>, or by utilizing Lingua Franca’s own built in <a href=\"#clock-synchronization\">clock synchronization</a>. If the federates lack physical actions and deadlines, however, then unsynchronized clocks present no semantic problem if you are using centralized coordination. However, because of logical time chases physical time, federates will slow to match the slowest clock of federates upstream of them.</p>\n<p>With centralized coordination, all messages (except those on <a href=\"#physical-connections\">physical connections</a>) go through the RTI. This can create a bottleneck and a single point of failure. To avoid this bottleneck, you can use decentralized coordination.</p>\n<h2 id=\"decentralized-coordination\" style=\"position:relative;\"><a href=\"#decentralized-coordination\" aria-label=\"decentralized coordination permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decentralized Coordination</h2>\n<p>The default coordination between mechanisms is <strong>centralized</strong>, equivalent to specifying the target property:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">   coordination: centralized</span>\n</pre>\n<p>An alternative is <strong>decentralized</strong> coordination, which extends a technique realized in <a href=\"https://ptolemy.berkeley.edu/publications/papers/07/RTAS/\">PTIDES</a> and <a href=\"https://dl.acm.org/doi/10.1145/2491245\">Google Spanner</a>, a globally distributed database system:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">   coordination: decentralized</span>\n</pre>\n<p>With decentralized coordination, the RTI coordinates startup, shutdown, and clock synchronization, but is otherwise not involved in the execution of the distributed program.</p>\n<p>In decentralized coordination, each federate and some reactions have a <strong>safe-to-process</strong> (<strong>STP</strong>) offset. When one federate communicates with another, it does so directly through a dedicated socket without going through the RTI. Moreover, it does not consult the RTI to advance logical time. Instead, it can advance its logical time to <em>t</em> when its physical clock matches or exceeds <em>t</em> + STP.</p>\n<p>By default, the STP is zero. An STP of zero is OK for any federate where either <em>every</em> logical connection into the federate has a sufficiently large $after$ clause, or the federate has only one upstream federate sending it messages and it has no local timers or actions. The value of the $after$ delay on each connection must exceed the sum of the <a href=\"#clock-synchronization\">clock synchronization</a> error <em>E</em>, a bound <em>L</em> on the network latency, and the time lag on the sender <em>D</em> (the physical time at which it sends the message minus the timestamp of the message). The sender’s time lag <em>D</em> can be enforced by using a $deadline$. For example:</p>\n<p>$start(DecentralizedTimerAfter)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">5</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-lflang\">sec</span><span class=\"source-lf meta-targetspec-lflang\">,</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">coordination</span><span class=\"source-lf meta-targetspec-lflang\">: decentralized</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n<span class=\"source-lf keyword-control-import-lflang\">import</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">, </span><span class=\"source-lf entity-name-type-lflang\">Print</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-import-lflang\">from</span><span class=\"source-lf\"> </span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Federated.lf</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">PrintTimer</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">extends</span><span class=\"source-lf\"> Print {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_print</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Timer ticked at (</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%lld</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">, </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">).</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span>\n<span class=\"source-lf meta-embedded-block-c\">            </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_time_logical_elapsed</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_tag</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">microstep</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">PrintTimer</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">in</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">after</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">10</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf\">WARNING: No source file found: </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">code</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">cpp</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">DecentralizedTimerAfter</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">lf</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">5</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-lflang\">sec</span><span class=\"source-lf meta-targetspec-lflang\">,</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">coordination</span><span class=\"source-lf meta-targetspec-lflang\">: decentralized</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n<span class=\"source-lf keyword-control-import-lflang\">import</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">, </span><span class=\"source-lf entity-name-type-lflang\">Print</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-import-lflang\">from</span><span class=\"source-lf\"> </span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Federated.lf</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">PrintTimer</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">extends</span><span class=\"source-lf\"> Print {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">Timer ticked at </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">lf</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">logical_elapsed</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">, </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">lf</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">tag</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">microstep</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">).</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">()</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">PrintTimer</span><span class=\"source-lf\">()</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">inp</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">after</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">10</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf\">WARNING: No source file found: </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">code</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">ts</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">DecentralizedTimerAfter</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">lf</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf\">WARNING: No source file found: </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">code</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">rs</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">DecentralizedTimerAfter</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">lf</span>\n</pre>\n<p>$end(DecentralizedTimerAfter)$</p>\n<p>This example inherits from the Federated example above.\nIn this example, as long as the messages from federate <code>c</code> arrive at federate <code>p</code> within 10 msec, all messages will be processed in tag order, as with an unfederated program.</p>\n<p>An alternative to the $after$ delays is to add an STP offset to downstream federates, as in the following example:</p>\n<p>$start(DecentralizedTimerSTP)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">5</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-lflang\">sec</span><span class=\"source-lf meta-targetspec-lflang\">,</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">coordination</span><span class=\"source-lf meta-targetspec-lflang\">: decentralized</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n<span class=\"source-lf keyword-control-import-lflang\">import</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">, </span><span class=\"source-lf entity-name-type-lflang\">Print</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-import-lflang\">from</span><span class=\"source-lf\"> </span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Federated.lf</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">PrintTimer</span><span class=\"source-lf\">(STP_offset:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">10</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) </span><span class=\"source-lf storage-modifier-lflang\">extends</span><span class=\"source-lf\"> Print {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_print</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Timer ticked at (</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%lld</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">, </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">).</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span>\n<span class=\"source-lf meta-embedded-block-c\">            </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_time_logical_elapsed</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_tag</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">microstep</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">PrintTimer</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">in</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf\">WARNING: No source file found: </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">code</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">cpp</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">DecentralizedTimerSTP</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">lf</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">5</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-lflang\">sec</span><span class=\"source-lf meta-targetspec-lflang\">,</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">coordination</span><span class=\"source-lf meta-targetspec-lflang\">: decentralized</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n<span class=\"source-lf keyword-control-import-lflang\">import</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">, </span><span class=\"source-lf entity-name-type-lflang\">Print</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-import-lflang\">from</span><span class=\"source-lf\"> </span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Federated.lf</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">PrintTimer</span><span class=\"source-lf\">(STP_offset(</span><span class=\"source-lf constant-numeric-int-lflang\">10</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) </span><span class=\"source-lf storage-modifier-lflang\">extends</span><span class=\"source-lf\"> Print {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Timer ticked at </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">lf</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">logical_elapsed</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">, </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">lf</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">tag</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">microstep</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">).</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">PrintTimer</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">inp</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf\">WARNING: No source file found: </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">code</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">ts</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">DecentralizedTimerSTP</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">lf</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf\">WARNING: No source file found: </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">code</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">rs</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">DecentralizedTimerSTP</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">lf</span>\n</pre>\n<p>$end(DecentralizedTimerSTP)$</p>\n<p>Here, a parameter named <code>STP_offset</code> (not case sensitive) gives a time value, and the federate waits this specified amount of time (physical time) beyond a logical time <em>t</em> before advancing its logical time to <em>t</em>. In the above example, reactions to the timer events will be delayed by the amount specified by the <code>STP_offset</code> parameter. Just as with the use of $after$, if the <code>STP_offset</code> exceeds the sum of network latency, clock synchronization error, and execution times, then all events will be processed in tag order.</p>\n<p>Of course, the assumptions about network latency, etc., can be violated in practice. Analogous to a deadline violation, Lingua Franca provides a mechanism for handling such a violation by providing an STP violation handler. The pattern is:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(in) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\">    </span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\"> User code</span>\n<span class=\"source-lf meta-embedded-block-c\">=}</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">STP</span><span class=\"source-lf\"> (</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\">    </span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\"> Error handling code</span>\n<span class=\"source-lf meta-embedded-block-c\">=}</span>\n</pre>\n<p>If the tag at which this reaction is to be invoked (the value returned by <code>lf_tag()</code>) exceeds the tag of an incoming message <code>in</code> (the current tag has already advanced beyond the intended tag of <code>in</code>), then the <code>STP</code> violation handler will be invoked instead of the normal reaction. Within the body of the STP handler, the code can access the intended tag of <code>in</code> using <code>in->intended_tag</code>, which has two fields, a timestamp <code>in->intended_tag.time</code> and a microstep <code>in->intended_tag.microstep</code>. The code can then ascertain the severity of the error and act accordingly. For example:</p>\n<p>$start(DecentralizedTimerAfterHandler)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">5</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-lflang\">sec</span><span class=\"source-lf meta-targetspec-lflang\">,</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">coordination</span><span class=\"source-lf meta-targetspec-lflang\">: decentralized</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n<span class=\"source-lf keyword-control-import-lflang\">import</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-import-lflang\">from</span><span class=\"source-lf\"> </span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Federated.lf</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">PrintTimer</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> in:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(in) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_print</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Received: </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\"> at (</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%lld</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">, </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">)</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span>\n<span class=\"source-lf meta-embedded-block-c\">            </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_time_logical_elapsed</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_tag</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">microstep</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">STP</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_print</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">****** STP violation handler invoked at (</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%lld</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">, </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">). </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-c\">            </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Intended tag was (</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%lld</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">, </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">).</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span>\n<span class=\"source-lf meta-embedded-block-c\">            </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_time_logical_elapsed</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_tag</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">microstep</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span>\n<span class=\"source-lf meta-embedded-block-c\">            </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-object-property-cpp\">intended_tag</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">time</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-cpp\">-</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_time_start</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-object-property-cpp\">intended_tag</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">microstep</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_print</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Timer ticked at (</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%lld</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">, </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">).</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span>\n<span class=\"source-lf meta-embedded-block-c\">            </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_time_logical_elapsed</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_tag</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">microstep</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">PrintTimer</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">in</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">after</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">10</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf\">WARNING: No source file found: </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">code</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">cpp</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">DecentralizedTimerAfterHandler</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">lf</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">5</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-lflang\">sec</span><span class=\"source-lf meta-targetspec-lflang\">,</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">coordination</span><span class=\"source-lf meta-targetspec-lflang\">: decentralized</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n<span class=\"source-lf keyword-control-import-lflang\">import</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-import-lflang\">from</span><span class=\"source-lf\"> </span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Federated.lf</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">PrintTimer</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> inp</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(inp) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">Received: </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">inp</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">at (</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">lf</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">logical_elapsed</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">, </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">lf</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">tag</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">microstep</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">STP</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">****** STP violation handler invoked at </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">lf</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">logical_elapsed</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">, </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">lf</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">tag</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">microstep</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">). </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Intended tag was </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">inp</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">intended_tag</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python keyword-operator-arithmetic-python\">-</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">lf</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">start</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">, </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">inp</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">intended_tag</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">microstep</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">).</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Timer ticked at </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">lf</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">logical_elapsed</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">, </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">lf</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">tag</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">microstep</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">).</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">PrintTimer</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">inp</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">after</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">10</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf\">WARNING: No source file found: </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">code</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">ts</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">DecentralizedTimerAfterHandler</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">lf</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf\">WARNING: No source file found: </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">code</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">rs</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">DecentralizedTimerAfterHandler</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">lf</span>\n</pre>\n<p>$end(DecentralizedTimerAfterHandler)$</p>\n<p>For more advanced users, the LF API provides two functions that can be used to dynamically adjust the STP:</p>\n<pre class=\"source-lf language-c\"><span class=\"source-c support-type-posix-reserved-c\">interval_t</span><span class=\"source-c\"> </span><span class=\"source-c meta-function-c meta-function-definition-parameters-c entity-name-function-c\">lf_get_stp_offset</span><span class=\"source-c meta-function-c meta-function-definition-parameters-c punctuation-section-parameters-begin-bracket-round-c\">(</span><span class=\"source-c meta-function-c meta-function-definition-parameters-c punctuation-section-parameters-end-bracket-round-c\">)</span><span class=\"source-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c storage-type-built-in-primitive-c\">void</span><span class=\"source-c\"> </span><span class=\"source-c meta-function-c meta-function-definition-parameters-c entity-name-function-c\">lf_set_stp_offset</span><span class=\"source-c meta-function-c meta-function-definition-parameters-c punctuation-section-parameters-begin-bracket-round-c\">(</span><span class=\"source-c meta-function-c meta-function-definition-parameters-c support-type-posix-reserved-c\">interval_t</span><span class=\"source-c meta-function-c meta-function-definition-parameters-c\"> </span><span class=\"source-c meta-function-c meta-function-definition-parameters-c variable-parameter-probably-c\">offset</span><span class=\"source-c meta-function-c meta-function-definition-parameters-c punctuation-section-parameters-end-bracket-round-c\">)</span><span class=\"source-c punctuation-terminator-statement-c\">;</span>\n</pre>\n<p>Using these functions, however, is a pretty advanced operation.</p>\n<h2 id=\"physical-connections\" style=\"position:relative;\"><a href=\"#physical-connections\" aria-label=\"physical connections permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Physical Connections</h2>\n<p>Coordinating the execution of the federates so that timestamps are preserved is tricky. If your application does not require the deterministic execution that results from preserving the timestamps, then you can alternatively specify a <strong>physical connection</strong> as follows:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">source</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">~&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">print</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">in</span><span class=\"source-lf\">;</span>\n</pre>\n<p>The tilde specifies that the timestamp of the sender should be discarded. A new timestamp will be assigned at the receiving end based on the local physical clock, much like a <strong>physical action</strong>. To distinguish it from a physical connection, the normal connection is called a <strong>logical connection</strong>.</p>\n<p>There are a number of subtleties with physical connections. One is that if you specify an <code>after</code> clause, for example like this:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">count</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">~&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">print</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">in</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">after</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">10</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">;</span>\n</pre>\n<p>then what does this mean? At the receiving end, the timestamp assigned to the incoming event will be the current physical time plus 10 msec.</p>\n<h2 id=\"prerequisites-for-distributed-execution\" style=\"position:relative;\"><a href=\"#prerequisites-for-distributed-execution\" aria-label=\"prerequisites for distributed execution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites for Distributed Execution</h2>\n<p>In the above example, all of the generated programs expect to run on localhost. This is the default. With these defaults, every federate has to run on the same machine as the RTI because localhost is not a host that is visible from other machines on the network. In order to run federates or the RTI on remote machines, you can specify a domain name or IP address for the RTI and/or federates.</p>\n<p>In order for a federated execution to work, there is some setup required on the machines to be used. First, each machine must be running on <code>ssh</code> server. On a Linux machine, this is typically done with a command like this:</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell\">    </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">sudo</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">systemctl</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell keyword-operator-redirect-shell\">&lt;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">start</span><span class=\"source-shell keyword-operator-pipe-shell\">|</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">enable&gt;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">ssh.service</span>\n</pre>\n<p>Enable means to always start the service at startup, whereas start means to just start it this once. On macOS, open System Preferences from the Apple menu and click on the “Sharing” preference panel. Select the checkbox next to “Remote Login” to enable it.</p>\n<p>It will also be much more convenient if the launcher does not have to enter passwords to gain access to the remote machine. This can be accomplished by installing your public key (typically found in <code>~/.ssh/id_rsa.pub</code>) in <code>~/.ssh/authorized_keys</code> on the remote host.</p>\n<p>Second, the RTI must be installed on the remote machine. See <a href=\"#installation-of-the-rti\">instructions for installation the RTI</a>.</p>\n<h2 id=\"specifying-rti-hosts\" style=\"position:relative;\"><a href=\"#specifying-rti-hosts\" aria-label=\"specifying rti hosts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Specifying RTI Hosts</h2>\n<p>You can specify a domain name on which the RTI should run as follows:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">DistributedCount</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">at</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">www</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">example</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">com</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>You can alternatively specify an IP address (either IPv4 or IPv6):</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">DistributedCount</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">at</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-float-lflang\">10.0</span><span class=\"source-lf constant-numeric-float-lflang\">.0</span><span class=\"source-lf constant-numeric-float-lflang\">.198</span><span class=\"source-lf\"> { </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\"> }</span>\n</pre>\n<p>By default, the RTI starts a socket server on port 15045, if that port is available, and increments the port number by 1 until it finds an available port. The number of increments is limited by a target-specific number. In the C target, in rti.h, STARTING_PORT defines the number 15045 and PORT_RANGE_LIMIT limits the range of ports attempted (currently 1024).</p>\n<p>You can also specify a port for the RTI to use as follows:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">DistributedCount</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">at</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-float-lflang\">10.0</span><span class=\"source-lf constant-numeric-float-lflang\">.0</span><span class=\"source-lf constant-numeric-float-lflang\">.198</span><span class=\"source-lf\">:</span><span class=\"source-lf constant-numeric-int-lflang\">8080</span><span class=\"source-lf\"> { </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\"> }</span>\n</pre>\n<p>If you specify a specific port, then it will use that port if it is available and fail otherwise. The above changes this to port 8080.</p>\n<p>Note that if the machine uses DHCP to obtain its address, then the generated code may not work in the future since the address of the machine may change in the future.</p>\n<p>Address 0.0.0.0: The default host, <code>localhost</code> is used if no address is specified. Using <code>localhost</code> requires that the generated federates run on the local machine. This is ideal for testing. If you use <code>0.0.0.0</code>, then you are also specifying that the local machine (the one performing the code generation) will be the host, but now the process(es) running on this local machine can establish connections with processes on remote machines. The code generator will determine the IP address of the local machine, and any other hosts that need to communicate with reactors on the local host will use the current IP address of that local host at the time of code generation.</p>\n<h2 id=\"specifying-federate-hosts\" style=\"position:relative;\"><a href=\"#specifying-federate-hosts\" aria-label=\"specifying federate hosts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Specifying Federate Hosts</h2>\n<p>A federate may be mapped to a particular remote machine using a syntax like this:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">count</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">() </span><span class=\"source-lf storage-modifier-lflang\">at</span><span class=\"source-lf\"> user</span><span class=\"source-lf keyword-operator-lflang\">@</span><span class=\"source-lf\">host:port</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">path;</span>\n</pre>\n<p>The <code>port</code> is ignored in <strong>centralized</strong> mode because all communication is routed through the RTI, but in <strong>decentralized</strong> mode it will specify the port on which a socket server listens for incoming connections from other federates.</p>\n<p>If any federate has such a remote designator, then a <code>Federation_distribute.sh</code> shell script will be generated. This script will distribute the generated code for the RTI to the remote machine at the specified directory.</p>\n<p>You can also specify a user name on the remote machine for cases where the username will not match whoever launches the federation:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">DistributedCount</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">at</span><span class=\"source-lf\"> user</span><span class=\"source-lf keyword-operator-lflang\">@</span><span class=\"source-lf constant-numeric-float-lflang\">10.0</span><span class=\"source-lf constant-numeric-float-lflang\">.0</span><span class=\"source-lf constant-numeric-float-lflang\">.198</span><span class=\"source-lf\">:</span><span class=\"source-lf constant-numeric-int-lflang\">8080</span><span class=\"source-lf\"> { </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\"> }</span>\n</pre>\n<p>The general form of the host designation is</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">DistributedCount</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">at</span><span class=\"source-lf\"> user</span><span class=\"source-lf keyword-operator-lflang\">@</span><span class=\"source-lf\">host:port</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">path { </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\"> }</span>\n</pre>\n<p>where <code>user@</code>, <code>:port</code>, and <code>/path</code> are all optional. The <code>path</code> specifies the directory on the remote machine (relative to the home directory of the user) where the generated code will be put. The <code>host</code> should be an IPv4 address (e.g. <code>93.184.216.34</code>), IPv6 address (e.g. <code>2606:2800:220:1:248:1893:25c8:1946</code>), or a domain name (e.g. <code>www.example.com</code>). It can also be <code>localhost</code> or <code>0.0.0.0</code>. The host can be remote as long as it is accessible from the machine where the programs will be started.</p>\n<p>If <code>user@</code> is not given, then it is assumed that the username on the remote host is the same as on the machine that launches the programs. If <code>:port</code> is not given, then it defaults to port 15045. If <code>/path</code> is not given, then <code>~user/LinguaFrancaRemote</code> will be the root directory on the remote machine.</p>\n<h2 id=\"clock-synchronization\" style=\"position:relative;\"><a href=\"#clock-synchronization\" aria-label=\"clock synchronization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Clock Synchronization</h2>\n<p>Both centralized and decentralized coordination have some reliance on clock synchronization. First, the RTI determines the start time of all federates, and the actually physical start time will differ by the extent that their physical clocks differ. This is particularly problematic if clocks differ by hours or more, which is certainly possible. If the hosts on which you are running run a clock synchronization algorithm, such as <a href=\"https://en.wikipedia.org/wiki/Network_Time_Protocol\">NTP</a> or <a href=\"https://en.wikipedia.org/wiki/Precision_Time_Protocol\">PTP</a>, then you may not need to be concerned about this at all. Windows, Mac, and most versions of Linux, by default, run NTP, which synchronizes their clocks to some remote host. NTP is not particularly precise, however, so clock synchronization error can be hundreds of milliseconds or larger. PTP protocols are much more precise, so if your hosts derive their physical clocks from a PTP implementation, then you probably don’t need to do anything further. Unfortunately, as of this writing, even though almost all networking hardware provides support for PTP, few operating systems utilize it. We expect this to change when people have finally understood the value of precise clock synchronization.</p>\n<p>If your host is not running any clock synchronization, or if it is running only NTP and your application needs tighter latencies, then Lingua Franca’s own built-in clock synchronization may provide better precision, depending on your network conditions. Like NTP, it realizes a software-only protocol, which are much less precise than hardware-supported protocols such as PTP, but if your hosts are on the same local area network, then network conditions may be such that the performance of LF clock synchronization will be much better than NTP. If your network is equipped with PTP, you will want to disable the clock synchronization in Lingua Franca by specifying in your target properties the following:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">    clock</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">sync: off</span>\n</pre>\n<p>When a federation is mapped onto multiple machines, then, by default, any federate mapped to a machine that is not the one running the RTI will attempt during startup to synchronize its clock with the one on the machine running the RTI. The determination of whether the federate is running on the same machine is determined by comparing the string that comes after the <code>at</code> clause between the federate and the RTI. If they differ at all, then they will be treated as if the federate is running on a different machine even if it is actually running on the same machine. This default behavior can be obtained by either specifying nothing in the target properties or saying:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">    clock</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">sync: initial</span>\n</pre>\n<p>This results in clock synchronization being done during startup only. To account for the possibility of your clocks drifting during execution of the program, you can alternatively specify:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">    clock</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">sync: on</span>\n</pre>\n<p>With this specification, in addition to synchronization during startup, synchronization will be redone periodically during program execution.</p>\n<h3 id=\"clock-synchronization-options\" style=\"position:relative;\"><a href=\"#clock-synchronization-options\" aria-label=\"clock synchronization options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Clock Synchronization Options</h3>\n<p>A number of options can be specified using the <code>clock-sync-options</code> target parameter. For example:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">    clock</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">sync</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">options: {local</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">federates</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">on: </span><span class=\"source-lf constant-language-lflang\">true</span><span class=\"source-lf\">, test</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">offset: </span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">}</span>\n</pre>\n<p>The supported options are:</p>\n<ul>\n<li>\n<p><code>local-federates-on</code>: Should be <code>true</code> or <code>false</code>. By default, if a federate is mapped to the same host as the RTI (using the <code>at</code> keyword), then clock synchronization is turned off. This assumes that the federate will be using the same clock as the RTI, so there is no point in performing clock synchronization. However, sometimes it is useful to force clock synchronization to be run even in this case, for example to test the performance of clock synchronization. To force clock synchronization on in this case, set this option to <code>true</code>.</p>\n</li>\n<li>\n<p><code>test-offset</code>: The value should be a time value with units, e.g. <code>200 msec</code>. This will establish an artificial fixed offset for each federate’s clock of one plus the federate ID times the time value given. For example, with the value <code>200 msec</code>, a fixed offset of 200 milliseconds will be set on the clock for federate 0, 400 msec on the clock of federate 1, etc.</p>\n</li>\n<li>\n<p><code>period</code>: A time value (with units) that specifies how often runtime clock synchronization will be performed if it is turned on. The default is <code>5 msec</code>.</p>\n</li>\n<li>\n<p><code>attenuation</code>: A positive integer specifying a divisor applied to the estimated clock error during runtime clock synchronization when adjusting the clock offset. The default is <code>10</code>. Making this number bigger reduces each adjustment to the clock. Making the number equal to <code>1</code> means that each round of clock synchronization fully applies its estimated clock synchronization error.</p>\n</li>\n<li>\n<p><code>trials</code>: The number of rounds of message exchange with the RTI in each clock synchronization round. This defaults to <code>10</code>.</p>\n</li>\n</ul>\n</div>","headings":[{"value":"Installation of the RTI","depth":2},{"value":"Minimal Example","depth":2},{"value":"Federation ID","depth":2},{"value":"Coordinated Start","depth":2},{"value":"Coordinated Shutdown","depth":2},{"value":"Communication Between Federates","depth":2},{"value":"Centralized Coordination","depth":2},{"value":"Decentralized Coordination","depth":2},{"value":"Physical Connections","depth":2},{"value":"Prerequisites for Distributed Execution","depth":2},{"value":"Specifying RTI Hosts","depth":2},{"value":"Specifying Federate Hosts","depth":2},{"value":"Clock Synchronization","depth":2},{"value":"Clock Synchronization Options","depth":3}],"frontmatter":{"permalink":"/docs/handbook/distributed-execution","title":"Distributed Execution","oneline":"Distributed Execution (preliminary)","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Preambles","oneline":"Defining preambles in Lingua Franca.","permalink":"/docs/handbook/preambles"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Termination","oneline":"Terminating a Lingua Franca execution.","permalink":"/docs/handbook/termination"}}}},"pageContext":{"id":"1-distributed-execution","slug":"/docs/handbook/distributed-execution","repoPath":"/packages/documentation/copy/en/topics/Distributed Execution.md","previousID":"d9c76683-1fe5-55e0-b223-8e21c125f9cd","nextID":"ddf59040-674f-5833-a630-a62f39d0106e","lang":"en","modifiedTime":"2023-09-01T23:27:35.423Z"}},"staticQueryHashes":[]}