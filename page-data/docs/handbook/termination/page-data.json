{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/termination","result":{"data":{"markdownRemark":{"id":"6f15c9ee-d99f-5526-99a6-3dd6bce05820","excerpt":"Shutdown Reactions There are several mechanisms for terminating a Lingua Franca in an orderly fashion.\nAll of these mechanisms result in a final tag at whichâ€¦","html":"<h2 id=\"shutdown-reactions\" style=\"position:relative;\"><a href=\"#shutdown-reactions\" aria-label=\"shutdown reactions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shutdown Reactions</h2>\n<p>There are several mechanisms for terminating a Lingua Franca in an orderly fashion.\nAll of these mechanisms result in a <strong>final tag</strong> at which any reaction that declares $shutdown$ as a trigger will be invoked (recall that a <strong>tag</strong> is a tuple (<strong>logical time</strong>, <strong>microstep</strong>)). Other reactions may also be invoked at this final tag, and the order in which reactions are invoked will be constrained by the normal precedence rules.</p>\n<p>If a reaction triggered by $shutdown$ produces outputs, then downstream reactors will also be invoked at the final tag. If the reaction schedules any actions by calling <code>schedule()</code>, those will be ignored. In fact, any event after the final tag will be ignored. After the completion of the final tag, the program will exit.</p>\n<p>There are four ways to terminate a program:</p>\n<ul>\n<li><strong>Timeout</strong>: The program specifies the last logical time at which reactions should be triggered.</li>\n<li><strong>Starvation</strong>: At the conclusion of some tag, there are no events in the event queue at future tags.</li>\n<li><strong>Stop request</strong>: Some reaction requests that the program terminate.</li>\n<li><strong>External signal</strong>: Program is terminated externally using operating services like control-C or <code>kill</code>.</li>\n</ul>\n<p>We address each of these in turn.</p>\n<h2 id=\"timeout\" style=\"position:relative;\"><a href=\"#timeout\" aria-label=\"timeout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Timeout</h2>\n<p>The <a href=\"/docs/handbook/target-declaration#timeout\">target property <code>timeout</code></a> specifies the last logical time at which reactions should be triggered. The last invocation of reactions will be at tag (<code>timeout</code>, 0).</p>\n<p>There is a significant subtlety when using <a href=\"/docs/handbook/composing-reactors#physical-connections\">physical connections</a>, which are connections using the syntax <code>~></code>. Such connections specify that the tag at the receiving end will be based on the physical time at which the message is received. If the tag assigned at the receiving end is greater than the final tag, then the message is lost. Hence, <strong>messages sent near the <code>timeout</code> time are likely to be lost!</strong></p>\n<h2 id=\"starvation\" style=\"position:relative;\"><a href=\"#starvation\" aria-label=\"starvation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Starvation</h2>\n<p>If a Lingua Franca program has no <a href=\"/docs/handbook/actions#physical-actions\">physical actions</a>, and if at any time during execution there are no future events waiting to be processed, then there is no possibility for any more reactions to occur and the program will exit. This situation is called <strong>starvation</strong>. If there is a <strong>timer</strong> anywhere in the program with a period, then this condition never occurs.</p>\n<p>One subtlety is that reactions triggered by $shutdown$ will be invoked one microstep later than the last tag at which there was an event. They cannot be invoked at the same tag because it is only after that last tag has completed that the runtime system can be sure that there are no future events. It would not be correct to trigger the $shutdown$ reactions at that point because it would be impossible to respect the required reaction ordering.</p>\n<div class=\"lf-c lf-py lf-ts\">\n<p>Starvation termination is not currently implemented for federated execution. You will need to use one of the other mechanisms to terminate a federated program.</p>\n</div>\n<h2 id=\"stop-request\" style=\"position:relative;\"><a href=\"#stop-request\" aria-label=\"stop request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stop Request</h2>\n<p>If a reaction calls the built-in <code>request_stop()</code> function, then it is requesting that the program cease execution as soon as possible. This cessation will normally occur in the next microstep. The current tag will be completed as normal. Then the tag will be advanced by one microstep, and reactions triggered by $shutdown$ will be executed, along with any other reactions with triggers at that tag, with all reactions executed in precedence order.</p>\n<div class=\"lf-c lf-py lf-ts\">\n<p>In a federated execution, things are more complicated. In general, it is not possible to cease execution in the next microstep because this would mean that every federate has a communication channel to every other with delay equal to one microstep. This does not create a causality loop, but it means that all federates have to advance time in lockstep, which creates a global barrier synchronization that would likely kill performance. It would also make decentralized coordination impossible because the safe-to-process (STP) threshold for all federates would diverge to infinity.</p>\n<p>For <strong>centralized coordination</strong>, when a reaction in a federate calls <code>request_stop()</code>, the federate sends a <strong>STOP_REQUEST</strong> message to the RTI with its current timestamp <em>t</em> as a payload and completes execution of any other reactions triggered at the current tag. It then blocks, waiting for a <strong>STOP_GRANTED</strong> message with a timestamp payload <em>s</em>. If <em>s</em> > <em>t</em>, then it sets <code>timeout</code> = <em>s</em> and continues executing, using the timeout mechanism (see above) to stop. If <em>s</em> = <em>t</em>, then schedules the shutdown phase to occur one microstep later, as in the unfederated case.</p>\n<p>When the RTI receives a <strong>STOP_REQUEST</strong> message from a federate, it forwards it to all other federates and waits for a reply from all. Each reply will have a timestamp payload. The RTI chooses <em>s</em>, the largest of these timestamps, and sends a <strong>STOP_GRANTED</strong> message to all federates with payload <em>s</em>.</p>\n<p>When a federate receives a <strong>STOP_REQUEST</strong> message, it replies with its current logical time <em>t</em>, completes its current tag (if one is progress), and blocks, waiting for a <strong>STOP_GRANTED</strong> message from the RTI. When it gets the reply with payload <em>s</em>, if <em>s</em> > <em>t</em>, then it sets <code>timeout</code> = <em>s</em> and continues executing, using the timeout mechanism (see above) to stop. If <em>s</em> = <em>t</em>, then it schedules the shutdown phase to occur one microstep later, as in the unfederated case.</p>\n</div>\n<h2 id=\"external-signal\" style=\"position:relative;\"><a href=\"#external-signal\" aria-label=\"external signal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>External Signal</h2>\n<p>A control-C or other kill signal to a running Lingua Franca program will cause execution to stop immediately.</p>\n<div class=\"lf-c lf-py lf-ts\">\n<p>For federated programs, each federate and the RTI catches external signals to shut down in an orderly way.</p>\n<p>When a federate gets such an external signal (e.g. control-C), it sends a <strong>RESIGN</strong> message to the RTI and an <strong>EOF</strong> (end of file) on each socket connection to another federate. It then closes all sockets and shuts down. The RTI and all other federates should continue running until some other termination condition occurs.</p>\n<p>When the RTI gets such an external signal (e.g. control-C), it broadcasts a <strong>STOP_REQUEST</strong> message to all federates, waits for their replies (with a timeout in case the federate or the network has failed), chooses the maximum timestamp <em>s</em> on the replies, broadcasts a <strong>STOP_GRANTED</strong> message to all federates with payload <em>s</em>, and waits for <strong>LOGICAL_TIME_COMPLETE</strong> messages as above.</p>\n</div>","headings":[{"value":"Shutdown Reactions","depth":2},{"value":"Timeout","depth":2},{"value":"Starvation","depth":2},{"value":"Stop Request","depth":2},{"value":"External Signal","depth":2}],"frontmatter":{"permalink":"/docs/handbook/termination","title":"Termination","oneline":"Terminating a Lingua Franca execution.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Distributed Execution","oneline":"Distributed Execution (preliminary)","permalink":"/docs/handbook/distributed-execution"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Contributing","oneline":"Contribute to Lingua Franca.","permalink":"/docs/handbook/contributing"}}}},"pageContext":{"id":"1-termination","slug":"/docs/handbook/termination","repoPath":"/packages/documentation/copy/en/topics/Termination.md","previousID":"79d9c9b2-eee4-5652-9541-c483de60119e","lang":"en","modifiedTime":"2023-09-01T23:27:35.423Z"}},"staticQueryHashes":[]}