{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/extending-reactors","result":{"data":{"markdownRemark":{"id":"2efb41b1-0afb-5eab-9d59-7f064a8b778e","excerpt":"$page-showing-target$ Extending a Base Reactor The Cpp target does not yet support extending reactors. Lingua Franca supports defining a reactor class as anâ€¦","html":"<p>$page-showing-target$</p>\n<h2 id=\"extending-a-base-reactor\" style=\"position:relative;\"><a href=\"#extending-a-base-reactor\" aria-label=\"extending a base reactor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extending a Base Reactor</h2>\n<div class=\"lf-cpp\">\n<p><strong>The Cpp target does not yet support extending reactors.</strong></p>\n</div>\n<div class=\"lf-c lf-py lf-ts lf-rs\">\n<p>Lingua Franca supports defining a reactor class as an extension (or subclass), as in the following example:</p>\n<p>$start(Extends)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">A</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">:</span><span class=\"source-lf meta-embedded-block-cpp storage-type-lflang\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\">:</span><span class=\"source-lf meta-embedded-block-cpp storage-type-lflang\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf\">a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp\">out</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-cpp variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">B</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">extends</span><span class=\"source-lf\"> A {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">b</span><span class=\"source-lf\">:</span><span class=\"source-lf meta-embedded-block-cpp storage-type-lflang\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf\">a, b) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp\">out</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-cpp variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-cpp\">+</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">b</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-cpp variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf\">WARNING: </span><span class=\"source-lf storage-type-lflang\">No</span><span class=\"source-lf\"> source file found: </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">code</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">cpp</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">Extends</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">lf</span>\n<span class=\"source-lf comment-line-double-dash-lflang\">// the cpp target currently does not support reactor extends</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">A</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">out</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">set</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">  </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">B</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">extends</span><span class=\"source-lf\"> A {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">b</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a, b) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">out</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">set</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python keyword-operator-arithmetic-python\">+</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">b</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">  </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">A</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">:</span><span class=\"source-lf storage-type-lflang\">number</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\">:</span><span class=\"source-lf storage-type-lflang\">number</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">out</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">a</span>\n<span class=\"source-lf meta-embedded-block-ts\">  </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">B</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">extends</span><span class=\"source-lf\"> A {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">b</span><span class=\"source-lf\">:</span><span class=\"source-lf storage-type-lflang\">number</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a, b) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">out</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">a</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">b</span>\n<span class=\"source-lf meta-embedded-block-ts\">  </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">A</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">:</span><span class=\"source-lf storage-type-lflang\">u32</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\">:</span><span class=\"source-lf storage-type-lflang\">u32</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">    ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">set</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">out, ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">get</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">a).</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">unwrap</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">));</span>\n<span class=\"source-lf meta-embedded-block-rs\">  </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">B</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">extends</span><span class=\"source-lf\"> A {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">b</span><span class=\"source-lf\">:</span><span class=\"source-lf storage-type-lflang\">u32</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a, b) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">    ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">set</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">out, ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">get</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">a).</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">unwrap</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">) </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-arithmetic-rust\">+</span><span class=\"source-lf meta-embedded-block-rs\"> ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">get</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">b).</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">unwrap</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">));</span>\n<span class=\"source-lf meta-embedded-block-rs\">  </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>$end(Extends)$</p>\n<img alt=\"Lingua Franca diagram\" src=\"/e09a75e3901fa7878fe6b7631623def4/Extends.svg\" width=\"350\">\n<p>Here, the base class <code>A</code> has a single output that it writes to in reaction to an input. The subclass inherits the input, the output, and the reaction of <code>A</code>, and adds its own input <code>b</code> and reaction. When an input event <code>a</code> arrives, both reactions will be invoked, but, once again, in a well-defined order. The reactions of the base class are invoked before those of the derived class. So in this case, <code>B</code> will overwrite the output produced by <code>A</code>.</p>\n<p>One limitation is that a subclass cannot have ports, actions, or state variables with the same names as those in the base class. The names must be unique.</p>\n<p>A subclass can extend more than one base class by just providing a comma-separated list of base classes. If reactions in multiple base classes are triggered at the same tag, they will be invoked in the same order that they appear in the comma-separated list.</p>\n</div>","headings":[{"value":"Extending a Base Reactor","depth":2}],"frontmatter":{"permalink":"/docs/handbook/extending-reactors","title":"Extending Reactors","oneline":"Extending reactors in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Causality Loops","oneline":"Causality loops in Lingua Franca.","permalink":"/docs/handbook/causality-loops"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Actions","oneline":"Actions in Lingua Franca.","permalink":"/docs/handbook/actions"}}}},"pageContext":{"id":"1-extending-reactors","slug":"/docs/handbook/extending-reactors","repoPath":"/packages/documentation/copy/en/topics/Extending Reactors.md","previousID":"de5af6b0-de72-5890-9668-c4f000ffdb2c","nextID":"ab880406-6c38-59c6-9a2c-a8f736013224","lang":"en","modifiedTime":"2023-09-03T07:55:40.509Z"}},"staticQueryHashes":[]}