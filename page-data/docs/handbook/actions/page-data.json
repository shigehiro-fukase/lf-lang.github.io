{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/actions","result":{"data":{"markdownRemark":{"id":"dd46179b-1189-5c1f-a60a-37e302c85efc","excerpt":"$page-showing-target$ Action Declaration An action declaration has one of the following forms: The min_delay, min_spacing, and policy are all optional. If onlyâ€¦","html":"<p>$page-showing-target$</p>\n<h2 id=\"action-declaration\" style=\"position:relative;\"><a href=\"#action-declaration\" aria-label=\"action declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Action Declaration</h2>\n<p>An action declaration has one of the following forms:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> &lt;</span><span class=\"source-lf variable-other-lflang\">name</span><span class=\"source-lf\">&gt;</span><span class=\"source-lf\">(&lt;min_delay&gt;, &lt;min_spacing&gt;, &lt;policy&gt;)</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">physical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> &lt;</span><span class=\"source-lf variable-other-lflang\">name</span><span class=\"source-lf\">&gt;</span><span class=\"source-lf\">(&lt;min_delay&gt;, &lt;min_spacing&gt;, &lt;policy&gt;)</span>\n</pre>\n<p>The <code>min_delay</code>, <code>min_spacing</code>, and <code>policy</code> are all optional. If only one argument is given in parentheses, then it is interpreted as an <code>min_delay</code>, if two are given, then they are interpreted as <code>min_delay</code> and <code>min_spacing</code>. The <code>min_delay</code> and <code>min_spacing</code> are time values. The <code>policy</code> argument is a string that can be one of the following: <code>\"defer\"</code> (the default), <code>\"drop\"</code>, or <code>\"replace\"</code>. Note that the quotation marks are needed.</p>\n<div class=\"lf-c lf-cpp lf-ts lf-rs\">\n<p>If the action is to carry a payload, then a type must be given as well:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> &lt;</span><span class=\"source-lf variable-other-lflang\">name</span><span class=\"source-lf\">&gt;</span><span class=\"source-lf\">(&lt;min_delay&gt;, &lt;min_spacing&gt;, &lt;policy&gt;):&lt;type&gt;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">physical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> &lt;</span><span class=\"source-lf variable-other-lflang\">name</span><span class=\"source-lf\">&gt;</span><span class=\"source-lf\">(&lt;min_delay&gt;, &lt;min_spacing&gt;, &lt;policy&gt;):&lt;type&gt;</span>\n</pre>\n</div>\n<h2 id=\"logical-actions\" style=\"position:relative;\"><a href=\"#logical-actions\" aria-label=\"logical actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logical Actions</h2>\n<p>Timers are useful to trigger reactions once or periodically. Actions are used to trigger reactions more irregularly. An action, like an output or input port, can carry data, but unlike a port, an action is visible only within the reactor that defines it.</p>\n<p>There are two kinds of actions, <strong>logical</strong> and <strong>physical</strong>. A $logical$ $action$ is used by a reactor to schedule a trigger at a fixed logical time interval <em>d</em> into the future. The time interval <em>d</em>, which is called a <strong>delay</strong>, is relative to the logical time <em>t</em> at which the scheduling occurs. If a reaction executes at logical time <em>t</em> and schedules an action <code>a</code> with delay <em>d</em>, then any reaction that is triggered by <code>a</code> will be invoked at logical time <em>t</em> + <em>d</em>. For example, the following reaction schedules something (printing the current elapsed logical time) 200 msec after an input <code>x</code> arrives:</p>\n<p>$start(Schedule)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Schedule</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">:</span><span class=\"source-lf meta-embedded-block-cpp storage-type-lflang\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf\">x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">lf_schedule</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">MSEC</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">200</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf\">a) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">interval_t</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed_time </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">lf_time_logical_elapsed</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Action triggered at logical time </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-other-placeholder\">%lld</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\"> nsec after start.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Schedule</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">:</span><span class=\"source-lf meta-embedded-block-cpp storage-type-lflang\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf\">x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">schedule</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">200</span><span class=\"source-lf meta-embedded-block-cpp keyword-other-unit-user-defined-cpp\">ms</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf\">a) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed_time </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">get_elapsed_logical_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Action triggered at logical time </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed_time </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">  nsec after start.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Schedule</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">schedule</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-function-call-python meta-function-call-generic-python\">MSEC</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">200</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">  </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">elapsed_time</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">lf</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">logical_elapsed</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">Action triggered at logical time </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">elapsed_time</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\"> nsec after start.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">  </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Schedule</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">:</span><span class=\"source-lf storage-type-lflang\">number</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-ts\">actions</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-property-ts\">a</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts entity-name-function-ts\">schedule</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-ts\">TimeValue</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts entity-name-function-ts\">nsecs</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">200</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-language-null-ts\">null</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">  </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-begin-ts\">`</span><span class=\"source-lf meta-embedded-block-ts string-template-ts\">Action triggered at logical time </span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-begin-ts\">${</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts entity-name-function-ts\">getElapsedLogicalTime</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-end-ts\">}</span><span class=\"source-lf meta-embedded-block-ts string-template-ts\"> after start.</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-end-ts\">`</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">  </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Schedule</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">:</span><span class=\"source-lf storage-type-lflang\">u32</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">    ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">schedule</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">a, </span><span class=\"source-lf meta-embedded-block-rs entity-name-function-macro-rust\">after!</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs constant-numeric-integer-decimal-rust\">200</span><span class=\"source-lf meta-embedded-block-rs\"> ms));</span>\n<span class=\"source-lf meta-embedded-block-rs\">  </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">printf</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">      Action triggered at logical time {} nsec after start.</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs\">,</span>\n<span class=\"source-lf meta-embedded-block-rs\">      ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">get_elapsed_logical_time</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">).</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">as_nanos</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">),</span>\n<span class=\"source-lf meta-embedded-block-rs\">    );</span>\n<span class=\"source-lf meta-embedded-block-rs\">  </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>$end(Schedule)$</p>\n<img alt=\"Lingua Franca diagram\" src=\"/5130028346aef2a24dae6996d8b51ea1/Schedule.svg\" width=\"200\">\n<p>Here, the delay is specified in the call to schedule within the target language code. Notice that in the diagram, a logical action is shown as a triangle with an <strong>L</strong>. Logical actions are always scheduled within a reaction of the reactor that declares the action.</p>\n<p>The time argument is required to be non-negative. If it is zero, then the action will be scheduled one <strong>microstep</strong> later. See <a href=\"/docs/handbook/superdense-time\">Superdense Time</a>.</p>\n<div class=\"lf-c\">\n<p>The arguments to the <code>lf_schedule()</code> function are the action named <code>a</code> and a time. The action <code>a</code> has to be declared as an effect of the reaction in order to reference it in the call to <code>lf_schedule()</code>. If you fail to declare it as an effect (after the <code>-></code> in the reaction signature), then you will get an error message.</p>\n<p>The time argument to the <code>lf_schedule()</code> function has data type <code>interval_t</code>, which, with the exception of some embedded platforms, is a C <code>int64_t</code>. A collection of convenience macros is provided like the <code>MSEC</code> macro above to specify time values in a more readable way. The provided macros are <code>NSEC</code>, <code>USEC</code> (for microseconds), <code>MSEC</code>, <code>SEC</code>, <code>MINUTE</code>, <code>HOUR</code>, <code>DAY</code>, and <code>WEEK</code>. You may also use the plural of any of these, e.g. <code>WEEKS(2)</code>.</p>\n<p>An action may have a data type, in which case, a variant of the <code>lf_schedule()</code> function can be used to specify a <strong>payload</strong>, a data value that is carried from where the <code>lf_schedule()</code> function is called to the reaction that is triggered by the action. See the <a href=\"/docs/handbook/target-language-details\">Target Language Details</a>.</p>\n</div>\n<div class=\"lf-cpp\">\n<p>An action may have a data type, in which case, a variant of the <code>schedule()</code> function can be used to specify a <strong>payload</strong>, a data value that is carried from where the <code>schedule()</code> function is called to the reaction that is triggered by the action. See the <a href=\"/docs/handbook/target-language-details\">Target Language Details</a>.</p>\n</div>\n<div class=\"lf-py\">\n<p>The arguments to the <code>a.schedule()</code> method is a time. The action <code>a</code> has to be\ndeclared as an effect of the reaction in order to reference it in the body of\nthe reaction. If you fail to declare it as an effect (after the <code>-></code> in the\nreaction signature), then you will get a runtime error message.</p>\n<p>The time argument to the <code>a.schedule()</code> method expects an integer. A collection\nof convenience functions is provided like the <code>MSEC</code> function above to specify\ntime values in a more readable way. The provided functions are <code>NSEC</code>, <code>USEC</code>\n(for microseconds), <code>MSEC</code>, <code>SEC</code>, <code>MINUTE</code>, <code>HOUR</code>, <code>DAY</code>, and <code>WEEK</code>. You may\nalso use the plural of any of these, e.g. <code>WEEKS(2)</code>.</p>\n<p>An action may carry data, in which case, the <strong>payload</strong> data value is just given as a second argument to the <code>.schedule()</code> method. See the <a href=\"/docs/handbook/target-language-details\">Target Language Details</a>.</p>\n</div>\n<div class=\"lf-ts\">\n<p>The <code>schedule()</code> method of an action takes two arguments, a <code>TimeValue</code> and an (optional) payload. If a payload is given and a type is given for the action, then the type of the payload must match the type of the action. See the <a href=\"/docs/handbook/target-language-details\">Target Language Details</a> for details.</p>\n</div>\n<div class=\"lf-rs\">\n<p><span class=\"warning\">FIXME</span></p>\n<p>An action may have a data type, in which case, a variant of the <code>schedule()</code> function can be used to specify a <strong>payload</strong>, a data value that is carried from where the <code>schedule()</code> function is called to the reaction that is triggered by the action. See the <a href=\"/docs/handbook/target-language-details\">Target Language Details</a>.</p>\n</div>\n<h2 id=\"physical-actions\" style=\"position:relative;\"><a href=\"#physical-actions\" aria-label=\"physical actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Physical Actions</h2>\n<p>A $physical$ $action$ is used to schedule reactions at logical times determined by the local physical clock. If a physical action with delay <em>d</em> is scheduled at <em>physical</em> time <em>T</em>, then the <em>logical time</em> assigned to the event is <em>T</em> + <em>d</em>. For example, the following reactor schedules the physical action <code>p</code> to trigger at a <strong>logical time</strong> equal to the <strong>physical time</strong> at which the input <code>x</code> arrives:</p>\n<p>$start(Physical)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Physical</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">:</span><span class=\"source-lf meta-embedded-block-cpp storage-type-lflang\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">physical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf\">x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">lf_schedule</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf\">a) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">interval_t</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed_time </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">lf_time_logical_elapsed</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Action triggered at logical time </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-other-placeholder\">%lld</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\"> nsec after start.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Physical</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">:</span><span class=\"source-lf meta-embedded-block-cpp storage-type-lflang\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">physical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf\">x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">schedule</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-cpp keyword-other-unit-user-defined-cpp\">ms</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf\">a) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed_time </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">get_elapsed_logical_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Action triggered at logical time </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed_time </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\"> nsec after start.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Physical</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">physical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">schedule</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">0</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">  </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">elapsed_time</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">lf</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">logical_elapsed</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">Action triggered at logical time </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">elapsed_time</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\"> nsec after start.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">  </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Physical</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">:</span><span class=\"source-lf storage-type-lflang\">int</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">physical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-ts\">actions</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-property-ts\">a</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts entity-name-function-ts\">schedule</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-ts\">TimeValue</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts entity-name-function-ts\">zero</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-language-null-ts\">null</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">  </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-begin-ts\">`</span><span class=\"source-lf meta-embedded-block-ts string-template-ts\">Action triggered at logical time </span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-begin-ts\">${</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts entity-name-function-ts\">getElapsedLogicalTime</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-end-ts\">}</span><span class=\"source-lf meta-embedded-block-ts string-template-ts\"> nsec after start.</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-end-ts\">`</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">  </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Physical</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">:</span><span class=\"source-lf storage-type-lflang\">u32</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">physical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs keyword-other-rust\">let</span><span class=\"source-lf meta-embedded-block-rs\"> phys_action </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-assignment-rust\">=</span><span class=\"source-lf meta-embedded-block-rs\"> a.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">clone</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">);</span>\n<span class=\"source-lf meta-embedded-block-rs\">    ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">spawn_physical_thread</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs keyword-other-rust\">move</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-arithmetic-rust\">|</span><span class=\"source-lf meta-embedded-block-rs\">link</span><span class=\"source-lf meta-embedded-block-rs keyword-operator-arithmetic-rust\">|</span><span class=\"source-lf meta-embedded-block-rs\"> {</span>\n<span class=\"source-lf meta-embedded-block-rs\">      link.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">schedule</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs keyword-operator-sigil-rust\">&amp;</span><span class=\"source-lf meta-embedded-block-rs\">phys_action, Asap).</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">unwrap</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">);</span>\n<span class=\"source-lf meta-embedded-block-rs\">    });</span>\n<span class=\"source-lf meta-embedded-block-rs\">  </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs support-function-std-rust\">println!</span><span class=\"source-lf meta-embedded-block-rs\">(</span>\n<span class=\"source-lf meta-embedded-block-rs\">      </span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">Action triggered at logical time {} nsec after start.</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs\">,</span>\n<span class=\"source-lf meta-embedded-block-rs\">      ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">get_elapsed_logical_time</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">).</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">as_nanos</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">),</span>\n<span class=\"source-lf meta-embedded-block-rs\">    );</span>\n<span class=\"source-lf meta-embedded-block-rs\">  </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>$end(Physical)$</p>\n<img alt=\"Lingua Franca diagram\" src=\"/c522350c03ba8eeee028b48f0ef456b1/Physical.svg\" width=\"200\">\n<p>If you drive this with a timer, using for example the following structure:</p>\n<img alt=\"Lingua Franca diagram\" src=\"/fd2b2f93418cb57a22fef591b635c9ed/PhysicalTest.svg\" width=\"400\">\n<p>then running the program will yield an output something like this:</p>\n<pre class=\"source-lf language-text\">Action triggered at logical time 201491000 nsec after start.\nAction triggered at logical time 403685000 nsec after start.\nAction triggered at logical time 603669000 nsec after start.\n...</pre>\n<p>Here, logical time is lagging physical time by a few milliseconds. Note that, unless the <a href=\"/docs/handbook/target-declaration#fast\">fast option</a> is given, logical time <em>t</em> chases physical time <em>T</em>, so <em>t</em> &#x3C; <em>T</em>. Hence, the event being scheduled in the reaction to input <code>x</code> is assured of being in the future in logical time.</p>\n<p>Whereas logical actions are required to be scheduled within a reaction of the reactor that declares the action, physical actions can be scheduled by code that is outside the Lingua Franca system. For example, some other thread or a callback function may call <code>schedule()</code>, passing it a physical action. For example:</p>\n<p>$start(Asynchronous)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">  keepalive</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">true</span><span class=\"source-lf meta-targetspec-lflang\">  </span><span class=\"source-lf meta-targetspec-lflang comment-line-double-dash-lflang\">// Do not exit when event queue is empty.</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n<span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp keyword-control-directive-include-cpp punctuation-definition-directive-cpp\">#</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp keyword-control-directive-include-cpp\">include</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-double-include-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-double-include-cpp\">platform.h</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-double-include-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp\"> Defines lf_sleep() and thread functions.</span>\n<span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp\"> Schedule an event roughly every 200 msec.</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-qualified_type-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">void</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp storage-modifier-pointer-cpp\">*</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp entity-name-function-definition-cpp\">external</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-parameters-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">void</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp storage-modifier-pointer-cpp\">*</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp meta-function-definition-parameters meta-parameter-cpp variable-parameter-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-parameters-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-block-begin-bracket-curly-function-definition-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\">      </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp keyword-control-while-cpp\">while</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-parens-cpp constant-language-true-cpp\">true</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp entity-name-function-call-cpp\">lf_sleep</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp entity-name-function-call-cpp\">MSEC</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp constant-numeric-decimal-cpp\">200</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp entity-name-function-call-cpp\">lf_schedule</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp\">      </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-cpp meta-body-function-definition-cpp punctuation-section-block-end-bracket-curly-function-definition-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">thread_id</span><span class=\"source-lf\">:</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">lf_thread_t</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">0</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">physical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">): </span><span class=\"source-lf storage-type-lflang\">int</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp\"> Start a thread to schedule physical actions.</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">lf_thread_create</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-cpp\">&amp;</span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-cpp variable-other-property-cpp\">thread_id</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-cpp\">&amp;</span><span class=\"source-lf meta-embedded-block-cpp\">external</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf\">a) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">interval_t</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed_time </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">lf_time_logical_elapsed</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Action triggered at logical time </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-other-placeholder\">%lld</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\"> nsec after start.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">private</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp keyword-control-directive-include-cpp punctuation-definition-directive-cpp\">#</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp keyword-control-directive-include-cpp\">include</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp punctuation-definition-string-begin-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp\">thread</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp punctuation-definition-string-end-cpp\">&gt;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">thread</span><span class=\"source-lf\">:</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp storage-type-lflang\">thread</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">physical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">:</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp\"> Start a thread to schedule physical actions.</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    thread </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">thread</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-definition-capture-begin-lambda-cpp\">[</span><span class=\"source-lf meta-embedded-block-cpp meta-lambda-capture-cpp keyword-operator-cpp\">&amp;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-definition-capture-end-lambda-cpp\">]</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp punctuation-section-block-begin-bracket-curly-lambda-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp\">      </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp keyword-control-while-cpp\">while</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-parens-cpp constant-language-true-cpp\">true</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp entity-name-scope-resolution-function-call-cpp\">this_thread</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-function-call-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp entity-name-function-call-cpp\">sleep_for</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp constant-numeric-decimal-cpp\">200</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp keyword-other-unit-user-defined-cpp\">ms</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp comment-line-double-slash-cpp\"> the value that we give it really doesn&#039;t matter</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp comment-line-double-slash-cpp\"> but we the action should is scheduled for 100ms into the future</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp entity-name-function-member-cpp\">schedule</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp constant-numeric-decimal-cpp\">100</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp keyword-other-unit-user-defined-cpp\">ms</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp\">      </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp punctuation-section-block-end-bracket-curly-lambda-cpp\">}</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf\">a) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed_time </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">get_physical_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Action triggered at logical time</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed_time </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">nsec after start.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py keyword-control-import-python\">import</span><span class=\"source-lf meta-embedded-block-py\"> time</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py keyword-control-import-python\">import</span><span class=\"source-lf meta-embedded-block-py\"> threading</span>\n<span class=\"source-lf meta-embedded-block-py\">    # Schedule an event roughly every 200 msec.</span>\n<span class=\"source-lf meta-embedded-block-py\">    def external(self, a):</span>\n<span class=\"source-lf meta-embedded-block-py\">      while (True):</span>\n<span class=\"source-lf meta-embedded-block-py\">        self.time.sleep(0.2)</span>\n<span class=\"source-lf meta-embedded-block-py\">        a.schedule(0)</span>\n<span class=\"source-lf meta-embedded-block-py\">  </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">thread</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">physical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-lf meta-embedded-block-py comment-line-number-sign-python\"> Start a thread to schedule physical actions.</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">thread</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">threading</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">Thread</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-parameter-function-call-python\">target</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">external</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-parameter-function-call-python\">args</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-parenthesis-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-separator-element-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-parenthesis-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">thread</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">start</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">  </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">elapsed_time</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">lf</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">logical_elapsed</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">Action triggered at logical time </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">elapsed_time</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\"> nsec after start.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">  </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">physical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">): </span><span class=\"source-lf storage-type-lflang\">number</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts punctuation-whitespace-comment-leading-ts\">    </span><span class=\"source-lf meta-embedded-block-ts comment-line-double-slash-ts punctuation-definition-comment-ts\">//</span><span class=\"source-lf meta-embedded-block-ts comment-line-double-slash-ts\"> Have asynchronous callback schedule physical action.</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-ts\">setTimeout</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-parameters-ts punctuation-definition-parameters-begin-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-parameters-ts punctuation-definition-parameters-end-ts\">)</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts storage-type-function-arrow-ts\">=&gt;</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts\">      </span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts meta-function-call-ts variable-other-object-ts\">actions</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts meta-function-call-ts variable-other-object-property-ts\">a</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts meta-function-call-ts entity-name-function-ts\">schedule</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts meta-function-call-ts variable-other-object-ts\">TimeValue</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts meta-function-call-ts entity-name-function-ts\">zero</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-arrow-ts meta-block-ts punctuation-definition-block-ts\">}</span><span class=\"source-lf meta-embedded-block-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">200</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">  </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-begin-ts\">`</span><span class=\"source-lf meta-embedded-block-ts string-template-ts\">Action triggered at logical time </span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-begin-ts\">${</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts entity-name-function-ts\">getElapsedLogicalTime</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-end-ts\">}</span><span class=\"source-lf meta-embedded-block-ts string-template-ts\"> nsec after start.</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-end-ts\">`</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">  </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">start_time</span><span class=\"source-lf\">:</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Instant</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-rs\">{=</span><span class=\"source-lf meta-embedded-block-rs\"> Instant</span><span class=\"source-lf meta-embedded-block-rs keyword-operator-misc-rust\">::</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">now</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">) </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">physical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-lflang\">a</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">): </span><span class=\"source-lf storage-type-lflang\">u32</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs keyword-other-rust\">let</span><span class=\"source-lf meta-embedded-block-rs\"> phys_action </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-assignment-rust\">=</span><span class=\"source-lf meta-embedded-block-rs\"> a.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">clone</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">); </span><span class=\"source-lf meta-embedded-block-rs comment-line-double-slash-rust\">//</span><span class=\"source-lf meta-embedded-block-rs comment-line-double-slash-rust\"> clone to move it into other thread</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs comment-line-double-slash-rust\">//</span><span class=\"source-lf meta-embedded-block-rs comment-line-double-slash-rust\"> Start a thread to schedule physical actions.</span>\n<span class=\"source-lf meta-embedded-block-rs\">    ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">spawn_physical_thread</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs keyword-other-rust\">move</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-arithmetic-rust\">|</span><span class=\"source-lf meta-embedded-block-rs\">link</span><span class=\"source-lf meta-embedded-block-rs keyword-operator-arithmetic-rust\">|</span><span class=\"source-lf meta-embedded-block-rs\"> {</span>\n<span class=\"source-lf meta-embedded-block-rs\">      </span><span class=\"source-lf meta-embedded-block-rs keyword-control-rust\">loop</span><span class=\"source-lf meta-embedded-block-rs\"> {</span>\n<span class=\"source-lf meta-embedded-block-rs\">        std</span><span class=\"source-lf meta-embedded-block-rs keyword-operator-misc-rust\">::</span><span class=\"source-lf meta-embedded-block-rs\">thread</span><span class=\"source-lf meta-embedded-block-rs keyword-operator-misc-rust\">::</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">sleep</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">Duration</span><span class=\"source-lf meta-embedded-block-rs keyword-operator-misc-rust\">::</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">from_millis</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs constant-numeric-integer-decimal-rust\">200</span><span class=\"source-lf meta-embedded-block-rs\">));</span>\n<span class=\"source-lf meta-embedded-block-rs\">        link.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">schedule_physical</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs keyword-operator-sigil-rust\">&amp;</span><span class=\"source-lf meta-embedded-block-rs\">phys_action, Asap).</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">unwrap</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">);</span>\n<span class=\"source-lf meta-embedded-block-rs\">      }</span>\n<span class=\"source-lf meta-embedded-block-rs\">    });</span>\n<span class=\"source-lf meta-embedded-block-rs\">  </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs keyword-other-rust\">let</span><span class=\"source-lf meta-embedded-block-rs\"> elapsed_time </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-assignment-rust\">=</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.start_time.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">elapsed</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">);</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs support-function-std-rust\">println!</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">Action triggered at logical time {} nsecs after start.</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs\">, elapsed_time.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">as_nanos</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">));</span>\n<span class=\"source-lf meta-embedded-block-rs\">  </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>$end(Asynchronous)$</p>\n<img alt=\"Lingua Franca diagram\" src=\"/a2c95a35fe91c6f4c67a8317c4813319/Asynchronous.svg\" width=\"350\">\n<p>Physical actions are the mechanism for obtaining input from the outside world. Because they are assigned a logical time derived from the physical clock, their logical time can be interpreted as a measure of the time at which some external event occurred.</p>\n<div class=\"lf-c\">\n<p>In the above example, at $startup$, the main reactor creates an external thread that schedules a physical action roughly every 200 msec.</p>\n<p>First, the <a href=\"/docs/handbook/preambles\">file-level $preamble$</a> has <code>#include \"platform.h\"</code>, which includes the declarations for functions it uses, <code>lf_sleep</code> and <code>lf_thread_create</code> (see <a href=\"/docs/handbook/target-language-details?target=c#libraries-available-to-programmers\">Libraries Available to Programmers</a>).</p>\n<p>Second, the thread uses a function <code>lf_sleep()</code>, which abstracts platform-specific mechanisms for stalling the thread for a specified amount of time, and <code>lf_thread_create()</code>, which abstracts platform-specific mechanisms for creating threads.</p>\n<p>The <code>external</code> function executed by the thread is defined in a reactor-level $preamble$ section. See <a href=\"/docs/handbook/preambles\">Preambles</a>.</p>\n</div>\n<h2 id=\"triggering-time-for-actions\" style=\"position:relative;\"><a href=\"#triggering-time-for-actions\" aria-label=\"triggering time for actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Triggering Time for Actions</h2>\n<p>An action will trigger at a logical time that depends on the arguments given to the schedule function, the <code>&#x3C;min_delay></code>, <code>&#x3C;min_spacing></code>, and <code>&#x3C;policy></code> arguments in the action declaration, and whether the action is physical or logical.</p>\n<p>For a $logical$ action <code>a</code>, the tag assigned to the event resulting from a call to <code>schedule()</code> is computed as follows. First, let <em>t</em> be the <em>current logical time</em>. For a logical action, <em>t</em> is just the logical time at which the reaction calling <code>schedule()</code> is called. The <strong>preliminary time</strong> of the action is then just <em>t</em> + <code>&#x3C;min_delay></code> + <code>&#x3C;offset></code>. This preliminary time may be further modified, as explained below.</p>\n<p>For a <strong>physical</strong> action, the preliminary time is similar, except that <em>t</em> is replaced by the current <em>physical</em> time <em>T</em> when <code>schedule()</code> is called.</p>\n<p>If a <code>&#x3C;min_spacing></code> has been declared, then it gives a minimum logical time\ninterval between the tags of two subsequently scheduled events. If the\npreliminary time is closer than <code>&#x3C;min_spacing></code> to the time of the previously\nscheduled event (if there is one), then <code>&#x3C;policy></code> (if supported by the target)\ndetermines how the minimum spacing constraint is enforced.</p>\n<div class=\"lf-c lf-py\">\n<p>The <code>&#x3C;policy></code> is one of the following:</p>\n<ul>\n<li><code>\"defer\"</code>: (<strong>the default</strong>) The event is added to the event queue with a tag that is equal to earliest time that satisfies the minimal spacing requirement. Assuming the time of the preceding event is <em>t_prev</em>, then the tag of the new event simply becomes <em>t_prev</em> + <code>&#x3C;min_spacing></code>.</li>\n<li><code>\"drop\"</code>: The new event is dropped and <code>schedule()</code> returns without having modified the event queue.</li>\n<li><code>\"replace\"</code>: The payload (if any) of the new event is assigned to the preceding event if it is still pending in the event queue; no new event is added to the event queue in this case. If the preceding event has already been pulled from the event queue, the default <code>\"defer\"</code> policy is applied.</li>\n</ul>\n<p>Note that while the <code>\"defer\"</code> policy is conservative in the sense that it does not discard events, it could potentially cause an unbounded growth of the event queue.</p>\n</div>\n<div class=\"lf-cpp lf-ts lf-rs\">\n<blockquote>\n<p>The <code>&#x3C;policy></code> argument is currently not supported.</p>\n</blockquote>\n</div>\n<h2 id=\"testing-an-action-for-presence\" style=\"position:relative;\"><a href=\"#testing-an-action-for-presence\" aria-label=\"testing an action for presence permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing an Action for Presence</h2>\n<p>When a reaction is triggered by more than one action or by an action and an input, it may be necessary to test within the reaction whether the action is present.\n<span class=\"lf-c\">Just like for inputs, this can be done in the C target with <code>a->is_present</code>, where <code>a</code> is the name of the action.</span>\n<span class=\"lf-py\">Just like for inputs, this can be done in the Python target with <code>a.is_present</code>, where <code>a</code> is the name of the action.</span>\n<span class=\"lf-cpp\">Just like for inputs, this can be done in the C++ target with <code>a.is_present()</code>, where <code>a</code> is the name of the action.</span>\n<span class=\"lf-ts\">Just like for inputs, this can be done in the TypeScript target with <code>a != undefined</code>, where <code>a</code> is the name of the action.</span>\n<span class=\"lf-rs\">Just like for inputs, this can be done in the Rust target with <code>ctx.is_present(a)</code>, where <code>a</code> is the name of the action.</span></p>","headings":[{"value":"Action Declaration","depth":2},{"value":"Logical Actions","depth":2},{"value":"Physical Actions","depth":2},{"value":"Triggering Time for Actions","depth":2},{"value":"Testing an Action for Presence","depth":2}],"frontmatter":{"permalink":"/docs/handbook/actions","title":"Actions","oneline":"Actions in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Extending Reactors","oneline":"Extending reactors in Lingua Franca.","permalink":"/docs/handbook/extending-reactors"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Superdense Time","oneline":"Superdense time in Lingua Franca.","permalink":"/docs/handbook/superdense-time"}}}},"pageContext":{"id":"1-actions","slug":"/docs/handbook/actions","repoPath":"/packages/documentation/copy/en/topics/Actions.md","previousID":"d4ade317-2d91-582b-8cca-37743461f687","nextID":"1986cb1b-8feb-57bc-8088-50548df2f061","lang":"en","modifiedTime":"2023-09-03T08:07:27.334Z"}},"staticQueryHashes":[]}