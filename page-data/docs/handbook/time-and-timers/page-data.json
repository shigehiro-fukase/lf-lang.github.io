{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/time-and-timers","result":{"data":{"markdownRemark":{"id":"051bc602-4435-5af0-930a-f471f905219e","excerpt":"$page-showing-target$ Logical Time A key property of Lingua Franca is logical time. All events occur at an instant in logical time. By default, the runtime…","html":"<p>$page-showing-target$</p>\n<h2 id=\"logical-time\" style=\"position:relative;\"><a href=\"#logical-time\" aria-label=\"logical time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logical Time</h2>\n<p>A key property of Lingua Franca is <strong>logical time</strong>. All events occur at an instant in logical time. By default, the runtime system does its best to align logical time with <strong>physical time</strong>, which is some measurement of time on the execution platform. The <strong>lag</strong> is defined to be physical time minus logical time, and the goal of the runtime system is maintain a small non-negative lag.</p>\n<p>The <strong>lag</strong> is allowed to go negative only if the <a href=\"/docs/handbook/target-declaration#fast\"><code>fast</code> target property</a> or the <a href=\"/docs/handbook/target-declaration#command-line-arguments\">—fast</a> is set to <code>true</code>. In that case, the program will execute as fast as possible with no regard to physical time.</p>\n<div class=\"lf-c lf-cpp lf-rs\">\n<p>In Lingua Franca, $time$ is a data type.\nA parameter, state variable, port, or action may have type $time$.\n<span class=\"lf-c\">In the C target, time values internally have type <code>instant_t</code> or <code>interval_t</code>,\nboth of which are (usually) equivalent to the C type <code>long long</code>.</span>\n<span class=\"lf-cpp\">In the C++ target, time values internally have the type <code>std::chrono::nanoseconds</code>. For details, see the <a href=\"/docs/handbook/target-language-details\">Target Language Details</a>.</span>\n<span class=\"lf-rs warning\">In the Rust target, time values internally have type FIXME.</span></p>\n</div>\n<h2 id=\"time-values\" style=\"position:relative;\"><a href=\"#time-values\" aria-label=\"time values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Time Values</h2>\n<p>A time value is given with units (unless the value is 0, in which case the units can be omitted).\nThe allowable units are:</p>\n<ul>\n<li>For nanoseconds: <code>ns</code>, <code>nsec</code>, or <code>nsecs</code></li>\n<li>For microseconds: <code>us</code>, <code>usec</code>, or <code>usecs</code></li>\n<li>For milliseconds: <code>ms</code>, <code>msec</code>, or <code>msecs</code></li>\n<li>For seconds: <code>s</code>, <code>sec</code>, <code>secs</code>, <code>second</code>, or <code>seconds</code></li>\n<li>For minutes: <code>min</code>, <code>minute</code>, <code>mins</code>, or <code>minutes</code></li>\n<li>For hours: <code>h</code>, <code>hour</code>, or <code>hours</code></li>\n<li>For days: <code>d</code>, <code>day</code>, or <code>days</code></li>\n<li>For weeks: <code>week</code> or <code>weeks</code></li>\n</ul>\n<p>The following example illustrates using time values for parameters and state variables:</p>\n<p>$start(SlowingClock)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">SlowingClock</span><span class=\"source-lf\">(start:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">), incr:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> interval:</span><span class=\"source-lf entity-name-function-call-cpp\">time</span><span class=\"source-lf punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf\">start</span><span class=\"source-lf punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_schedule</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">a</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">start</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">instant_t</span><span class=\"source-lf meta-embedded-block-c\"> elapsed_logical_time </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_time_logical_elapsed</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Logical time since start: </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp invalid-illegal-unknown-escape\">\\%</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">lld nsec.</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span>\n<span class=\"source-lf meta-embedded-block-c\">            elapsed_logical_time</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">interval</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-compound-cpp\">+=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">incr</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_schedule</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">a</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">interval</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">SlowingClock</span><span class=\"source-lf\">(start:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">), incr:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> interval:</span><span class=\"source-lf entity-name-function-call-cpp\">time</span><span class=\"source-lf punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf\">start</span><span class=\"source-lf punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">schedule</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp\">start</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed_logical_time </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">get_elapsed_logical_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Logical time since start: </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed_logical_time </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\"> nsec</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        interval </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-compound-cpp\">+=</span><span class=\"source-lf meta-embedded-block-cpp\"> incr</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">schedule</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp\">interval</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">SlowingClock</span><span class=\"source-lf\">(start(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">), incr(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> interval(start);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">schedule</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">start</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">elapsed_logical_time</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">lf</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">logical_elapsed</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">Logical time since start: </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">elapsed_logical_time</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\"> nsec.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">interval</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">+=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">incr</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">schedule</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">interval</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">SlowingClock</span><span class=\"source-lf\">(start:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">), incr:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> interval:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(start)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-ts\">actions</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-property-ts\">a</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts entity-name-function-ts\">schedule</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">start</span><span class=\"source-lf meta-embedded-block-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-language-null-ts\">null</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-begin-ts\">`</span><span class=\"source-lf meta-embedded-block-ts string-template-ts\">Logical time since start: </span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-begin-ts\">${</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts entity-name-function-ts\">getElapsedLogicalTime</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-end-ts\">}</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-end-ts\">`</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">interval</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-ts\">interval</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-dom-ts\">add</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">incr</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-ts\">actions</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-property-ts\">a</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts entity-name-function-ts\">schedule</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">interval</span><span class=\"source-lf meta-embedded-block-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-language-null-ts\">null</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">SlowingClock</span><span class=\"source-lf\">(start:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">), incr:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> start(start);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> incr(incr);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> interval:</span><span class=\"source-lf entity-name-type-lflang\">time</span><span class=\"source-lf\">(start);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> expected_time:</span><span class=\"source-lf entity-name-type-lflang\">time</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">        ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">schedule</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">a, </span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">After</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.start));</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs support-function-std-rust\">println!</span><span class=\"source-lf meta-embedded-block-rs\">(</span>\n<span class=\"source-lf meta-embedded-block-rs\">            </span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">Logical time since start: {} nsec.</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs\">,</span>\n<span class=\"source-lf meta-embedded-block-rs\">            ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">get_elapsed_logical_time</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">).</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">as_nanos</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">),</span>\n<span class=\"source-lf meta-embedded-block-rs\">        );</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.interval </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-assignment-rust\">+=</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.incr;</span>\n<span class=\"source-lf meta-embedded-block-rs\">        ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">schedule</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">a, </span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">After</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.interval));</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.expected_time </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-assignment-rust\">+=</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.interval;</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>$end(SlowingClock)$</p>\n<p>This has two time parameters, <code>start</code> and <code>incr</code>, each with default value <code>100 msec</code> <span class=\"lf-c lf-cpp lf-rs\">and type $time$</span>. This parameter is used to initialize the <code>interval</code> state variable, which also stores a time. The $logical$ $action$ <code>a</code>, explained <a href=\"/docs/handbook/actions#logical-actions\">below</a>, is used to schedule events to occur at time <code>start</code> after program startup and then at intervals that are increased each time by <code>incr</code>. The result of executing this program will look like this:</p>\n<pre class=\"source-lf language-text\">Logical time since start: 100000000 nsec.\nLogical time since start: 300000000 nsec.\nLogical time since start: 600000000 nsec.\nLogical time since start: 1000000000 nsec.\n...</pre>\n<h2 id=\"timers\" style=\"position:relative;\"><a href=\"#timers\" aria-label=\"timers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Timers</h2>\n<p>The simplest use of logical time in Lingua Franca is to invoke a reaction periodically. This is done by first declaring a $timer$ using this syntax:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> &lt;name&gt;(&lt;offset&gt;, &lt;period&gt;);</span>\n</pre>\n<p>The <code>&#x3C;period></code>, which is optional, specifies the time interval between timer events. The <code>&#x3C;offset></code>, which is also optional, specifies the (logical) time interval between when the program starts executing and the first timer event. If no period is given, then the timer event occurs only once. If neither an offset nor a period is specified, then one timer event occurs at program start, simultaneous with the $startup$ event.</p>\n<p>The period and offset are given by a number and a units, for example, <code>10 msec</code>. See the <a href=\"/docs/handbook/expressions#basic-expressions\">expressions documentation</a> for allowable units. Consider the following example:</p>\n<p>$start(Timer)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Timer</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Logical time is </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%lld</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_time_logical</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Timer</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, 1s);</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Logical time is: </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">get_logical_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Timer</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">Logical time is </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">lf</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">logical</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Timer</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-begin-ts\">`</span><span class=\"source-lf meta-embedded-block-ts string-template-ts\">Logical time is </span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-begin-ts\">${</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts entity-name-function-ts\">getCurrentLogicalTime</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-end-ts\">}</span><span class=\"source-lf meta-embedded-block-ts string-template-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-end-ts\">`</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Timer</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs support-function-std-rust\">println!</span><span class=\"source-lf meta-embedded-block-rs\">(</span>\n<span class=\"source-lf meta-embedded-block-rs\">            </span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">Logical time is {}.</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs\">,</span>\n<span class=\"source-lf meta-embedded-block-rs\">            ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">get_elapsed_logical_time</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">).</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">as_nanos</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">),</span>\n<span class=\"source-lf meta-embedded-block-rs\">        );</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>$end(Timer)$</p>\n<p>This specifies a timer named <code>t</code> that will first trigger at the start of execution and then repeatedly trigger at intervals of one second. Notice that the time units can be left off if the value is zero.</p>\n<p>This target provides a built-in function for retrieving the logical time at which the reaction is invoked,\n<span class=\"lf-c\"><code>get_logical_time()</code></span>\n<span class=\"lf-cpp warning\">FIXME</span>\n<span class=\"lf-py warning\">lf.time.logical()</span>\n<span class=\"lf-ts\">util.getCurrentLogicalTime()</span>\n<span class=\"lf-rs warning\">FIXME</span>.\nOn most platforms (with the exception of some embedded platforms), the returned value is a 64-bit number representing the number of nanoseconds that have elapsed since January 1, 1970. Executing the above displays something like the following:</p>\n<pre class=\"source-lf language-text\">Logical time is 1648402121312985000.\nLogical time is 1648402122312985000.\nLogical time is 1648402123312985000.\n...</pre>\n<p>The output lines appear at one second intervals unless the <code>fast</code> option has been specified.</p>\n<h2 id=\"elapsed-time\" style=\"position:relative;\"><a href=\"#elapsed-time\" aria-label=\"elapsed time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elapsed Time</h2>\n<p>The times above are a bit hard to read, so, for convenience, each target provides a built-in function to retrieve the <em>elapsed</em> time. For example:</p>\n<p>$start(TimeElapsed)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TimeElapsed</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span>\n<span class=\"source-lf meta-embedded-block-c\">            </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Elapsed logical time is </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%lld</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span>\n<span class=\"source-lf meta-embedded-block-c\">            </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_time_logical_elapsed</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TimeElapsed</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, 1s);</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Elapsed logical time is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">get_elapsed_logical_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TimeElapsed</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">Elapsed logical time is </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">lf</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">logical_elapsed</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TimeElapsed</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-begin-ts\">`</span><span class=\"source-lf meta-embedded-block-ts string-template-ts\">Elapsed logical time is </span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-begin-ts\">${</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts entity-name-function-ts\">getElapsedLogicalTime</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-end-ts\">}</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-end-ts\">`</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TimeElapsed</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs support-function-std-rust\">println!</span><span class=\"source-lf meta-embedded-block-rs\">(</span>\n<span class=\"source-lf meta-embedded-block-rs\">            </span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">Elapsed logical time is {}.</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs\">,</span>\n<span class=\"source-lf meta-embedded-block-rs\">            ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">get_elapsed_logical_time</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">).</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">as_nanos</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">),</span>\n<span class=\"source-lf meta-embedded-block-rs\">        );</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>$end(TimeElapsed)$</p>\n<p>See the <a href=\"/docs/handbook/target-language-details\">Target Language Details</a> for the full set of functions provided for accessing time values.</p>\n<p>Executing this program will produce something like this:</p>\n<pre class=\"source-lf language-text\">Elapsed logical time is 0.\nElapsed logical time is 1000000000.\nElapsed logical time is 2000000000.\n...</pre>\n<h2 id=\"comparing-logical-and-physical-times\" style=\"position:relative;\"><a href=\"#comparing-logical-and-physical-times\" aria-label=\"comparing logical and physical times permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comparing Logical and Physical Times</h2>\n<p>The following program compares logical and physical times:</p>\n<p>$start(TimeLag)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TimeLag</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">interval_t</span><span class=\"source-lf meta-embedded-block-c\"> t </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_time_logical_elapsed</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">interval_t</span><span class=\"source-lf meta-embedded-block-c\"> T </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_time_physical_elapsed</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span>\n<span class=\"source-lf meta-embedded-block-c\">            </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Elapsed logical time: </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%lld</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">, physical time: </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%lld</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">, lag: </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%lld</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span>\n<span class=\"source-lf meta-embedded-block-c\">            t</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> T</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> T</span><span class=\"source-lf meta-embedded-block-c keyword-operator-cpp\">-</span><span class=\"source-lf meta-embedded-block-c\">t</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TimeLag</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, 1s);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> logical_time </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">get_elapsed_logical_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> physical_time </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">get_elapsed_physical_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Elapsed logical time: </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> logical_time</span>\n<span class=\"source-lf meta-embedded-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\"> physical time: </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> physical_time</span>\n<span class=\"source-lf meta-embedded-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\"> lag: </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> physical_time </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-cpp\">-</span><span class=\"source-lf meta-embedded-block-cpp\"> logical_time </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TimeLag</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">t</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">lf</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">logical_elapsed</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">T</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">lf</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">physical_elapsed</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">Elapsed logical time: </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">t</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">, physical time: </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">T</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">, lag: </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">T</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python keyword-operator-arithmetic-python\">-</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">t</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TimeLag</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">const</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-constant-ts\">t</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts entity-name-function-ts\">getElapsedLogicalTime</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">const</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-constant-ts\">T</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts entity-name-function-ts\">getElapsedPhysicalTime</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-begin-ts\">`</span><span class=\"source-lf meta-embedded-block-ts string-template-ts\">Elapsed logical time: </span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-begin-ts\">${</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts variable-other-readwrite-ts\">t</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-end-ts\">}</span><span class=\"source-lf meta-embedded-block-ts string-template-ts\">, physical time: </span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-begin-ts\">${</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts variable-other-constant-ts\">T</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-end-ts\">}</span><span class=\"source-lf meta-embedded-block-ts string-template-ts\">, lag: </span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-begin-ts\">${</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts variable-other-constant-object-ts\">T</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-function-call-ts entity-name-function-ts\">subtract</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts variable-other-readwrite-ts\">t</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-end-ts\">}</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-end-ts\">`</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TimeLag</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs keyword-other-rust\">let</span><span class=\"source-lf meta-embedded-block-rs\"> t </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-assignment-rust\">=</span><span class=\"source-lf meta-embedded-block-rs\"> ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">get_elapsed_logical_time</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">);</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs keyword-other-rust\">let</span><span class=\"source-lf meta-embedded-block-rs\"> T </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-assignment-rust\">=</span><span class=\"source-lf meta-embedded-block-rs\"> ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">get_elapsed_physical_time</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">);</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs support-function-std-rust\">println!</span><span class=\"source-lf meta-embedded-block-rs\">(</span>\n<span class=\"source-lf meta-embedded-block-rs\">            </span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">Elapsed logical time: {}, physical time: {}, lag: {}</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs\">,</span>\n<span class=\"source-lf meta-embedded-block-rs\">            t.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">as_nanos</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">),</span>\n<span class=\"source-lf meta-embedded-block-rs\">            T.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">as_nanos</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">),</span>\n<span class=\"source-lf meta-embedded-block-rs\">            (T</span><span class=\"source-lf meta-embedded-block-rs keyword-operator-arithmetic-rust\">-</span><span class=\"source-lf meta-embedded-block-rs\">t).</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">as_nanos</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">),</span>\n<span class=\"source-lf meta-embedded-block-rs\">        );</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>$end(TimeLag)$</p>\n<p>Execution will show something like this:</p>\n<pre class=\"source-lf language-text\">Elapsed logical time: 0, physical time: 855000, lag: 855000\nElapsed logical time: 1000000000, physical time: 1004714000, lag: 4714000\nElapsed logical time: 2000000000, physical time: 2004663000, lag: 4663000\nElapsed logical time: 3000000000, physical time: 3000210000, lag: 210000\n...</pre>\n<p>In this case, the lag varies from a few hundred microseconds to a small number of milliseconds. The amount of lag will depend on the execution platform.</p>\n<h2 id=\"simultaneity-and-instantaneity\" style=\"position:relative;\"><a href=\"#simultaneity-and-instantaneity\" aria-label=\"simultaneity and instantaneity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simultaneity and Instantaneity</h2>\n<p>If two timers have the same <em>offset</em> and <em>period</em>, then their events are logically simultaneous. No observer will be able to see that one timer has triggered and the other has not.</p>\n<p>A reaction is always invoked at a well-defined logical time, and logical time does not advance during its execution. Any output produced by the reaction will be <strong>logically simultaneous</strong> with the input. In other words, reactions are <strong>logically instantaneous</strong> (for an exception, see <a href=\"/docs/handbook/logical-execution-time\">Logical Execution Time</a>). Physical time, however, does elapse during execution of a reaction.</p>\n<h2 id=\"timeout\" style=\"position:relative;\"><a href=\"#timeout\" aria-label=\"timeout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Timeout</h2>\n<p>By default, a Lingua Franca program will terminate when there are no more events to process. If there is a timer with a non-zero period, then there will always be more events to process, so the default execution will be unbounded. To specify a finite execution horizon, you can either specify a <a href=\"/docs/handbook/target-declaration#timeout\"><code>timeout</code> target property</a> or a <a href=\"docs/handbook/target-declaration#command-line-arguments\"><code>--timeout</code> command-line option</a>. For example, the following <code>timeout</code> property will cause the above timer with a period of one second to terminate after 11 events:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">10</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-lflang\">sec</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">10</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-lflang\">sec</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">10</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-lflang\">sec</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">10</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-lflang\">sec</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">10</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-lflang\">sec</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n</pre>\n<h2 id=\"startup-and-shutdown\" style=\"position:relative;\"><a href=\"#startup-and-shutdown\" aria-label=\"startup and shutdown permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Startup and Shutdown</h2>\n<p>To cause a reaction to be invoked at the start of execution, a special <strong>startup</strong> trigger is provided:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Foo</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) {</span><span class=\"source-lf keyword-operator-lflang\">=</span>\n<span class=\"source-lf\">        </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\"> perform initialization </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\">}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The <strong>startup</strong> trigger is equivalent to a timer with no <em>offset</em> or <em>period</em>.</p>\n<p>To cause a reaction to be invoked at the end of execution, a special <strong>shutdown</strong> trigger is provided. Consider the following reactor, commonly used to build regression tests:</p>\n<p>$start(TestCount)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TestCount</span><span class=\"source-lf\">(start:int(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">), stride:int(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">), num_inputs:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> count:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf\">start);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> inputs_received:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> x:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Received </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">x</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">x</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-comparison-cpp\">!=</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">count</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp\">ERROR: Expected </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-property-cpp\">count</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">exit</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">count</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-compound-cpp\">+=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">stride</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">inputs_received</span><span class=\"source-lf meta-embedded-block-c keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">shutdown</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Shutdown invoked.</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">inputs_received</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-comparison-cpp\">!=</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">num_inputs</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp\">ERROR: Expected to receive </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp\"> inputs, but got </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">                </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-property-cpp\">num_inputs</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">                </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-property-cpp\">inputs_received</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">exit</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp constant-numeric-decimal-cpp\">2</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TestCount</span><span class=\"source-lf\">(start:int(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">), stride:int(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">), num_inputs:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> count:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf\">start);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> inputs_received:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> x:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> value </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">x</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">get</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Received </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\">  value </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\">value </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp keyword-operator-comparison-cpp\">!=</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> count</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">cerr </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp\">ERROR: Expected: </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> count </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp entity-name-function-call-cpp\">exit</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        count </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-compound-cpp\">+=</span><span class=\"source-lf meta-embedded-block-cpp\"> stride</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        inputs_received</span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">shutdown</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Shutdown invoked.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\">inputs_received </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp keyword-operator-comparison-cpp\">!=</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> num_inputs</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">cerr </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp\">ERROR: Expected to receive </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> num_inputs</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">                </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp\"> inputs, but got </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> inputs_received </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp entity-name-function-call-cpp\">exit</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp constant-numeric-decimal-cpp\">2</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TestCount</span><span class=\"source-lf\">(start(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">), stride(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">), num_inputs(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> count(start);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> inputs_received(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> x;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">Received </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python\">x</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py keyword-control-flow-python\">if</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">x</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-comparison-python\">!=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">count</span><span class=\"source-lf meta-embedded-block-py punctuation-separator-colon-python\">:</span>\n<span class=\"source-lf meta-embedded-block-py\">            </span><span class=\"source-lf meta-embedded-block-py\">sys</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">stderr</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">write</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">ERROR: Expected </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">count</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-escape-python\">\\n</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">exit</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">1</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">count</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">+=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">stride</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">inputs_received</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">+=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">1</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">shutdown</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Shutdown invoked.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py keyword-control-flow-python\">if</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">inputs_received</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-comparison-python\">!=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">num_inputs</span><span class=\"source-lf meta-embedded-block-py punctuation-separator-colon-python\">:</span>\n<span class=\"source-lf meta-embedded-block-py\">            </span><span class=\"source-lf meta-embedded-block-py\">sys</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">stderr</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">write</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span>\n<span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">                </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">ERROR: Expected to receive </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">num_inputs</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\"> inputs, but got </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">inputs_received</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-escape-python\">\\n</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">exit</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">2</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TestCount</span><span class=\"source-lf\">(start:number(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">), stride:number(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">), numInputs:number(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> count:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">(start)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> inputsReceived:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> x:</span><span class=\"source-lf storage-type-lflang\">number</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-begin-ts\">`</span><span class=\"source-lf meta-embedded-block-ts string-template-ts\">Received </span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-begin-ts\">${</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts variable-other-readwrite-ts\">x</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-end-ts\">}</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-end-ts\">`</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts keyword-control-conditional-ts\">if</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">x</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-comparison-ts\">!=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">count</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts support-function-console-ts\">error</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts punctuation-definition-string-template-begin-ts\">`</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts\">ERROR: Expected </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-begin-ts\">${</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts variable-other-readwrite-ts\">count</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-end-ts\">}</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts punctuation-definition-string-template-end-ts\">`</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts support-variable-object-process-ts\">process</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts support-function-process-ts\">exit</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts constant-numeric-decimal-ts\">1</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">count</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-compound-ts\">+=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">stride</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">inputsReceived</span><span class=\"source-lf meta-embedded-block-ts keyword-operator-increment-ts\">++</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">shutdown</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Shutdown invoked.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts keyword-control-conditional-ts\">if</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">inputsReceived</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-comparison-ts\">!=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">numInputs</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts support-function-console-ts\">error</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts punctuation-definition-string-template-begin-ts\">`</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts\">ERROR: Expected to receive </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-begin-ts\">${</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts variable-other-readwrite-ts\">numInputs</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-end-ts\">}</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts\">, but got </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-begin-ts\">${</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts variable-other-readwrite-ts\">inputsReceived</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-end-ts\">}</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-template-ts punctuation-definition-string-template-end-ts\">`</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts support-variable-object-process-ts\">process</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts support-function-process-ts\">exit</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts constant-numeric-decimal-ts\">2</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TestCount</span><span class=\"source-lf\">(start:u32(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">), stride:u32(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">), num_inputs:</span><span class=\"source-lf entity-name-type-lflang\">u32</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> stride(stride);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> num_inputs(num_inputs);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> count:</span><span class=\"source-lf entity-name-type-lflang\">u32</span><span class=\"source-lf\">(start);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> inputs_received:</span><span class=\"source-lf entity-name-type-lflang\">u32</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> x:</span><span class=\"source-lf entity-name-type-lflang\">u32</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs keyword-other-rust\">let</span><span class=\"source-lf meta-embedded-block-rs\"> x </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-assignment-rust\">=</span><span class=\"source-lf meta-embedded-block-rs\"> ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">get</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">x).</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">unwrap</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">);</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs support-function-std-rust\">println!</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">Received {}.</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs\">, x);</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs keyword-control-rust\">if</span><span class=\"source-lf meta-embedded-block-rs\"> x </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-comparison-rust\">!=</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.count {</span>\n<span class=\"source-lf meta-embedded-block-rs\">            </span><span class=\"source-lf meta-embedded-block-rs support-function-std-rust\">println!</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">ERROR: Expected {}.</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs\">, </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.count);</span>\n<span class=\"source-lf meta-embedded-block-rs\">            std</span><span class=\"source-lf meta-embedded-block-rs keyword-operator-misc-rust\">::</span><span class=\"source-lf meta-embedded-block-rs\">process</span><span class=\"source-lf meta-embedded-block-rs keyword-operator-misc-rust\">::</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">exit</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs constant-numeric-integer-decimal-rust\">1</span><span class=\"source-lf meta-embedded-block-rs\">);</span>\n<span class=\"source-lf meta-embedded-block-rs\">        }</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.count </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-assignment-rust\">+=</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.stride;</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.inputs_received </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-assignment-rust\">+=</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs constant-numeric-integer-decimal-rust\">1</span><span class=\"source-lf meta-embedded-block-rs\">;</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">shutdown</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs support-function-std-rust\">println!</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">Shutdown invoked.</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs\">);</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs keyword-control-rust\">if</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.inputs_received </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-comparison-rust\">!=</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.num_inputs {</span>\n<span class=\"source-lf meta-embedded-block-rs\">            </span><span class=\"source-lf meta-embedded-block-rs support-function-std-rust\">println!</span><span class=\"source-lf meta-embedded-block-rs\">(</span>\n<span class=\"source-lf meta-embedded-block-rs\">                </span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">ERROR: Expected to receive {} inputs, but got {}.</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs\">,</span>\n<span class=\"source-lf meta-embedded-block-rs\">                </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.num_inputs,</span>\n<span class=\"source-lf meta-embedded-block-rs\">                </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.inputs_received</span>\n<span class=\"source-lf meta-embedded-block-rs\">            );</span>\n<span class=\"source-lf meta-embedded-block-rs\">            std</span><span class=\"source-lf meta-embedded-block-rs keyword-operator-misc-rust\">::</span><span class=\"source-lf meta-embedded-block-rs\">process</span><span class=\"source-lf meta-embedded-block-rs keyword-operator-misc-rust\">::</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">exit</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs constant-numeric-integer-decimal-rust\">2</span><span class=\"source-lf meta-embedded-block-rs\">);</span>\n<span class=\"source-lf meta-embedded-block-rs\">        }</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>$end(TestCount)$</p>\n<p>This reactor tests its inputs against expected values, which are expected to start with the value given by the <code>start</code> parameter and increase by <code>stride</code> with each successive input. It expects to receive a total of <code>num_inputs</code> input events. It checks the total number of inputs received in its $shutdown$ reaction.</p>\n<p>The <strong>shutdown</strong> trigger typically occurs at <a href=\"/docs/handbook/actions#superdense-time\">microstep</a> 0, but may occur at a larger microstep. See <a href=\"/docs/handbook/actions#superdense-time\">Superdense Time</a> and <a href=\"/docs/handbook/termination\">Termination</a>.</p>","headings":[{"value":"Logical Time","depth":2},{"value":"Time Values","depth":2},{"value":"Timers","depth":2},{"value":"Elapsed Time","depth":2},{"value":"Comparing Logical and Physical Times","depth":2},{"value":"Simultaneity and Instantaneity","depth":2},{"value":"Timeout","depth":2},{"value":"Startup and Shutdown","depth":2}],"frontmatter":{"permalink":"/docs/handbook/time-and-timers","title":"Time and Timers","oneline":"Time and timers in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Parameters and State Variables","oneline":"Parameters and state variables in Lingua Franca.","permalink":"/docs/handbook/parameters-and-state-variables"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Composing Reactors","oneline":"Composing reactors in Lingua Franca.","permalink":"/docs/handbook/composing-reactors"}}}},"pageContext":{"id":"1-time-and-timers","slug":"/docs/handbook/time-and-timers","repoPath":"/packages/documentation/copy/en/topics/Time and Timers.md","previousID":"20781702-b6a5-5a16-b4d8-b4c45cd76fa3","nextID":"834f9d0d-f7c6-5732-8c60-bad1954701f7","lang":"en","modifiedTime":"2023-08-10T11:48:33.014Z"}},"staticQueryHashes":[]}