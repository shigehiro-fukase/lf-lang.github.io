{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/reactions-and-methods","result":{"data":{"markdownRemark":{"id":"9af82fa2-19aa-5fe3-a499-7b652c62b9d3","excerpt":"Reaction Order A reactor may have multiple reactions, and more than one reaction may be enabled at any given tag. In Lingua Franca semantics, if two or moreâ€¦","html":"<h2 id=\"reaction-order\" style=\"position:relative;\"><a href=\"#reaction-order\" aria-label=\"reaction order permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reaction Order</h2>\n<p>A reactor may have multiple reactions, and more than one reaction may be enabled at any given tag. In Lingua Franca semantics, if two or more reactions of the same reactor are <strong>simultaneously enabled</strong>, then they will be invoked sequentially in the order in which they are declared. More strongly, the reactions of a reactor are <strong>mutually exclusive</strong> and are invoked in tag order primarily and declaration order secondarily. Consider the following example:</p>\n<p>$start(Alignment)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">3</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-lflang\">secs</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Alignment</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> s:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t1(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t2(</span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t4(</span><span class=\"source-lf constant-numeric-int-lflang\">400</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">400</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t1) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">s</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-compound-cpp\">+=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t2) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">s</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-compound-cpp\">-=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">2</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t4) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">s = </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">s</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: 3s</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Alignment</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> s:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t1(100ms, 100ms);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t2(200ms, 200ms);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t4(400ms, 400ms);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t1) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        s </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-compound-cpp\">+=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t2) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        s </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-compound-cpp\">-=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">2</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t4) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">s = </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">to_string</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp\">s</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">3</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-lflang\">secs</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Alignment</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> s(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t1(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t2(</span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t4(</span><span class=\"source-lf constant-numeric-int-lflang\">400</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">400</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t1) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">s</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">+=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">1</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t2) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">s</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">-=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">2</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t4) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">s = </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-attribute-python\">s</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: 3s</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Alignment</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> s:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t1(100ms, 100ms)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t2(200ms, 200ms)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t4(400ms, 400ms)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t1) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">s</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-compound-ts\">+=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">1</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t2) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">s</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-compound-ts\">-=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">2</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t4) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-begin-ts\">`</span><span class=\"source-lf meta-embedded-block-ts string-template-ts\">s = </span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-begin-ts\">${</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts meta-embedded-line-ts variable-other-readwrite-ts\">s</span><span class=\"source-lf meta-embedded-block-ts string-template-ts meta-template-expression-ts punctuation-definition-template-expression-end-ts\">}</span><span class=\"source-lf meta-embedded-block-ts string-template-ts punctuation-definition-string-template-end-ts\">`</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">3</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-lflang\">secs</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Alignment</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> s:</span><span class=\"source-lf entity-name-type-lflang\">u32</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t1(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t2(</span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t4(</span><span class=\"source-lf constant-numeric-int-lflang\">400</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">400</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t1) </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.s </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-assignment-rust\">+=</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs constant-numeric-integer-decimal-rust\">1</span><span class=\"source-lf meta-embedded-block-rs\">;</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t2) </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.s </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-assignment-rust\">-=</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs constant-numeric-integer-decimal-rust\">2</span><span class=\"source-lf meta-embedded-block-rs\">;</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t4) </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs support-function-std-rust\">println!</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">s = {}</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs\">, </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.s);</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>$end(Alignment)$</p>\n<p>Every 100 ms, this increments the state variable <code>s</code> by 1, every 200 ms, it decrements <code>s</code> by 2, and every 400 ms, it prints the value of <code>s</code>. When these reactions align, they are invoked in declaration order, and, as a result, the printed value of <code>s</code> is always 0.</p>\n<h2 id=\"overwriting-outputs\" style=\"position:relative;\"><a href=\"#overwriting-outputs\" aria-label=\"overwriting outputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overwriting Outputs</h2>\n<p>Just as the reactions of the <code>Alignment</code> reactor overwrite the state variable <code>s</code>, logically simultaneous reactions can overwrite outputs. Consider the following example:</p>\n<p>$start(Overwriting)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Overwriting</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> y:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> s:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t1(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t2(</span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t1) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">s</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-compound-cpp\">+=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">y</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">s</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t2) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">s</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-compound-cpp\">-=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">2</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">y</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">s</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Overwriting</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> y:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> s:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t1(100ms, 100ms);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t2(200ms, 200ms);</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t1) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        s </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-compound-cpp\">+=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">y</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">set</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp\">s</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t2) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        s </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-compound-cpp\">-=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">2</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">y</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">set</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp\">s</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Overwriting</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> y;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> s(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t1(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t2(</span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t1) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">s</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">+=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">1</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">y</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">set</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">s</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t2) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">s</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">-=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">2</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">y</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">set</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">s</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Overwriting</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> y:</span><span class=\"source-lf storage-type-lflang\">number</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> s:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t1(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t2(</span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t1) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">s</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-compound-ts\">+=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">1</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">y</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">s</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t2) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">s</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-compound-ts\">-=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">2</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">y</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">s</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Overwriting</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> y:</span><span class=\"source-lf entity-name-type-lflang\">u32</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> s:</span><span class=\"source-lf entity-name-type-lflang\">u32</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t1(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t2(</span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t1) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.s </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-assignment-rust\">+=</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs constant-numeric-integer-decimal-rust\">1</span><span class=\"source-lf meta-embedded-block-rs\">;</span>\n<span class=\"source-lf meta-embedded-block-rs\">        ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">set</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">y, </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.s);</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t2) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.s </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-assignment-rust\">-=</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs constant-numeric-integer-decimal-rust\">2</span><span class=\"source-lf meta-embedded-block-rs\">;</span>\n<span class=\"source-lf meta-embedded-block-rs\">        ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">set</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">y, </span><span class=\"source-lf meta-embedded-block-rs variable-language-rust\">self</span><span class=\"source-lf meta-embedded-block-rs\">.s);</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>$end(Overwriting)$</p>\n<p>Here, the reaction to <code>t1</code> will set the output to 1 or 2, but every time it sets it to 2, the second reaction (to <code>t2</code>) will overwrite the output with the value 0. As a consequence, the outputs will be 1, 0, 1, 0, â€¦ deterministically.</p>\n<h2 id=\"reacting-to-outputs-of-contained-reactors\" style=\"position:relative;\"><a href=\"#reacting-to-outputs-of-contained-reactors\" aria-label=\"reacting to outputs of contained reactors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reacting to Outputs of Contained Reactors</h2>\n<p>A reaction may be triggered by the an input to the reactor, but also by an output of a contained reactor, as illustrated in the following example:</p>\n<p>$start(Contained)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf keyword-control-import-lflang\">import</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Overwriting</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-import-lflang\">from</span><span class=\"source-lf\"> </span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Overwriting.lf</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Overwriting</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">y</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">s</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-property-cpp\">y</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-comparison-cpp\">!=</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-logical-cpp\">&amp;&amp;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">s</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-property-cpp\">y</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-comparison-cpp\">!=</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">lf_print_error_and_exit</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp\">Outputs should only be 0 or 1!</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf keyword-control-import-lflang\">import</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Overwriting</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-import-lflang\">from</span><span class=\"source-lf\"> </span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Overwriting.lf</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Overwriting</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">y</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> is_correct </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp punctuation-definition-capture-begin-lambda-cpp\">[</span><span class=\"source-lf meta-embedded-block-cpp punctuation-definition-capture-end-lambda-cpp\">]</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-parameters-lambda-cpp punctuation-definition-parameters-begin-lambda-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-parameters-lambda-cpp meta-parameter-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-parameters-lambda-cpp meta-parameter-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-parameters-lambda-cpp meta-parameter-cpp variable-parameter-cpp\">value</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-parameters-lambda-cpp punctuation-definition-parameters-end-lambda-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp punctuation-section-block-begin-bracket-curly-lambda-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp\">            </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp keyword-control-return-cpp\">return</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp\"> value </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp keyword-operator-comparison-cpp\">==</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp keyword-operator-logical-cpp\">||</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp\"> value </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp keyword-operator-comparison-cpp\">==</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-function-definition-body-lambda-cpp punctuation-section-block-end-bracket-curly-lambda-cpp\">}</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\"></span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp variable-other-object-access-cpp\">s</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp variable-other-object-property-cpp\">y</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp entity-name-function-member-cpp\">is_present</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp keyword-operator-logical-cpp\">&amp;&amp;</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp keyword-operator-logical-cpp\">!</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp entity-name-function-call-cpp\">is_correct</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp variable-other-object-access-cpp\">s</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp variable-other-object-property-cpp\">y</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp entity-name-function-member-cpp\">get</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp\">Output shoudl only be 0 or 1!</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf keyword-control-import-lflang\">import</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Overwriting</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-import-lflang\">from</span><span class=\"source-lf\"> </span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Overwriting.lf</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Overwriting</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">y</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py keyword-control-flow-python\">if</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">s</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">y</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-comparison-python\">!=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">0</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-logical-python\">and</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">s</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">y</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-comparison-python\">!=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">1</span><span class=\"source-lf meta-embedded-block-py punctuation-separator-colon-python\">:</span>\n<span class=\"source-lf meta-embedded-block-py\">            </span><span class=\"source-lf meta-embedded-block-py\">sys</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">stderr</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">write</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">ERROR: Outputs should only be 0 or 1!</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python constant-character-escape-python\">\\n</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">exit</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">1</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span>\n<span class=\"source-lf keyword-control-import-lflang\">import</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Overwriting</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-import-lflang\">from</span><span class=\"source-lf\"> </span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Overwriting.lf</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Overwriting</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">y</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts keyword-control-conditional-ts\">if</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-object-ts\">s</span><span class=\"source-lf meta-embedded-block-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts support-variable-property-dom-ts\">y</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-comparison-ts\">!=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-logical-ts\">&amp;&amp;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-object-ts\">s</span><span class=\"source-lf meta-embedded-block-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts support-variable-property-dom-ts\">y</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-comparison-ts\">!=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">1</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts entity-name-function-ts\">requestErrorStop</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-quoted-double-ts\">Outputs should only be 0 or 1!</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf keyword-control-import-lflang\">import</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Overwriting</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-import-lflang\">from</span><span class=\"source-lf\"> </span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Overwriting.lf</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Overwriting</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">y</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs keyword-other-rust\">let</span><span class=\"source-lf meta-embedded-block-rs\"> value </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-assignment-rust\">=</span><span class=\"source-lf meta-embedded-block-rs\"> ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">get</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">s__y).</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">unwrap</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">);</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs keyword-control-rust\">if</span><span class=\"source-lf meta-embedded-block-rs\"> value </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-comparison-rust\">!=</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs constant-numeric-integer-decimal-rust\">0</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-comparison-rust\">&amp;&amp;</span><span class=\"source-lf meta-embedded-block-rs\"> value </span><span class=\"source-lf meta-embedded-block-rs keyword-operator-comparison-rust\">!=</span><span class=\"source-lf meta-embedded-block-rs\"> </span><span class=\"source-lf meta-embedded-block-rs constant-numeric-integer-decimal-rust\">1</span><span class=\"source-lf meta-embedded-block-rs\"> {</span>\n<span class=\"source-lf meta-embedded-block-rs\">            </span><span class=\"source-lf meta-embedded-block-rs support-function-std-rust\">eprintln!</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">Output schould only be 0 or 1!</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs\">);</span>\n<span class=\"source-lf meta-embedded-block-rs\">            ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">request_stop</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">Asap);</span>\n<span class=\"source-lf meta-embedded-block-rs\">        }</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>$end(Contained)$</p>\n<img alt=\"Lingua Franca diagram\" src=\"/664a20244a195c769a48b828fc063c97/Contained.svg\" width=\"300\">\n<p>This instantiates the above <code>Overwriting</code> reactor and monitors its outputs.</p>\n<h2 id=\"method-declaration\" style=\"position:relative;\"><a href=\"#method-declaration\" aria-label=\"method declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Method Declaration</h2>\n<div class=\"lf-ts lf-rs\">\n<p>The $target-language$ target does not currently support methods.</p>\n</div>\n<div class=\"lf-cpp lf-c lf-py\">\n<p>A method declaration has one of the forms:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">method</span><span class=\"source-lf\"> &lt;name&gt;();</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">method</span><span class=\"source-lf\"> &lt;name&gt;():&lt;type&gt;;</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">method</span><span class=\"source-lf\"> &lt;name&gt;(&lt;argument_name&gt;:&lt;type&gt;, </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">method</span><span class=\"source-lf\"> &lt;name&gt;(&lt;argument_name&gt;:&lt;type&gt;, </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\">):&lt;type&gt;;</span>\n</pre>\n<p>The first form defines a method with no arguments and no return value. The second form defines a method with the return type <code>&#x3C;type></code> but no arguments. The third form defines a method with a comma-separated list of arguments given by their name and type, but without a return value. Finally, the fourth form is similar to the third, but adds a return type.</p>\n<div class=\"lf-cpp\">\n<p>The $method$ keyword can optionally be prefixed with the $const$ qualifier, which indicates that the method is read only.</p>\n</div>\n<p>Methods are particularly useful in reactors that need to perform certain operations on state variables and/or parameters that are shared between reactions or that are too complex to be implemented in a single reaction. Analogous to class methods, methods in LF can access all state variables and parameters, and can be invoked from all reaction bodies or from other methods. Methods may also recursively invoke themselves. Consider the following example:</p>\n<p>$start(Methods)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Methods</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> foo:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">method</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-function-member-lflang\">getFoo</span><span class=\"source-lf\">(): int </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-control-return-cpp\">return</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">foo</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">method</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-function-member-lflang\">add</span><span class=\"source-lf\">(x:int) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">foo</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-compound-cpp\">+=</span><span class=\"source-lf meta-embedded-block-c\"> x</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">)</span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_print</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Foo is initialized to </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">getFoo</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">add</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">40</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_print</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">2 + 40 = </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">getFoo</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Methods</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> foo:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">const</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">method</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-function-member-lflang\">getFoo</span><span class=\"source-lf\">(): int </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp keyword-control-return-cpp\">return</span><span class=\"source-lf meta-embedded-block-cpp\"> foo</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">method</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-function-member-lflang\">add</span><span class=\"source-lf\">(x:int) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        foo </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-compound-cpp\">+=</span><span class=\"source-lf meta-embedded-block-cpp\"> x</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">)</span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Foo is initialized to </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">getFoo</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-single-cpp punctuation-definition-string-begin-cpp\">&#039;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-single-cpp constant-character-escape\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-single-cpp punctuation-definition-string-end-cpp\">&#039;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">add</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">40</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">2 + 40 = </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">getFoo</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-single-cpp punctuation-definition-string-begin-cpp\">&#039;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-single-cpp constant-character-escape\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-single-cpp punctuation-definition-string-end-cpp\">&#039;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Methods</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> foo(</span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">method</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-function-member-lflang\">getFoo</span><span class=\"source-lf\">() </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py keyword-control-flow-python\">return</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">foo</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">method</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-function-member-lflang\">add</span><span class=\"source-lf\">(x) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">foo</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">+=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">x</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">)</span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">Foo is initialized to </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">getFoo</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">add</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">40</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python storage-type-string-python\">f</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-begin-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">2 + 40 = </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">getFoo</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python string-interpolated-python string-quoted-single-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-fstring-python punctuation-definition-string-end-python string-interpolated-python string-quoted-single-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf\">WARNING: No source file found: </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">code</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">ts</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">Methods</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">lf</span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf\">WARNING: No source file found: </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">code</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">rs</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">Methods</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">lf</span>\n</pre>\n<p>$end(Methods)$</p>\n<p>This reactor defines two methods <code>getFoo</code> and <code>add</code>.\n<span class=\"lf-cpp\">\n<code>getFoo</code> is qualified as a const method, which indicates that it has read-only\naccess to the state variables. This is directly translated to a C++ const method\nin the code generation process.\n</span>\nThe <code>getFoo</code> method receives no arguments and returns an integer (<code>int</code>)\nindicating the current value of the <code>foo</code> state variable. The <code>add</code> method\nreturns nothing\n<span class=\"lf-cpp lf-c\">\n(<code>void</code>)\n</span>\nand receives one integer argument, which it uses to increment <code>foo</code>. Both\nmethods are visible in all reactions of the reactor. In this example, the\nreaction to startup calls both methods in order to read and modify its state.</p>\n</div>","headings":[{"value":"Reaction Order","depth":2},{"value":"Overwriting Outputs","depth":2},{"value":"Reacting to Outputs of Contained Reactors","depth":2},{"value":"Method Declaration","depth":2}],"frontmatter":{"permalink":"/docs/handbook/reactions-and-methods","title":"Reactions and Methods","oneline":"Reactions and methods in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Composing Reactors","oneline":"Composing reactors in Lingua Franca.","permalink":"/docs/handbook/composing-reactors"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Causality Loops","oneline":"Causality loops in Lingua Franca.","permalink":"/docs/handbook/causality-loops"}}}},"pageContext":{"id":"1-reactions-and-methods","slug":"/docs/handbook/reactions-and-methods","repoPath":"/packages/documentation/copy/en/topics/Reactions and Methods.md","previousID":"834f9d0d-f7c6-5732-8c60-bad1954701f7","nextID":"de5af6b0-de72-5890-9668-c4f000ffdb2c","lang":"en","modifiedTime":"2023-08-18T19:09:03.795Z"}},"staticQueryHashes":[]}