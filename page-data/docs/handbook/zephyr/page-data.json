{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/zephyr","result":{"data":{"markdownRemark":{"id":"2fa7de19-7487-58e4-a747-3706750aca7c","excerpt":"Overview Lingua Franca’s C-runtime supports the Zephyr RTOS. This enables developing and\nprogramming hundreds\nof resource-constrained microcontrollers. In this…","html":"<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<p>Lingua Franca’s C-runtime supports the Zephyr RTOS. This enables developing and\nprogramming <a href=\"https://docs.zephyrproject.org/latest/boards/index.html\">hundreds</a>\nof resource-constrained microcontrollers. In this guide we will see how LF\nprograms can be built, programmed and debugged both in emulation and on real\nhardware. When developing LF programs for Zephyr we use a <code>west</code>-centric\napproach. Using <code>west</code>, which is the preferred build tool for Zephyr projects,\nrequires structuring the code base and development flow as expected by <code>west</code>. To interact\nwith the Lingua Franca Compiler we provide custom <code>west</code>-extensions which invoke\n<code>lfc</code> before building the Zephyr application. This in contrast to our\nArduino-support, which is <code>lfc</code>-centric.</p>\n<h2 id=\"prerequisites\" style=\"position:relative;\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h2>\n<ul>\n<li>Linux or macOS development system</li>\n<li><code>lfc</code> v0.4.0 or greater</li>\n<li>nrf52 Development Kit (optional)</li>\n</ul>\n<h1 id=\"getting-started\" style=\"position:relative;\"><a href=\"#getting-started\" aria-label=\"getting started permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting started</h1>\n<p>This section consists in part of borrowed sections from the <a href=\"https://docs.zephyrproject.org/latest/develop/getting_started/index.html\">Zephyr Getting\nStarted\nGuide</a>.\nPlease refer to the official Zephyr documentation for more background and\nspecifics regarding the use of <code>west</code>.</p>\n<h2 id=\"pull-the-lf-west-template\" style=\"position:relative;\"><a href=\"#pull-the-lf-west-template\" aria-label=\"pull the lf west template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pull the lf-west-template</h2>\n<pre class=\"source-lf language-text\">git clone https://github.com/lf-lang/lf-west-template lf-west &amp;&amp; cd lf-west</pre>\n<h2 id=\"install-west\" style=\"position:relative;\"><a href=\"#install-west\" aria-label=\"install west permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install <code>west</code></h2>\n<ol>\n<li>Setup and activate a virtual environment</li>\n</ol>\n<pre class=\"source-lf language-text\">python3 -m venv .venv\nsource .venv/bin/activate</pre>\n<ol start=\"2\">\n<li>Install <code>west</code></li>\n</ol>\n<pre class=\"source-lf language-text\">pip3 install west</pre>\n<p>Now <code>west</code> is installed within a virtual environment. <strong>This environment has to\nbe activated every time you want to use west with LF</strong></p>\n<h2 id=\"installing-zephyr-sdk\" style=\"position:relative;\"><a href=\"#installing-zephyr-sdk\" aria-label=\"installing zephyr sdk permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing Zephyr SDK</h2>\n<ol>\n<li>Download and install Zephyr SDK to <code>/opt</code></li>\n</ol>\n<pre class=\"source-lf language-text\">cd ~\nwget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.15.2/zephyr-sdk-0.16.1_linux-x86_64.tar.xz\nwget -O - https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.1/sha256.sum | shasum --check --ignore-missing\n\ntar xvf zephyr-sdk-0.16.1_linux-x86_64.tar.xz --directory /opt/\ncd /opt/zephyr-sdk-0.16.1\n./setup.sh</pre>\n<ol start=\"2\">\n<li>Install udev rules for flashing and debugging boards</li>\n</ol>\n<pre class=\"source-lf language-text\">sudo cp /opt/zephyr-sdk-0.16.1/sysroots/x86_64-pokysdk-linux/usr/share/openocd/contrib/60-openocd.rules /etc/udev/rules.d\nsudo udevadm control --reload</pre>\n<h2 id=\"download-the-zephyr-rtos\" style=\"position:relative;\"><a href=\"#download-the-zephyr-rtos\" aria-label=\"download the zephyr rtos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Download the Zephyr RTOS</h2>\n<ol>\n<li>Remove old Zephyr installations from your system.</li>\n</ol>\n<pre class=\"source-lf language-text\">echo $ZEPHYR_BASE</pre>\n<p>should be empty.</p>\n<pre class=\"source-lf language-text\">ls ~/.cmake/packages</pre>\n<p>should not contain <code>Zephyr</code> or <code>ZephyrUnittest</code>. If they do, delete them. They will be replaced later when we do <code>west zephyr-export</code>.</p>\n<ol start=\"2\">\n<li>Download the Zephyr RTOS to the template repository. This step will take some time</li>\n</ol>\n<pre class=\"source-lf language-text\">west update</pre>\n<ol start=\"3\">\n<li>Export CMake packages for Zephyr</li>\n</ol>\n<pre class=\"source-lf language-text\">west zephyr-export</pre>\n<ol start=\"4\">\n<li>Install Python dependencies</li>\n</ol>\n<pre class=\"source-lf language-text\">pip install -r deps/zephyr/scripts/requirements.txt</pre>\n<h1 id=\"hello-world\" style=\"position:relative;\"><a href=\"#hello-world\" aria-label=\"hello world permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hello World!</h1>\n<p>Now you should have the following installed:</p>\n<ol>\n<li><code>west</code>; Verify with <code>west boards</code></li>\n<li>Zephyr SDK located at <code>/opt/zephyr-sdk-0.16.1</code></li>\n<li>Zephyr RTOS pulled down to <code>/deps/zephyr</code></li>\n</ol>\n<p>You should now be able to build and emulate a simple Hello World! LF program:</p>\n<pre class=\"source-lf language-text\">cd application\nwest lf-build src/HelloWorld.lf -w &quot;-t run&quot;</pre>\n<p><code>HelloWorld.lf</code> sets the target property <code>platform: \"Zephyr\"</code> and <code>threading: false</code>. This tells <code>lfc</code> to create a Zephyr-compatible CMake project. In the example above the custom <code>west</code> command <code>lf-build</code> is used to first invoke <code>lfc</code> and then <code>west build</code> on the resulting generated sources.</p>\n<h1 id=\"nrf52-blinky\" style=\"position:relative;\"><a href=\"#nrf52-blinky\" aria-label=\"nrf52 blinky permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nrf52 blinky</h1>\n<p>In this example we will program a simple Blinky program onto an nrf52dk. This\nrequires an actual nrf52 board and also the <code>nrfjprog</code> utility is installed. See\nthe following installation guide\n<a href=\"https://www.nordicsemi.com/Products/Development-tools/nrf-command-line-tools/download\">here</a>.</p>\n<pre class=\"source-lf language-text\">cd application\nwest lf-build src/NrfBlinky.lf -w &quot;-b nrf52dk_nrf52832 -p always&quot;\nwest flash</pre>\n<p>In this example we use the <code>-w</code> flag to pass additional flags to <code>west build</code>. In particular we inform <code>west</code> that we are targeting a the nrf52 with <code>-b nrf52dk_nrf52832</code>. We also tell west to clean the build directory first with <code>-p always</code>.</p>\n<h1 id=\"kernel-configuration-options\" style=\"position:relative;\"><a href=\"#kernel-configuration-options\" aria-label=\"kernel configuration options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kernel configuration options</h1>\n<p>The Lingua Franca Zephyr platform depends on some specific <a href=\"https://docs.zephyrproject.org/latest/build/kconfig/index.html#\">Zephyr Kernel configurations</a>.\nFor instance, the Counter drivers must be linked with the application to provide\nhi-resolution timing. These required configurations are stored in a file called\n<code>prj_lf.conf</code> which is copied to the generated <code>src-gen</code> folder by <code>lfc</code>. You\ncan also supply your own configuration options in a file called <code>prj.conf</code> which\nhas to be located in the same folder as <code>west lf-build</code> is invoked from.\nThere is such a file located in <code>~/application</code> in the template. There is also a\nfile called <code>debug.conf</code> which is meant for containing debug options. Such\nadditional configuration files can also be passed to <code>west lf-build</code> through the\n<code>--conf-overlays</code> options. E.g. <code>west lf-build -c debug.conf</code>.</p>\n<h1 id=\"the-lf-build-west-command\" style=\"position:relative;\"><a href=\"#the-lf-build-west-command\" aria-label=\"the lf build west command permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>lf-build</code> west command</h1>\n<p>The custom <code>lf-build</code> west command has already been used in previous sections.\nIt can be inspected in <code>scripts/lf_build.py</code>.\nIt invokes <code>lfc</code> on the provided LF source file.\nIt then invokes <code>west build</code> on the generated sources.\nIf you would like to pass forward arguments to the <code>west build</code> command do so\nwith the <code>-w</code> flag. E.g. <code>-w -b nrf52dk_nrf52832 -p always</code> passes information\nabout the dev-kit and also tells <code>west</code> to clean the build folder before\nstarting.\nOne of the important functions of <code>lf-build</code> is to parse a file called\n<code>CompileDefinitions.txt</code> generated by <code>lfc</code>. This file contains all the compiler\ndefinitions which should be defined for the program. <code>lf-build</code> passes all the\ncompiler definitions to the <code>west build</code> command.</p>\n<p>Please see <code>west lf-build -h</code> for more information and the <code>scripts/lf_build.py</code>.</p>\n<h1 id=\"debugging-lf-zephyr-programs-using-qemu-and-gdb\" style=\"position:relative;\"><a href=\"#debugging-lf-zephyr-programs-using-qemu-and-gdb\" aria-label=\"debugging lf zephyr programs using qemu and gdb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debugging LF Zephyr programs using QEMU and GDB</h1>\n<p>In this section we will see how a LF program can be debugged while running in QEMU emulation.</p>\n<ol>\n<li>Compile <code>HelloWorld.lf</code> for <code>qemu_cortex_m3</code></li>\n</ol>\n<pre class=\"source-lf language-text\">cd application\nwest lf-build src/HelloWorld.lf -w &quot;-b qemu_cortex_m3 -p always&quot;</pre>\n<p>Note that we here, unlike the very first example, explicitly tell <code>lf-build</code> that we are targeting a <code>qemu_cortex_m3</code> platform. This is the default platform which is used unless another is specified. It is added here for clarity.</p>\n<ol start=\"2\">\n<li>Start qemu as a debug server waiting for a local connection from <code>gdb</code></li>\n</ol>\n<pre class=\"source-lf language-text\">ninja -C build debugserver</pre>\n<ol start=\"3\">\n<li>Start <code>gdb</code> and connect to the qemu server. Load the application image and run until main.</li>\n</ol>\n<pre class=\"source-lf language-text\">$ZEPHYR_SDK/arm-zephyr-eabi/bin/arm-zephyr-eabi-gdb\n(gdb) arm-zephyr-eabi/bin/arm-zephyr-eabi-gdb\n(gdb) target remote localhost:1234\n(gdb) b main\n(gdb) c</pre>\n<p>From here you can step through the LF program. To get a more visual interface you can try:</p>\n<pre class=\"source-lf language-text\">(gdb) tui enable</pre>\n<h2 id=\"timing-in-qemu-emulations\" style=\"position:relative;\"><a href=\"#timing-in-qemu-emulations\" aria-label=\"timing in qemu emulations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Timing in QEMU emulations</h2>\n<p>The QEMU emulation is not cycle-accurate and implements optimizations such that if the system goes to sleep, like when the last active thread in the program calls <code>k_sleep()</code>, then the emulator fast-forwards time.\nThis does not affect the QEMU-emulation of the <em>unthreaded</em> runtime since it implements sleeping between events using <em>busy-waits</em>.\nHowever, the <em>threaded</em> runtime sleeps between events using a call to <code>k_cond_timedwait</code> which has the side-effect that QEMU fast-forwards time.\nThis causes the emulation of threaded programs to appear as if the <code>fast</code> target property was set to <code>true</code>.</p>\n<h2 id=\"troubleshooting\" style=\"position:relative;\"><a href=\"#troubleshooting\" aria-label=\"troubleshooting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Troubleshooting</h2>\n<h3 id=\"multiple-zephyr-installations\" style=\"position:relative;\"><a href=\"#multiple-zephyr-installations\" aria-label=\"multiple zephyr installations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multiple Zephyr installations</h3>\n<p>If the follwing warning is shown when invoking <code>west lf-build</code> or any other <code>west</code> command:</p>\n<pre class=\"source-lf language-text\">WARNING: ZEPHYR_BASE=/path/to/zephyr in the calling environment will be used,\nbut the zephyr.base config option in /path/to/lf-west-template is &quot;deps/zephyr&quot;\nwhich implies a different ZEPHYR_BASE=/path/to/lf-west-template/deps/zephyr\nTo disable this warning in the future, execute &#039;west config --global zephyr.base-prefer env&#039;</pre>\n<p>Then it means that you have multiple Zephyr repositories installed.\nWe do not recommend this as <code>west</code> will link the application with the Zephyr found in the CMake package registry.\nPlease refer to the Getting Started section to purge the system of old Zephyr installations.</p>","headings":[{"value":"Overview","depth":1},{"value":"Prerequisites","depth":2},{"value":"Getting started","depth":1},{"value":"Pull the lf-west-template","depth":2},{"value":"Install west","depth":2},{"value":"Installing Zephyr SDK","depth":2},{"value":"Download the Zephyr RTOS","depth":2},{"value":"Hello World!","depth":1},{"value":"Nrf52 blinky","depth":1},{"value":"Kernel configuration options","depth":1},{"value":"The lf-build west command","depth":1},{"value":"Debugging LF Zephyr programs using QEMU and GDB","depth":1},{"value":"Timing in QEMU emulations","depth":2},{"value":"Troubleshooting","depth":2},{"value":"Multiple Zephyr installations","depth":3}],"frontmatter":{"permalink":"/docs/handbook/zephyr","title":"Zephyr","oneline":"Developing LF Programs for Zephyr RTOS.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Arduino","oneline":"Developing LF Programs on Arduino.","permalink":"/docs/handbook/arduino"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Contributing","oneline":"Contribute to Lingua Franca.","permalink":"/docs/handbook/contributing"}}}},"pageContext":{"id":"4-zephyr","slug":"/docs/handbook/zephyr","repoPath":"/packages/documentation/copy/en/embedded/Zephyr.md","previousID":"13afd544-f12d-5a5a-baa3-4f2614d757c6","lang":"en","modifiedTime":"2023-07-05T20:04:12.740Z"}},"staticQueryHashes":[]}