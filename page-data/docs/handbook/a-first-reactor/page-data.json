{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/a-first-reactor","result":{"data":{"markdownRemark":{"id":"49ea27af-cb5f-5558-96bd-ecfcb618bbd1","excerpt":"$page-showing-target$\nSee the requirements for using this target. Minimal Example A minimal but complete Lingua Franca file with one reactor is this: $start…","html":"<p>$page-showing-target$\nSee the <a href=\"/docs/handbook/target-language-details#requirements\">requirements</a> for using this target.</p>\n<h2 id=\"minimal-example\" style=\"position:relative;\"><a href=\"#minimal-example\" aria-label=\"minimal example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Minimal Example</h2>\n<p>A minimal but complete Lingua Franca file with one reactor is this:</p>\n<p>$start(HelloWorld)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Hello World.</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Hello World.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Hello World.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Hello World.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">        </span><span class=\"source-lf meta-embedded-block-rs support-function-std-rust\">println!</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">Hello World.</span><span class=\"source-lf meta-embedded-block-rs string-quoted-double-rust\">&quot;</span><span class=\"source-lf meta-embedded-block-rs\">);</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>$end(HelloWorld)$</p>\n<p>Every Lingua Franca program begins with a <a href=\"/docs/handbook/target-declaration\">target declaration</a> that specifies the language in which reactions are written. This is also the language of the program(s) generated by the Lingua Franca code generator.</p>\n<p>Every LF program also has a $main$ [ or $federated$]{federated} reactor, which is the top level of a hierarchy of contained and interconnected reactors. The above simple example has no contained reactors.</p>\n<p>The $main$ reactor above has a single $reaction$, which is triggered by the $startup$ trigger. This trigger causes the reaction to execute at the start of the program. The body of the reaction, delimited by <code>{= ... =}</code>, is ordinary $target-language$ code which, as we will see, has access to a number of functions and variables specific to Lingua Franca.</p>\n<h2 id=\"examples\" style=\"position:relative;\"><a href=\"#examples\" aria-label=\"examples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h2>\n<p>Examples of Lingua Franca programs can be found in <a href=\"https://github.com/lf-lang/examples-lingua-franca/tree/main/\">the examples-lingua-franca repository</a>.</p>\n<p>The <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/test/\">regression tests</a> have a rich set of examples that illustrate every feature of the language.</p>\n<h2 id=\"structure-of-an-lf-project\" style=\"position:relative;\"><a href=\"#structure-of-an-lf-project\" aria-label=\"structure of an lf project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Structure of an LF Project</h2>\n<p>The Lingua Franca tools assume that LF programs are put into a file with a <code>.lf</code> extension that is stored somewhere within a directory called <code>src</code>. To compile and run the above example, choose a <strong>project root</strong> directory, create a <code>src</code> directory within that, and put the above code into a file called, say, <code>src/HelloWorld.lf</code>. You can compile the code on the <a href=\"/docs/handbook/command-line-tools\">command line</a>, within <a href=\"/docs/handbook/code-extension\">Visual Studio Code</a>, or within the <a href=\"/docs/handbook/epoch-ide\">Epoch IDE</a>. On the command line this will look like this:</p>\n<pre class=\"source-lf language-text\">    &gt; lfc src/HelloWorld.lf\n    ... output from the code generator and compiler ...</pre>\n<div class=\"lf-c lf-cpp lf-rs\">\n<p>After this completes, two additional directories will have been created within\nthe project root, <code>bin</code> and <code>src-gen</code>. The <code>bin</code> directory has an\nexecutable file called <code>HelloWorld</code>. Executing that file will result, not\nsurprisingly, in printing “Hello World”. The generated source files will be\nin a subdirectory called <code>HelloWorld</code> within <code>src-gen</code>.</p>\n</div>\n<div class=\"lf-ts lf-py\">\n<p>After this completes, an additional <code>src-gen</code> directory will have been created within the project root. The generated code will be in subdirectory called <code>HelloWorld</code> within <code>src-gen</code>. The output from the code generator will include instructions for executing the generated code:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf comment-line-double-dash-lflang\">#####################################</span>\n<span class=\"source-lf\">To run the generated program, use:</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">    node </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\">path</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">to</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">project</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">gen</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">Minimal</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">dist</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">Minimal</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">js</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf comment-line-double-dash-lflang\">#####################################</span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf comment-line-double-dash-lflang\">#####################################</span>\n<span class=\"source-lf\">To run the generated program, use:</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">    python3 </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\">path</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">to</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">project</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">gen</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">Minimal</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">Minimal</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">py</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf comment-line-double-dash-lflang\">#####################################</span>\n</pre>\n</div>\n<h2 id=\"reactor-block\" style=\"position:relative;\"><a href=\"#reactor-block\" aria-label=\"reactor block permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reactor Block</h2>\n<p>A $reactor$ is a software component that reacts to input events, timer events, and internal events. It has private state variables that are not visible to any other reactor. Its reactions can consist of altering its own state, sending messages to other reactors, or affecting the environment through some kind of actuation or side effect (e.g., printing a message, as in the above <code>HelloWorld</code> example).</p>\n<p>The general structure of a reactor definition is as follows:</p>\n<div class=\"lf-c lf-ts\">\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">[</span><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> or </span><span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\">] </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> &lt;class</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">name&gt; [(&lt;parameters&gt;)] {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> &lt;name&gt;:&lt;type&gt;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> &lt;name&gt;:&lt;type&gt;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> &lt;name&gt;:&lt;type&gt;(&lt;value&gt;)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> &lt;name&gt;([&lt;offset&gt;, [&lt;period&gt;]])</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> &lt;name&gt;[:&lt;type&gt;]</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">physical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> &lt;name&gt;[:&lt;type&gt;]</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(&lt;triggers&gt;) [&lt;uses&gt;] [</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\">&gt; &lt;effects&gt;] {</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\"> body </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\">}</span>\n<span class=\"source-lf\">    &lt;instance</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">name&gt; </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> &lt;class</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">name&gt;([&lt;parameter</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">assignments&gt;])</span>\n<span class=\"source-lf\">    &lt;instance</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">name&gt; [, </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\">] </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\">&gt; &lt;instance</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">name&gt; [, </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\">] [</span><span class=\"source-lf keyword-control-lflang\">after</span><span class=\"source-lf\"> &lt;delay&gt;]</span>\n<span class=\"source-lf\">}</span>\n</pre>\n</div>\n<div class=\"lf-cpp lf-rs\">\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">[</span><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\">] </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> &lt;class</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">name&gt; [(&lt;parameters&gt;)] {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> &lt;name&gt;:&lt;type&gt;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> &lt;name&gt;:&lt;type&gt;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> &lt;name&gt;:&lt;type&gt;(&lt;value&gt;)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> &lt;name&gt;([&lt;offset&gt;, [&lt;period&gt;]])</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> &lt;name&gt;[:&lt;type&gt;]</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">physical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> &lt;name&gt;[:&lt;type&gt;]</span>\n<span class=\"source-lf\">    [</span><span class=\"source-lf storage-modifier-lflang\">const</span><span class=\"source-lf\">] </span><span class=\"source-lf keyword-control-lflang\">method</span><span class=\"source-lf\"> &lt;name&gt;(&lt;parameters&gt;):&lt;type&gt; {</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\"> body </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\">}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(&lt;triggers&gt;) [&lt;uses&gt;] [</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\">&gt; &lt;effects&gt;] {</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\"> body </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\">}</span>\n<span class=\"source-lf\">    &lt;instance</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">name&gt; </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> &lt;class</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">name&gt;([&lt;parameter</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">assignments&gt;])</span>\n<span class=\"source-lf\">    &lt;instance</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">name&gt; [, </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\">] </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\">&gt; &lt;instance</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">name&gt; [, </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\">] [</span><span class=\"source-lf keyword-control-lflang\">after</span><span class=\"source-lf\"> &lt;delay&gt;]</span>\n<span class=\"source-lf\">}</span>\n</pre>\n</div>\n<div class=\"lf-py\">\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">[</span><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> or </span><span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\">] </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> &lt;class</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">name&gt; [(&lt;parameters&gt;)] {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> &lt;name&gt;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> &lt;name&gt;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> &lt;name&gt;(&lt;value&gt;)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> &lt;name&gt;([&lt;offset&gt;, [&lt;period&gt;]])</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> &lt;name&gt;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">physical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> &lt;name&gt;</span>\n<span class=\"source-lf\">    [</span><span class=\"source-lf storage-modifier-lflang\">const</span><span class=\"source-lf\">] </span><span class=\"source-lf keyword-control-lflang\">method</span><span class=\"source-lf\"> &lt;name&gt;(&lt;parameters&gt;) {</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\"> body </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\">}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(&lt;triggers&gt;) [&lt;uses&gt;] [</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\">&gt; &lt;effects&gt;] {</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\"> body </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\">}</span>\n<span class=\"source-lf\">    &lt;instance</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">name&gt; </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> &lt;class</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">name&gt;([&lt;parameter</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">assignments&gt;])</span>\n<span class=\"source-lf\">    &lt;instance</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">name&gt; [, </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\">] </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\">&gt; &lt;instance</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">name&gt; [, </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\">] [</span><span class=\"source-lf keyword-control-lflang\">after</span><span class=\"source-lf\"> &lt;delay&gt;]</span>\n<span class=\"source-lf\">}</span>\n</pre>\n</div>\n<p>Contents within square brackets are optional, contents within <code>&#x3C;...></code> are user-defined, and each line may appear zero or more times, as explained in the next pages. Parameters, inputs, outputs, timers, actions, and contained reactors all have names, and the names are required to be distinct from one another.</p>\n<p>If the $reactor$ keyword is preceded by $main$[ or $federated$]{federated}, then this reactor will be instantiated and run by the generated code.</p>\n<p>Any number of reactors may be defined in one file, and a $main$[ or $federated$]{federated} reactor need not be given a name, but if it is given a name, then that name must match the file name.</p>\n<p>Reactors may extend other reactors, inheriting their properties, and a file may import reactors from other files. If an imported LF file contains a $main$[ or $federated$]{federated} reactor, that reactor is ignored (it will not be imported). This makes it easy to create a library of reusable reactors that each come with a test case or demonstration in the form of a main reactor.</p>\n<h2 id=\"comments\" style=\"position:relative;\"><a href=\"#comments\" aria-label=\"comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comments</h2>\n<p>Lingua Franca files can have C/C++/Java-style comments and/or Python-style comments. All of the following are valid comments:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf comment-line-double-dash-lflang\">    </span><span class=\"source-lf comment-line-double-dash-lflang\">// Single-line C-style comment.</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf comment-block-lflang\">/*</span>\n<span class=\"source-lf comment-block-lflang\">     * Multi-line C-style comment.</span>\n<span class=\"source-lf comment-block-lflang\">     </span><span class=\"source-lf comment-block-lflang\">*/</span>\n<span class=\"source-lf comment-line-double-dash-lflang\">    </span><span class=\"source-lf comment-line-double-dash-lflang\"># Single-line Python-style comment.</span>\n</pre>","headings":[{"value":"Minimal Example","depth":2},{"value":"Examples","depth":2},{"value":"Structure of an LF Project","depth":2},{"value":"Reactor Block","depth":2},{"value":"Comments","depth":2}],"frontmatter":{"permalink":"/docs/handbook/a-first-reactor","title":"A First Reactor","oneline":"Writing your first Lingua Franca reactor.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Contributing","oneline":"Contribute to Lingua Franca.","permalink":"/docs/handbook/contributing"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Inputs and Outputs","oneline":"Inputs, outputs, and reactions in Lingua Franca.","permalink":"/docs/handbook/inputs-and-outputs"}}}},"pageContext":{"id":"1-a-first-reactor","slug":"/docs/handbook/a-first-reactor","repoPath":"/packages/documentation/copy/en/topics/A First Reactor.md","nextID":"dcdc6b32-76b0-570a-a6f8-23bb570863c7","lang":"en","modifiedTime":"2023-07-06T00:34:55.840Z"}},"staticQueryHashes":[]}