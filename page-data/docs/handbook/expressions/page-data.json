{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/expressions","result":{"data":{"markdownRemark":{"id":"5002de77-4c7a-5740-bedf-9efa09e5ede6","excerpt":"$page-showing-target$ A subset of LF syntax is used to write expressions, which represent values in the target language. Expressions are used to initialize…","html":"<p>$page-showing-target$</p>\n<p>A subset of LF syntax is used to write <em>expressions</em>, which represent values in the target language. Expressions are used to initialize state variable and to give values to parameters. Arbitrary expressions in the target language can always be given within delimiters <code>{= ... =}</code>, but simple forms do not require the delimiters. These simple forms are documented here.</p>\n<h2 id=\"basic-expressions\" style=\"position:relative;\"><a href=\"#basic-expressions\" aria-label=\"basic expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic expressions</h2>\n<p>The most basic expression forms, which are supported by all target languages, are the following:</p>\n<ul>\n<li>\n<p>Literals:</p>\n<ul>\n<li>Numeric literals, e.g. <code>1</code>, <code>-120</code>, <code>1.5</code>, <code>3.14e10</code>. Note that the sign, if any, is part of the literal and must not be separated by whitespace.</li>\n<li>String literals, e.g. <code>\"abcd\"</code>. String literals always use double-quotes, even in languages which support other forms (like Python).</li>\n<li>Character literals. e.g. <code>'a'</code>. Single-quoted literals must be exactly one character long —even in Python.</li>\n<li>Boolean literals: <code>true</code>, <code>false</code>, <code>True</code>, <code>False</code>. The latter two are there for Python.</li>\n</ul>\n</li>\n<li>\n<p>Parameter references, which are simple identifiers (e.g. <code>foo</code>). Any identifier in expression position must refer to a parameter of the enclosing reactor.</p>\n</li>\n<li>\n<p>Time values, e.g. <code>1 msec</code> or <code>10 seconds</code>. The syntax of time values is <code>integer time_unit</code>, where <code>time_unit</code> is one of the following:</p>\n<ul>\n<li><strong>nsec</strong> or <strong>ns</strong>: nanoseconds</li>\n<li><strong>usec</strong> or <strong>us</strong>: microseconds</li>\n<li><strong>msec</strong> or <strong>ms</strong>: milliseconds</li>\n<li><strong>sec</strong>, <strong>second</strong>, or <strong>s</strong>: seconds</li>\n<li><strong>minute</strong> or <strong>min</strong>: 60 seconds</li>\n<li><strong>hour</strong>: 60 minutes</li>\n<li><strong>day</strong>: 24 hours</li>\n<li><strong>week</strong>: 7 days</li>\n</ul>\n<p>Each of these units also support a plural version (e.g., <code>nsecs</code>, <code>minutes</code>, and <code>days</code>), which means the same thing.</p>\n<p>The time value <code>0</code> need not be given a unit, but for all other values, the unit is required.</p>\n<p>Time values are compatible with the <code>time</code> type.</p>\n</li>\n<li>\n<p>Escaped target-language expression, e.g. <code>{= foo() =}</code>. This syntax is used to write any expression which does not fall into one of the other forms described here. The contents are not parsed and are used verbatim in the generated file.</p>\n</li>\n</ul>\n<div class=\"lf-c\">\n<p>For instance, to have a 2-dimensional array as a parameter in C:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Foo</span><span class=\"source-lf\">(param:</span><span class=\"source-lf meta-embedded-block-c\">{=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-c\">[][] </span><span class=\"source-lf meta-embedded-block-c\">=}</span><span class=\"source-lf\">(</span><span class=\"source-lf meta-embedded-block-c\">{=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp constant-numeric-decimal-cpp\">2</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c\">=}</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Both <code>int[][]</code> and <code>{ {1}, {2} }</code> are C fragments here, not LF.</p>\n</div>\n<div class=\"lf-py\">\n<p>For instance, to assign a 2-dimensional list as an initial value to a parameter\nin the Python target:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Foo</span><span class=\"source-lf\">(param(</span><span class=\"source-lf meta-embedded-block-py\">{=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py punctuation-parenthesis-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py punctuation-parenthesis-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">1</span><span class=\"source-lf meta-embedded-block-py punctuation-separator-element-python\">,</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">2</span><span class=\"source-lf meta-embedded-block-py punctuation-separator-element-python\">,</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">3</span><span class=\"source-lf meta-embedded-block-py punctuation-parenthesis-end-python\">)</span><span class=\"source-lf meta-embedded-block-py punctuation-separator-element-python\">,</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py punctuation-parenthesis-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">4</span><span class=\"source-lf meta-embedded-block-py punctuation-separator-element-python\">,</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">5</span><span class=\"source-lf meta-embedded-block-py punctuation-separator-element-python\">,</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">6</span><span class=\"source-lf meta-embedded-block-py punctuation-parenthesis-end-python\">)</span><span class=\"source-lf meta-embedded-block-py punctuation-parenthesis-end-python\">)</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">=}</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span>\n<span class=\"source-lf\">}</span>\n</pre>\n</div>\n<h2 id=\"collections\" style=\"position:relative;\"><a href=\"#collections\" aria-label=\"collections permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collections</h2>\n<p>$page-showing-target$</p>\n<p>To avoid the awkwardness of using the code delimiters <code>{= ... =}</code>, Lingua Franca supports initialization of simple arrays and similar structures. The interpretation is slightly different in each target language.</p>\n<div class=\"lf-c\">\n<p>In C, a parameter or state may be given an array value as in the following example:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Foo</span><span class=\"source-lf\">(param:double[](</span><span class=\"source-lf constant-numeric-float-lflang\">0.0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-float-lflang\">1.0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-float-lflang\">2.0</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will become an array of length three. When instantiating this reactor, the default parameter value can be overridden using a similar syntax:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">f</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Foo</span><span class=\"source-lf\">(param </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> (</span><span class=\"source-lf constant-numeric-float-lflang\">3.3</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-float-lflang\">4.4</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-float-lflang\">5.5</span><span class=\"source-lf\">));</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>See the <a href=\"/docs/handbook/target-language-details\">Target Language Details</a> for details and alternative syntaxes.</p>\n</div>\n<div class=\"lf-cpp\">\n<p>In C++, initial values for a parameter or state can be used to pass arguments to a constructor, as in the following example:</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> x:</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">[]</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">,</span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">);</span>\n</pre>\n<p>Here, the type <code>int[]</code> is translated by the code generator into <code>std::vector</code> and the <code>(1,2)</code> to constructor arguments, as in <code>new std::vector(1,2)</code>. See the <a href=\"/docs/handbook/target-language-details\">Target Language Details</a> for details and alternative syntaxes.</p>\n</div>\n<div class=\"lf-py\">\n<p>In Python, a parameter or state variable may be assigned an array expression as its initial value, as in the following example:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Foo</span><span class=\"source-lf\">(param(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">3</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> x(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">3</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The Python target interprets the <code>(1, 2, 3)</code> expression differently depending on\nwhether the assignee is a parameter or a state variable. For parameters, the\n<code>(1, 2, 3)</code> expression will translate into an immutable Python tuple (i.e.,\n<code>param = (1, 2, 3)</code>). For state variables, the <code>(1, 2, 3)</code> expression will\ntranslate into a mutable Python list (i.e., <code>x = [1, 2, 3])</code>). The reason behind\nthis discrepancy is that parameters are assumed to be immutable after\ninstantiation (in fact, they are also read-only in reaction bodies), but state\nvariables usually need to be updated during execution.</p>\n<!-- In Python, `[1, 2, 3]` defines a list, which is mutable, whereas `(1, 2, 3)` defines a tuple, which is not mutable. To support this distinction, both syntaxes are available in Lingua Franca without code delimiters. For example, -->\n<p>Notice that even though the tuple assigned to the parameter is immutable (you\ncannot assign new values to its elements), the parameter itself can be\noverridden with <em>another</em> immutable tuple when instantiating the reactor:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">f</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Foo</span><span class=\"source-lf\">(param </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> (</span><span class=\"source-lf constant-numeric-int-lflang\">3</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">4</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">5</span><span class=\"source-lf\">))</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>See the <a href=\"/docs/handbook/target-language-details\">Target Language Details</a> for details and alternative syntaxes.</p>\n</div>\n<div class=\"lf-ts\">\n<p>In TypeScript, a parameter or state variable may be assigned an array expression as its initial value, as in the following example:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Foo</span><span class=\"source-lf\">(param:</span><span class=\"source-lf meta-embedded-block-ts\">{=</span><span class=\"source-lf meta-embedded-block-ts support-class-builtin-ts\">Array</span><span class=\"source-lf meta-embedded-block-ts keyword-operator-relational-ts\">&lt;</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">number</span><span class=\"source-lf meta-embedded-block-ts\">&gt;=}</span><span class=\"source-lf\">(</span><span class=\"source-lf meta-embedded-block-ts\">{=</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts meta-brace-square-ts\">[</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">1</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">2</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">3</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts meta-brace-square-ts\">]</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts\">=}</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> x:</span><span class=\"source-lf meta-embedded-block-ts\">{=</span><span class=\"source-lf meta-embedded-block-ts support-class-builtin-ts\">Array</span><span class=\"source-lf meta-embedded-block-ts keyword-operator-relational-ts\">&lt;</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">number</span><span class=\"source-lf meta-embedded-block-ts\">&gt;=}</span><span class=\"source-lf\">(</span><span class=\"source-lf meta-embedded-block-ts\">{=</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts meta-brace-square-ts\">[</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts meta-delimiter-decimal-period-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">1</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts meta-delimiter-decimal-period-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">2</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts meta-delimiter-decimal-period-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">3</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts meta-brace-square-ts\">]</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts\">=}</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>See the <a href=\"/docs/handbook/target-language-details\">TypeScript reactor documentation</a> for details and alternative syntaxes.</p>\n</div>\n<div class=\"lf-rs warning\">\n<p>FIXME: Rust</p>\n</div>","headings":[{"value":"Basic expressions","depth":2},{"value":"Collections","depth":2}],"frontmatter":{"permalink":"/docs/handbook/expressions","title":"Expressions","oneline":"Expressions in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Contributing","oneline":"Contribute to Lingua Franca.","permalink":"/docs/handbook/contributing"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Target Language Details","oneline":"Detailed reference for each target langauge.","permalink":"/docs/handbook/target-language-details"}}}},"pageContext":{"id":"3-expressions","slug":"/docs/handbook/expressions","repoPath":"/packages/documentation/copy/en/reference/Expressions.md","nextID":"15e2a8e5-dd68-55e9-839f-18c6d342e73c","lang":"en","modifiedTime":"2023-08-29T20:53:09.275Z"}},"staticQueryHashes":[]}