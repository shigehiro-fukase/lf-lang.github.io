{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/arduino","result":{"data":{"markdownRemark":{"id":"77295cb2-a818-5f3d-9d3c-9ad07392edf2","excerpt":"Overview To run Lingua Franca on an Arduino-compatible microcontroller, you can use the\nC target with the platform target property set to arduino. The Linguaâ€¦","html":"<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<p>To run Lingua Franca on an Arduino-compatible microcontroller, you can use the\n<code>C</code> target with the <code>platform</code> target property set to <code>arduino</code>. The Lingua\nFranca compiler will then not output ordinary C code in a CMake project, but\ngenerate a <code>.ino</code> sketch that can be compiled and deployed using <code>arduino-cli</code>.\nTo flash the compiled sketch onto a board, you need specify a Fully Qualified\nBoard Name (FQBN) as well as the port to which your board is connected. On this\npage, we explain exactly how to do this.</p>\n<h2 id=\"prerequisites\" style=\"position:relative;\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h2>\n<ul>\n<li>You need a development system that runs on macOS or Linux (there is currently no Windows support).</li>\n<li><a href=\"https://arduino.github.io/arduino-cli/\">Arduino CLI</a> must be installed on your development system. Confirm that your installation works by running:</li>\n</ul>\n<pre class=\"source-lf language-text\">arduino-cli version</pre>\n<h1 id=\"writing-a-simple-arduino-program\" style=\"position:relative;\"><a href=\"#writing-a-simple-arduino-program\" aria-label=\"writing a simple arduino program permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing a simple Arduino Program</h1>\n<p>The most basic Arduino program (Blink) can be defined in LF like so:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">  </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">platform</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">Arduino</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Blink</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t1(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t2(</span><span class=\"source-lf constant-numeric-int-lflang\">500</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">pinMode</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">LED_BUILTIN</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> OUTPUT</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">  </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\"> (t1) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">digitalWrite</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">LED_BUILTIN</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> HIGH</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">  </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">  </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\"> (t2) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">digitalWrite</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">LED_BUILTIN</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> LOW</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">  </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The key difference between writing ordinary Arduino code and writing LF code is\nthat there is no <code>setup()</code> and <code>loop()</code> function. In LF, execution is\nevent-driven, with reactive code being triggered by events, such as the\nexpiration of a timer. Those pieces of reactive code, specified as reactions,\ncan invoke Arduino library functions, just like one would do in the definition\nof an Arduino <code>loop()</code>. For any setup that might be needed at the beginning of\nexecution, a reaction triggered by the built-in <code>startup</code> trigger can be used.</p>\n<h2 id=\"platform-options\" style=\"position:relative;\"><a href=\"#platform-options\" aria-label=\"platform options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Platform Options</h2>\n<p>The <code>platform</code> property can also be used so specify more details. Along with <code>name: \"arduino\"</code>,\nyou can specify which <code>board</code>, <code>port</code>, and <code>baud-rate</code> you are using. If you want the program\nto be flashed onto the board automatically after compilation, specify <code>flash: true</code>.\nHere a target declaration that specifies all of these options:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">  </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">platform</span><span class=\"source-lf meta-targetspec-lflang\">: {</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">name</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">arduino</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang\">,</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">board</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">arduino:avr:uno</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang\">,</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">port</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">/dev/ttyd2</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang\">,</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">baud-rate</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">115200</span><span class=\"source-lf meta-targetspec-lflang\">,</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">flash</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">true</span>\n<span class=\"source-lf meta-targetspec-lflang\">  }</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The <code>board</code> is necessary for <a href=\"#building\">building</a> and the <code>port</code> is necessary for <a href=\"#flashing\">flashing</a>.</p>\n<h3 id=\"baud-rate-of-the-serial-port\" style=\"position:relative;\"><a href=\"#baud-rate-of-the-serial-port\" aria-label=\"baud rate of the serial port permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Baud rate of the serial port</h3>\n<p>All Arduino boards have at least one serial port (also known as a UART or\nUSART), and some have several. By default, Lingua Franca will assume a default\nbaud rate of 9600. This parameter is tunable by adjusting the <code>baud-rate</code>\nparameter in platform options.</p>\n<h1 id=\"building\" style=\"position:relative;\"><a href=\"#building\" aria-label=\"building permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building</h1>\n<p>In order to have <code>arduino-cli</code> compile the generated sketch file, a <code>board</code> must\nbe specified. If no <code>board</code> is set, <code>lfc</code> will run in <code>no-compile</code> mode, meaning\nit will not invoke the target compiler. Whether specified as a target property\nor given directly to <code>arduino-cli</code>, you need an FQBN. You can find the FQBN of\nthe board that you have plugged in using the following command:</p>\n<p><code>arduino-cli board list</code></p>\n<p>To see the list of all FQBNâ€™s installed on your device (all FQBNs supported by the libraries you have installed), run the following command:</p>\n<p><code>arduino-cli board listall</code></p>\n<p>You likely need to install support for your board first, which you can do using the following command:</p>\n<p><code>arduino-cli core install arduino:[BOARD_FAMILY]</code></p>\n<p>The common board families include <code>avr</code>, <code>megaAVR</code>, <code>sam</code>, <code>samd</code>, and <code>mbed</code>.</p>\n<p>If you specify your FQBN under <code>board</code> in the <code>platform</code> target property, <code>lfc</code> will automatically invoke <code>arduino-cli</code> on the generated sketch. To invoke <code>arduino-cli</code> manually</p>\n<ul>\n<li>\n<p>for unthreaded programs (most arduino flavors), run:\n<code>arduino-cli compile -b [FQBN] --build-property compiler.c.extra_flags=\"-DLF_UNTHREADED -DPLATFORM_ARDUINO -DINITIAL_EVENT_QUEUE_SIZE=10 -DINITIAL_REACT_QUEUE_SIZE=10\" --build-property compiler.cpp.extra_flags=\"-DLF_UNTHREADED -DPLATFORM_ARDUINO -DINITIAL_EVENT_QUEUE_SIZE=10 -DINITIAL_REACT_QUEUE_SIZE=10\"</code></p>\n</li>\n<li>\n<p>for threaded programs (<code>arduino:mbed</code> boards), run:\n<code>arduino-cli compile -b [FQBN] --build-property compiler.c.extra_flags=\"-DLF_THREADED -DPLATFORM_ARDUINO -DINITIAL_EVENT_QUEUE_SIZE=10 -DINITIAL_REACT_QUEUE_SIZE=10\" --build-property compiler.cpp.extra_flags=\"-DLF_THREADED -DPLATFORM_ARDUINO -DINITIAL_EVENT_QUEUE_SIZE=10 -DINITIAL_REACT_QUEUE_SIZE=10\"</code></p>\n</li>\n</ul>\n<h1 id=\"flashing\" style=\"position:relative;\"><a href=\"#flashing\" aria-label=\"flashing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flashing</h1>\n<p>Arduinoâ€™s can be flashed via USB. To find the port oto which your device is connected, run the following command:</p>\n<p><code>arduino-cli board list</code></p>\n<p>You can either use <code>arduino-cli</code> to flash the code onto your device after the sketch file has been built, or you can set <code>flash:true</code> and provide a <code>port</code> in your Lingua Franca file. To flash manually using <code>arduino-cli</code>, enter the subdirectory of <code>src-gen</code> in which the generated sketch file is located and run:</p>\n<p><code>arduino-cli upload -p PORT -b FQBN .</code></p>","headings":[{"value":"Overview","depth":1},{"value":"Prerequisites","depth":2},{"value":"Writing a simple Arduino Program","depth":1},{"value":"Platform Options","depth":2},{"value":"Baud rate of the serial port","depth":3},{"value":"Building","depth":1},{"value":"Flashing","depth":1}],"frontmatter":{"permalink":"/docs/handbook/arduino","title":"Arduino","oneline":"Developing LF Programs on Arduino.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Contributing","oneline":"Contribute to Lingua Franca.","permalink":"/docs/handbook/contributing"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Zephyr","oneline":"Developing LF Programs for Zephyr RTOS.","permalink":"/docs/handbook/zephyr"}}}},"pageContext":{"id":"4-arduino","slug":"/docs/handbook/arduino","repoPath":"/packages/documentation/copy/en/embedded/Arduino.md","nextID":"3f41a520-2093-55ff-a5e7-36ec8f69920a","lang":"en","modifiedTime":"2023-07-06T23:23:23.267Z"}},"staticQueryHashes":[]}