{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/target-language-details","result":{"data":{"markdownRemark":{"id":"3af06b85-61a2-5d81-a7ad-232624b3eaf6","excerpt":"$page-showing-target$ Overview In the C reactor target for Lingua Franca, reactions are written in C and the code generator generates one or more standalone C…","html":"<p>$page-showing-target$</p>\n<h2 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<div class=\"lf-c\">\n<p>In the C reactor target for Lingua Franca, reactions are written in C and the code generator generates one or more standalone C programs that can be compiled and run on several platforms. It has been tested on macOS, Linux, Windows, and at least one bare-iron embedded platform. The single-threaded version (which you get by setting the <a href=\"/docs/handbook/target-declaration#threading\"><code>threading</code> target parameter</a> to <code>false</code>) is the most portable, requiring only a handful of common C libraries (see <a href=\"#included-libraries\">Included Libraries</a> below). The multithreaded version requires a small subset of the POSIX thread library (<code>pthreads</code>) and transparently executes in parallel on a multicore machine while preserving the deterministic semantics of Lingua Franca.</p>\n<p>Note that C is not a safe language. There are many ways that a programmer can circumvent the semantics of Lingua Franca and introduce nondeterminism and illegal memory accesses. For example, it is easy for a programmer to mistakenly send a message that is a pointer to data on the stack. The destination reactors will very likely read invalid data. It is also easy to create memory leaks, where memory is allocated and never freed. Here, we provide some guidelines for a style for writing reactors that will be safe.</p>\n<p><strong>NOTE:</strong> If you intend to use C++ code or import C++ libraries in the C target, we provide a special <a href=\"#the-ccpp-target\">CCpp target</a> that automatically uses a C++ compiler by default. Alternatively, you might want to use the Cpp target.</p>\n</div>\n<div class=\"lf-cpp\">\n<p>In the C++ reactor target for Lingua Franca, reactions are written in C++ and the code generator generates a standalone C++ program that can be compiled and run on all major platforms. Our continuous integration ensures compatibility with Windows, macOS, and Linux.\nThe C++ target solely depends on a working C++ build system including a recent C++ compiler (supporting C++17) and <a href=\"https://cmake.org/\">CMake</a> (>= 3.5). It relies on the <a href=\"https://github.com/lf-lang/reactor-cpp\">reactor-cpp</a> runtime, which is automatically fetched and compiled in the background by the Lingua Franca compiler.</p>\n<p>Note that C++ is not a safe language. There are many ways that a programmer can circumvent the semantics of Lingua Franca and introduce nondeterminism and illegal memory accesses. For example, it is easy for a programmer to mistakenly send a message that is a pointer to data on the stack. The destination reactors will very likely read invalid data. It is also easy to create memory leaks, where memory is allocated and never freed. Note, however, that the C++ reactor library is designed to prevent common errors and to encourage a safe modern C++ style. Here, we introduce the specifics of writing Reactor programs in C++ and present some guidelines for a style that will be safe.</p>\n</div>\n<div class=\"lf-py\">\n<p>In the Python reactor target for Lingua Franca, reactions are written in Python. The user-written reactors are then generated into a Python 3 script that can be executed on several platforms. The Python target has been tested on Linux, macOS, and Windows. To facilitate efficient and fast execution of Python code, the generated program relies on a C extension to facilitate Lingua Franca API such as <code>set</code> and <code>schedule</code>. To learn more about the structure of the generated Python program see <a href=\"#python-target-implementation-details\">Implementation Details</a>.</p>\n<p>Python reactors can bring the vast library of scientific modules that exist for Python into a Lingua Franca program. Moreover, since the Python reactor target is based on a fast and efficient C runtime library, Lingua Franca programs can execute much faster than native equivalent Python programs in many cases. Finally, interoperability with C reactors is planned for the future.</p>\n<p>In comparison to the C target, the Python target can be up to an order of magnitude slower. However, depending on the type of application and the implementation optimizations in Python, you can achieve an on-par performance to the C target in many applications.</p>\n<p><strong>NOTE:</strong> A <a href=\"https://docs.python.org/3/extending/extending.html\">Python C\nextension</a> is\ngenerated for each Lingua Franca program (see <a href=\"#python-target-implementation-details\">Implementation\nDetails</a>). This extension module will\nhave the name LinguaFranca[your_LF_program_name].</p>\n</div>\n<div class=\"lf-ts\">\n<p>In the TypeScript reactor target for Lingua Franca, reactions are written in <a href=\"https://www.typescriptlang.org/\">TypeScript</a> and the code generator generates a standalone TypeScript program that can be compiled to JavaScript and run on <a href=\"https://nodejs.org\">Node.js</a>.</p>\n<p>TypeScript reactors bring the strengths of TypeScript and Node.js to Lingua Franca programming. The TypeScript language and its associated tools enable static type checking for both reaction code and Lingua Franca elements like ports and actions. The Node.js JavaScript runtime provides an execution environment for asynchronous network applications. With Node.js comes Node Package Manager (<a href=\"https://www.npmjs.com/\">npm</a>) and its large library of supporting modules.</p>\n<p>In terms of raw performance on CPU intensive operations, TypeScript reactors are about two orders of magnitude slower than C reactors. But excelling at CPU intensive operations isn’t really the point of Node.js (or by extension TypeScript reactors). Node.js is about achieving high throughput on network applications by efficiently handling asynchronous I/O operations. Keep this in mind when choosing the right Lingua Franca target for your application.</p>\n</div>\n<div class=\"lf-rs\">\n<p><strong>Important:</strong> The Rust target is still quite preliminary. This is early WIP documentation to let you try it out if you’re curious</p>\n<p>In the Rust reactor target for Lingua Franca, reactions are written in Rust and the code generator generates a standalone Rust program that can be compiled and run on platforms supported by rustc. The program depends on a runtime library distributed as the crate <a href=\"https://github.com/lf-lang/reactor-rust\">reactor_rt</a>, and depends on the Rust standard library.</p>\n<p>Documentation for the runtime API is available here: <a href=\"https://lf-lang.github.io/reactor-rust/\">https://lf-lang.github.io/reactor-rust/</a></p>\n<p>LF-Rust generates a Cargo project per compiled main reactor. This specification assumes in some places that the user is somewhat familiar with how Cargo works.\nIf you’re not, here’s a primer:</p>\n<ul>\n<li>a Rust project (and its library artifact) are called a <em>crate</em>.</li>\n<li>Cargo is the Rust package manager and build tool. LF/Rust uses Cargo to build the generated project.</li>\n<li>Rust has extensive support for conditional compilation. Cargo <em>features</em> are commonly used to enable or disable the compilation of parts of a crate. A feature may also pull in additional dependencies. Cargo features only influence the compilation process; if you don’t mention the correct feature flags at compilation time, those features cannot be made available at runtime. The Rust reactor runtime crate uses Cargo features to conditionally enable some features, e.g., command-line argument parsing.</li>\n</ul>\n</div>\n<h2 id=\"requirements\" style=\"position:relative;\"><a href=\"#requirements\" aria-label=\"requirements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Requirements</h2>\n<div class=\"lf-c\">\n<p>The following tools are required in order to compile the generated C++ source code:</p>\n<ul>\n<li>A C compiler such as <code>gcc</code></li>\n<li>A recent version of <code>cmake</code> (at least 3.5)</li>\n</ul>\n</div>\n<div class=\"lf-cpp\">\n<p>The following tools are required in order to compile the generated C++ source code:</p>\n<ul>\n<li>A recent C++ compiler supporting C++17</li>\n<li>A recent version of <code>cmake</code> (at least 3.5)</li>\n</ul>\n</div>\n<div class=\"lf-py\">\n<p>To use this target, install Python 3 on your machine. See <a href=\"https://wiki.python.org/moin/BeginnersGuide/Download\">downloading Python</a>.</p>\n<p><strong>NOTE:</strong> The Python target requires a C implementation of Python (nicknamed CPython). This is what you will get if you use the above link, or with most of the alternative Python installations such as Anaconda. See <a href=\"https://www.python.org/download/alternatives/\">this</a> for more details.</p>\n<p>The Python reactor target relies on <code>setuptools</code> to be able to compile a <a href=\"https://docs.python.org/3/extending/extending.html\">Python\nC extension</a> for each LF\nprogram.</p>\n<!-- To install `pip3`, you can follow instructions [here](https://pip.pypa.io/en/stable/installation/). -->\n<p>To install <code>setuptools</code> using <code>pip3</code>, do this:</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">pip3</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">install</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">setuptools</span>\n</pre>\n</div>\n<div class=\"lf-ts\">\n<p>First, make sure Node.js is installed on your machine. You can <a href=\"https://nodejs.org/en/download/\">download Node.js here</a>. The npm package manager comes along with Node.</p>\n<p>After installing Node, you may optionally install the TypeScript compiler.</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">npm</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">install</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">g</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">typescript</span>\n</pre>\n<p>TypeScript reactor projects are created with a local copy of the TypeScript compiler, but having the TypeScript compiler globally installed can be useful for <a href=\"#debugging-type-errors\">debugging type errors</a> and type checking on the command line.</p>\n</div>\n<div class=\"lf-rs\">\n<p>In order to compile the generated Rust source code, you need a recent version of <a href=\"https://doc.rust-lang.org/cargo/\">Cargo</a>, the Rust package manager. See <a href=\"https://doc.rust-lang.org/cargo/getting-started/installation.html\">How to Install Rust and Cargo</a> if you don’t have them on your system.</p>\n<p>You can use a development version of the runtime library by setting the LFC option <code>--external-runtime-path</code> to the root directory of the runtime library crate sources. If this variable is mentioned, LFC will ask Cargo to fetch the runtime library from there.</p>\n</div>\n<h2 id=\"limitations\" style=\"position:relative;\"><a href=\"#limitations\" aria-label=\"limitations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Limitations</h2>\n<div class=\"lf-c\">\n<ul>\n<li>The C target does make any distinction between $private$ and $public$ $preamble$.</li>\n</ul>\n</div>\n<div class=\"lf-cpp\">\n<p>The C++ target does not yet implement:</p>\n<ul>\n<li>$extends$</li>\n<li>$federated$</li>\n</ul>\n</div>\n<div class=\"lf-py\">\n<ul>\n<li>\n<p>The Python target does not yet implement methods.</p>\n</li>\n<li>\n<p>The Lingua Franca lexer does not support single-quoted strings in Python. This limitation also applies to target property values. You must use double quotes.</p>\n</li>\n</ul>\n</div>\n<div class=\"lf-ts\">\n<ul>\n<li>\n<p>The $federated$ implementation in the TypeScript target is still quite preliminary.</p>\n</li>\n<li>\n<p>The TypeScript target does not yet implement methods.</p>\n</li>\n</ul>\n</div>\n<div class=\"lf-rs\">\n<p>The Rust target does not yet implement:</p>\n<ul>\n<li>$federated$</li>\n</ul>\n</div>\n<h2 id=\"the-target-specification\" style=\"position:relative;\"><a href=\"#the-target-specification\" aria-label=\"the target specification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Target Specification</h2>\n<div class=\"lf-c\">\n<p>To have Lingua Franca generate C code, start your <code>.lf</code> file with one of the following target specifications:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">    </span><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\"> &lt;options&gt;</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">CCpp</span><span class=\"source-lf meta-targetspec-lflang\"> &lt;options&gt;</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n</pre>\n<p>Note that for all LF statements, the final semicolon is optional, but if you are writing your code in C, you may want to include the final semicolon for uniformity.</p>\n<p>For options to the target specification, see <a href=\"/docs/handbook/target-declaration\">detailed documentation of the target options</a>.</p>\n<p>The second form, <code>CCpp</code>, is used when you wish to use a C++ compiler to compile\nthe generated code, thereby allowing your C reactors to call C++ code.</p>\n<!-- The C target uses a C compiler by default, and will fail to compile mixed C/C++ language programs. As a remedy, the `CCpp` target uses the C runtime but employs a C++ compiler to compile your program. To use it, simply replace `target C` with `target CCpp`. -->\n<p>Here is a minimal example of a program written in the <code>CCpp</code> target, taken from <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/target/HelloWorldCCPP.lf\">HelloWorldCCPP.lf</a>:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">CCpp</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">HelloWorld</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp keyword-control-directive-include-cpp punctuation-definition-directive-cpp\">#</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp keyword-control-directive-include-cpp\">include</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp punctuation-definition-string-begin-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp\">iostream</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp string-quoted-other-lt-gt-include-cpp punctuation-definition-string-end-cpp\">&gt;</span><span class=\"source-lf meta-embedded-block-cpp meta-preprocessor-include-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp\"> Note that no C++ header will be included by default.</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Hello World.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">a</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">HelloWorld</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p><strong>Note:</strong> Unless some feature in the C target is needed, we recommend using the Cpp target that uses a runtime that is written natively in C++.</p>\n<p><strong>Note:</strong> A <code>.lf</code> file that uses the <code>CCpp</code> target cannot and should not be imported to a <code>.lf</code> file that uses the <code>C</code> target. Although these two targets use essentially the same runtime, such a scenario can cause unintended compile errors.</p>\n</div>\n<div class=\"lf-cpp\">\n<p>To have Lingua Franca generate C++ code, start your <code>.lf</code> file with the following target specification:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">    </span><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n</pre>\n<p>Note that for all LF statements, the final semicolon is optional, but if you are writing your code in C++, you may want to include the final semicolon for uniformity.</p>\n<p>For options to the target specification, see <a href=\"/docs/handbook/target-declaration\">detailed documentation of the target options</a>.</p>\n</div>\n<div class=\"lf-py\">\n<p>To have Lingua Franca generate Python code, start your <code>.lf</code> file with the following target specification:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">    </span><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span>\n</pre>\n<p>Note that for all LF statements, a final semicolon is optional, but if you are writing your code in Python, you may want to omit the final semicolon for uniformity.</p>\n<p>For options to the target specification, see <a href=\"/docs/handbook/target-declaration\">detailed documentation of the target options</a>.</p>\n</div>\n<div class=\"lf-ts\">\n<p>To have Lingua Franca generate TypeScript code, start your <code>.lf</code> file with the following target specification:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">    </span><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n</pre>\n<p>Note that for all LF statements, the final semicolon is optional, but if you are writing your code in TypeScript, you may want to include the final semicolon for uniformity. The supported target parameters and command-line options are documented in the <a href=\"/docs/handbook/target-declaration\">Target Declaration</a> documentation.</p>\n</div>\n<div class=\"lf-rs\">\n<p>To have Lingua Franca generate Rust code, start your <code>.lf</code> file with the following target specification:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">    </span><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n</pre>\n<p>Note that for all LF statements, the final semicolon is optional, but if you are writing your code in Rust, you may want to include the final semicolon for uniformity.</p>\n</div>\n<h2 id=\"parameters-and-state-variables\" style=\"position:relative;\"><a href=\"#parameters-and-state-variables\" aria-label=\"parameters and state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameters and State Variables</h2>\n<div class=\"lf-c\">\n<p>Reactor parameters and state variables are referenced in the C code using the\n<code>self</code> struct. The following\n<a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/Stride.lf\">Stride</a>\nexample modifies the <code>Count</code> reactor in <a href=\"/docs/handbook/parameters-and-state-variables#state-declaration\">State\nDeclaration</a> to\ninclude both a parameter and a state variable:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">(stride:int(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> count:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> y:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">y</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">count</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">count</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-compound-cpp\">+=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">stride</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This defines a <code>stride</code> parameter with type <code>int</code> and initial value <code>1</code> and\na <code>count</code> state variable with the same type and initial value.\nThese are referenced in the reaction with the syntax <code>self->stride</code> and <code>self->count</code> respectively.</p>\n<p><strong>The self Struct:</strong>\nThe code generator synthesizes a struct type in C for each reactor class and a constructor that creates an instance of this struct. By convention, these instances are called <code>self</code> and are visible within each reactor body. The <code>self</code> struct contains the parameters, state variables, and values associated with actions and ports of the reactor. Parameters and state variables are accessed directly on the <code>self</code> struct, whereas ports and actions are directly in scope by name, as we will see below. Let’s begin with parameters.</p>\n<p>It may be tempting to declare state variables in the $preamble$, as follows:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">FlawedCount</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-c\"> count </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> y:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">y</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> count</span><span class=\"source-lf meta-embedded-block-c keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will produce a sequence of integers, but if there is more than one instance of the reactor, those instances will share the same variable count. Hence, <strong>don’t do this</strong>! Sharing variables across instances of reactors violates a basic principle, which is that reactors communicate only by sending messages to one another. Sharing variables will make your program nondeterministic. If you have multiple instances of the above FlawedCount reactor, the outputs produced by each instance will not be predictable, and in a multithreaded implementation, will also not be repeatable.</p>\n<h3 id=\"array-values-for-parameters\" style=\"position:relative;\"><a href=\"#array-values-for-parameters\" aria-label=\"array values for parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array Values for Parameters</h3>\n<p>Parameters and state variables can have array values, though some care is needed. The <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ArrayAsParameter.lf\">ArrayAsParameter</a> example outputs the elements of an array as a sequence of individual messages:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\">(sequence:int[](</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">), n_sequence:int(</span><span class=\"source-lf constant-numeric-int-lflang\">3</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> count:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> next;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">, next) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out, next </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">sequence</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access variable-other-property-cpp\">count</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">count</span><span class=\"source-lf meta-embedded-block-c keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">count</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-comparison-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">n_sequence</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">lf_schedule</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\">next</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This uses a <a href=\"/docs/handbook/actions#logical-actions\">$logical$ $action$</a> to repeat the reaction, sending one element of the array in each invocation.</p>\n<p>In C, arrays do not encode their own length, so a separate parameter <code>n_sequence</code> is used for the array length. Obviously, there is potential here for errors, where the array length doesn’t match the length parameter.</p>\n<p>Above, the parameter default value is an array with three elements, <code>[0, 1, 2]</code>. The syntax for giving this default value is that of a Lingua Franca list, <code>(0, 1, 2)</code>, which gets converted by the code generator into a C static initializer. The default value can be overridden when instantiating the reactor using a similar syntax:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\">(sequence </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> (</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">3</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">4</span><span class=\"source-lf\">), n_sequence</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf constant-numeric-int-lflang\">4</span><span class=\"source-lf\">);</span>\n</pre>\n<h3 id=\"array-values-for-states\" style=\"position:relative;\"><a href=\"#array-values-for-states\" aria-label=\"array values for states permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array Values for States</h3>\n<p>A state variable can also have an array value. For example, the [MovingAverage] (<a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/MovingAverage.lf\">https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/MovingAverage.lf</a>) reactor computes the <strong>moving average</strong> of the last four inputs each time it receives an input:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">MovingAverage</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> delay_line:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">double</span><span class=\"source-lf\">[]</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-float-lflang\">0.0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-float-lflang\">0.0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-float-lflang\">0.0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> index:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> in:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">double</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">double</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(in) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\"> Calculate the output.</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">double</span><span class=\"source-lf meta-embedded-block-c\"> sum </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-control-for-cpp\">for</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> i </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> i </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-comparison-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp constant-numeric-decimal-cpp\">3</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> i</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            sum </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp keyword-operator-assignment-compound-cpp\">+=</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-property-cpp\">delay_line</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-bracket-square-access\">i</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> sum</span><span class=\"source-lf meta-embedded-block-c keyword-operator-cpp\">/</span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">4</span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-point-cpp\">.</span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\"></span>\n<span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\"> Insert the input in the delay line.</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">delay_line</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access variable-other-property-cpp\">index</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\"></span>\n<span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\"> Update the index for the next input.</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">index</span><span class=\"source-lf meta-embedded-block-c keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">index</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-comparison-cpp\">&gt;=</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp constant-numeric-decimal-cpp\">3</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-property-cpp\">index</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The second line declares that the type of the state variable is an array of <code>double</code>s with the initial value of the array being a three-element array filled with zeros.</p>\n<h3 id=\"states-and-parameters-with-struct-values\" style=\"position:relative;\"><a href=\"#states-and-parameters-with-struct-values\" aria-label=\"states and parameters with struct values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>States and Parameters with Struct Values</h3>\n<p>States whose type are structs can similarly be initialized. This <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/StructAsState.lf\">StructAsState</a> example illustrates this:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">StructAsState</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-other-typedef-cpp\">typedef</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-head-struct-cpp storage-type-struct-cpp\">struct</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp entity-name-type-struct-cpp\">hello_t</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-head-struct-cpp punctuation-section-block-begin-bracket-curly-struct-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">char</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp\"> name</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp\"> value</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp punctuation-section-block-end-bracket-curly-struct-cpp\">}</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-tail-struct-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-tail-struct-cpp support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">hello_t</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> s:</span><span class=\"source-lf support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">hello_t</span><span class=\"source-lf\">(</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Earth</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">42</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">State s.name=</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%s</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">, value=</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-object-property-cpp\">s</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">name</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-object-property-cpp\">s</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Notice that state <code>s</code> is given type <code>hello_t</code>, which is defined in the $preamble$. The initial value just lists the initial values of each of the fields of the struct in the order they are declared.</p>\n<p>Parameters are similar:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">StructParameter</span><span class=\"source-lf\">(p:hello_t(</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Earth</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">42</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-other-typedef-cpp\">typedef</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-head-struct-cpp storage-type-struct-cpp\">struct</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp entity-name-type-struct-cpp\">hello_t</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-head-struct-cpp punctuation-section-block-begin-bracket-curly-struct-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">char</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp\"> name</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp\"> value</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp punctuation-section-block-end-bracket-curly-struct-cpp\">}</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-tail-struct-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-tail-struct-cpp support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">hello_t</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Parameter p.name=</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%s</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">, value=</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-object-property-cpp\">p</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">name</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-object-property-cpp\">p</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-property-cpp\">p</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-comparison-cpp\">!=</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp constant-numeric-decimal-cpp\">42</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">fprintf</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\">stderr</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp\">FAILED: Expected 42.</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">exit</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n</div>\n<div class=\"lf-cpp\">\n<p>Reactor parameters internally declared as <code>const</code> by the code generator and initialized during reactor instantiation. Thus, the value of a parameter may not be changed. See <a href=\"/docs/handbook/parameters-and-state-variables\">Parameters and State</a> for examples.</p>\n<h3 id=\"array-valued-parameters\" style=\"position:relative;\"><a href=\"#array-valued-parameters\" aria-label=\"array valued parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array-Valued Parameters</h3>\n<p>Also parameters can have fixed- or variable-sized array values. The <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ArrayAsParameter.lf\">ArrayAsParameter</a> example outputs the elements of an array as a sequence of individual messages:</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\">(sequence:int[]{</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">}) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> count:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> next:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">void</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">, next) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out, next </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">out</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">set</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-bracket-square-access variable-other-object\">sequence</span><span class=\"source-lf meta-embedded-block-cpp meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-cpp meta-bracket-square-access\">count</span><span class=\"source-lf meta-embedded-block-cpp meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        count</span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\">count </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp keyword-operator-comparison-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp variable-other-object-access-cpp\">sequence</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp entity-name-function-member-cpp\">size</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp variable-other-object-access-cpp\">next</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp entity-name-function-member-cpp\">schedule</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Note that curly braces <code>{...}</code> can be used for initialization instead of parentheses to better match C++ syntax.</p>\n<p>Note that also the main reactor can be parameterized:</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Hello</span><span class=\"source-lf\">(msg: </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">std</span><span class=\"source-lf keyword-operator-lflang\">::</span><span class=\"source-lf variable-other-lflang\">string</span><span class=\"source-lf\">(</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">World</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Hello </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> msg </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">!</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This program will print “Hello World!” by default. However, since <code>msg</code> is a main reactor parameter, the C++ code generator will extend the CLI argument parser and allow to overwrite <code>msg</code> when invoking the program. For instance,</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">bin/Hello</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">-msg</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">Earth</span>\n</pre>\n<p>will result in “Hello Earth!” being printed.</p>\n<h3 id=\"state-variables\" style=\"position:relative;\"><a href=\"#state-variables\" aria-label=\"state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Variables</h3>\n<p>A reactor may declare state variables, which become properties of each instance of the reactor. For example, the following reactor (see <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/lib/Count.lf\">Count.lf</a> and <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/CountTest.lf\">CountTest.lf</a>) will produce the output sequence 1, 2, 3, … :</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> i:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> c:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> c </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        i</span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">c</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">set</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp\">i</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The declaration on the second line gives the variable the name <code>count</code>, declares its type to be <code>int</code>, and initializes its value to 0. The type and initial value can be enclosed in the C++-code delimiters <code>{= ... =}</code> if they are not simple identifiers, but in this case, that is not necessary.</p>\n<p>In the body of the reaction, the state variable is automatically in scope and can be referenced directly by its name. Since all reactions, state variables and also parameters of a reactor are members of the same class, reactions can also reference state variables (or parameters) using the this pointer: <code>this->name</code>.</p>\n<p>A state variable may be a time value, declared as follows:</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> time_value:</span><span class=\"source-lf entity-name-function-call-cpp\">time</span><span class=\"source-lf punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf constant-numeric-decimal-cpp\">100</span><span class=\"source-lf\"> msec</span><span class=\"source-lf punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf\">;</span>\n</pre>\n<p>The type of the generated <code>time_value</code> variable will be <code>reactor::Duration</code>, which is an alias for <a href=\"https://en.cppreference.com/w/cpp/chrono/duration\"><code>std::chrono::nanoseconds</code></a>.</p>\n<p>For the C++ target, Lingua Franca provides two alternative styles for initializing state variables. We can write <code>state foo:int(42)</code> or <code>state foo:int{42}</code>. This allows to distinguish between the different initialization styles in C++. <code>foo:int(42)</code> will be translated to <code>int foo(42)</code> and <code> foo:int{42}</code> will be translated to <code>int foo{42}</code> in the generated code. Generally speaking, the <code>{...}</code> style should be preferred in C++, but it is not always applicable. Hence we allow the LF programmer to choose the style. Due to the peculiarities of C++, this is particularly important for more complex data types. For instance, <code>state foo:std::vector&#x3C;int>(4,2)</code> would be initialized to the list <code>[2,2,2,2]</code> whereas <code>state foo:std::vector&#x3C;int>{4,2}</code> would be initialized to the list <code>[4,2]</code>.</p>\n<p>State variables can have array values. For example, the [MovingAverage] (<a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/MovingAverage.lf\">https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/MovingAverage.lf</a>) reactor computes the <strong>moving average</strong> of the last four inputs each time it receives an input:</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">MovingAverageImpl</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> delay_line:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">double</span><span class=\"source-lf meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-bracket-square-access constant-numeric-decimal-cpp\">3</span><span class=\"source-lf meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span><span class=\"source-lf meta-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-block-cpp constant-numeric-decimal-point-cpp\">.</span><span class=\"source-lf meta-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-block-cpp\"> </span><span class=\"source-lf meta-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-block-cpp constant-numeric-decimal-point-cpp\">.</span><span class=\"source-lf meta-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-block-cpp\"> </span><span class=\"source-lf meta-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-block-cpp constant-numeric-decimal-point-cpp\">.</span><span class=\"source-lf meta-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> index:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> in:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">double</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">double</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(in) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp\"> Calculate the output.</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">double</span><span class=\"source-lf meta-embedded-block-cpp\"> sum </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">get</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp keyword-control-for-cpp\">for</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> i </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> i </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp keyword-operator-comparison-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp constant-numeric-decimal-cpp\">3</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> i</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">            sum </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-assignment-compound-cpp\">+=</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-bracket-square-access variable-other-object\">delay_line</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-bracket-square-access\">i</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">out</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">set</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp\">sum</span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-cpp\">/</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">4</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-point-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\"></span>\n<span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp\"> Insert the input in the delay line.</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-bracket-square-access variable-other-object\">delay_line</span><span class=\"source-lf meta-embedded-block-cpp meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-cpp meta-bracket-square-access\">index</span><span class=\"source-lf meta-embedded-block-cpp meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">get</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\"></span>\n<span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-cpp comment-line-double-slash-cpp\"> Update the index for the next input.</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        index</span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\">index </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp keyword-operator-comparison-cpp\">&gt;=</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp constant-numeric-decimal-cpp\">3</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">            index </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The second line declares that the type of the state variable is an fixed-size array of 3 <code>double</code>s with the initial value of the being filled with zeros (note the curly braces). If the size is given in the type specification, then the code generator will declare the type of the state variable using <a href=\"https://en.cppreference.com/w/cpp/container/array\"><code>std::array</code></a>. In the example above, the type of <code>delay_line</code> is <code>std::array&#x3C;3, double></code>. If the size specifier is omitted (e.g. <code>state x:double[]</code>). The code generator will produce a variable-sized array using <a href=\"https://en.cppreference.com/w/cpp/container/vector\"><code>std::vector</code></a>.</p>\n<p>State variables with more complex types such as classes or structs can be similarly initialized. See <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/StructAsState.lf\">StructAsState.lf</a>.</p>\n</div>\n<div class=\"lf-py\">\n<p>Reactor parameters and state variables are referenced in the Python code using\nthe syntax <code>self.&#x3C;name></code>, where <code>&#x3C;name></code> is the name of the parameter or state\nvariable. The following\n<a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/Stride.lf\">Stride</a>\nexample modifies the <code>Count</code> reactor in <a href=\"/docs/handbook/parameters-and-state-variables#state-declaration\">State\nDeclaration</a> to\ninclude both a parameter and a state variable:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">(stride(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> count(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> y;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">y</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">set</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">count</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">count</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">+=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">stride</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This defines a <code>stride</code> parameter with initial value <code>1</code> and a <code>count</code> state\nvariable with the same initial value. These are referenced in the reaction with\nthe syntax <code>self.stride</code> and <code>self.count</code> respectively. Note that state\nvariables and parameters do not have types in the Python reactor target. See <a href=\"/docs/handbook/parameters-and-state-variables\">Parameters\nand State</a> for more examples.</p>\n<p><strong>The Reactor Class:</strong>\nThe code generator synthesizes a class in Python for each reactor class in LF,\nwith a constructor (i.e., <code>def __init__(self, ...):</code>) that creates an instance\nof this class and initializes its parameters and state variables as <a href=\"https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables\">instance\nvariables</a>.\nThese parameters and state variables can then subsequently be accessed directly\nusing the <code>self</code> reference in the body of reactions.</p>\n<p>It may be tempting to declare state variables in the $preamble$, as follows:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">FlawedCount</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">count</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">0</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> y</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">y</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">set</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">count</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">count</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">+=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">1</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will produce a sequence of integers, but if there is more than one instance\nof the reactor, those instances will share the same variable <code>count</code> (because\n<code>count</code> will be a <a href=\"https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables\">class variable</a>). Hence,\n<strong>don’t do this</strong>! Sharing variables across instances of reactors violates a\nbasic principle, which is that reactors communicate only by sending messages to\none another. Sharing variables will make your program nondeterministic. If you\nhave multiple instances of the above <code>FlawedCount</code> reactor, the outputs produced\nby each instance will not be predictable, and in a multithreaded implementation,\nwill also not be repeatable.</p>\n<h3 id=\"array-expressions-for-state-variables-and-parameters\" style=\"position:relative;\"><a href=\"#array-expressions-for-state-variables-and-parameters\" aria-label=\"array expressions for state variables and parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array Expressions for State Variables and Parameters</h3>\n<p>A Lingua Franca array expression (e.g., (0, 1, 2)) can be used for the initial\n(default) value of parameters and state variables. In the following example, the\nparameter <code>sequence</code> and the state variable <code>x</code> have an initial value of <code>(0, 1, 2)</code>:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\">(sequence(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> x(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The Python target interprets the <code>(0, 1, 2)</code> expression differently depending on\nwhether the assignee is a parameter or a state variable. For parameters, the\n<code>(0, 1, 2)</code> expression will translate into an immutable Python tuple (i.e.,\n<code>sequence = (0, 1, 2)</code>). For state variables, the <code>(0, 1, 2)</code> expression will\ntranslate into a mutable Python list (i.e., <code>x = [0, 1, 2])</code>). The reason behind\nthis discrepancy is that parameters are assumed to be immutable after\ninstantiation (in fact, they are also read-only in reaction bodies), but state\nvariables usually need to be updated during execution.</p>\n<p>Notice that even though the tuple assigned to the parameter is immutable (you\ncannot assign new values to its elements), the parameter itself can be\noverridden with <em>another</em> immutable tuple when instantiating the reactor:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\">(sequence </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> (</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">3</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">4</span><span class=\"source-lf\">));</span>\n</pre>\n<p>As with any ordinary Python list or tuple, <code>len()</code> can been used to deduce the\nlength.</p>\n<h3 id=\"assigning-arbitrary-initial-expressions-to-state-variables-and-parameters\" style=\"position:relative;\"><a href=\"#assigning-arbitrary-initial-expressions-to-state-variables-and-parameters\" aria-label=\"assigning arbitrary initial expressions to state variables and parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assigning Arbitrary Initial Expressions to State Variables and Parameters</h3>\n<p>The code delimiters <code>{= ... =}</code> can allow for assignment of arbitrary Python\nexpressions as initial values for state variables and parameters. The following example, taken from\n<a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/StructAsState.lf\">StructAsState.lf</a>\ndemonstrates this usage:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">StructAsState</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py meta-class-python\">        </span><span class=\"source-lf meta-embedded-block-py meta-class-python storage-type-class-python\">class</span><span class=\"source-lf meta-embedded-block-py meta-class-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-class-python entity-name-type-class-python\">hello</span><span class=\"source-lf meta-embedded-block-py meta-class-python punctuation-section-class-begin-python\">:</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-python\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-python storage-type-function-python\">def</span><span class=\"source-lf meta-embedded-block-py meta-function-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-python support-function-magic-python\">__init__</span><span class=\"source-lf meta-embedded-block-py meta-function-python meta-function-parameters-python punctuation-definition-parameters-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-python meta-function-parameters-python variable-parameter-function-language-python variable-parameter-function-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-function-python meta-function-parameters-python punctuation-separator-parameters-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-function-python meta-function-parameters-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-python meta-function-parameters-python variable-parameter-function-language-python\">name</span><span class=\"source-lf meta-embedded-block-py meta-function-python meta-function-parameters-python punctuation-separator-parameters-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-function-python meta-function-parameters-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-python meta-function-parameters-python variable-parameter-function-language-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-function-python meta-function-parameters-python punctuation-definition-parameters-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-python punctuation-section-function-begin-python\">:</span>\n<span class=\"source-lf meta-embedded-block-py\">                </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">name</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">name</span>\n<span class=\"source-lf meta-embedded-block-py\">                </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">value</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> s (</span><span class=\"source-lf meta-embedded-block-py\">{=</span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">hello</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Earth</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">42</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">=}</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">State s.name=&#039;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python storage-type-format-python\">:s</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">&#039;, value=</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python storage-type-format-python\">:d</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">format</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">s</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">name</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">s</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py keyword-control-flow-python\">if</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">s</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-comparison-python\">!=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-numeric-dec-python\">42</span><span class=\"source-lf meta-embedded-block-py punctuation-separator-colon-python\">:</span>\n<span class=\"source-lf meta-embedded-block-py\">            </span><span class=\"source-lf meta-embedded-block-py\">sys</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">stderr</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">write</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">FAILED: Expected 42.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python constant-character-escape-python\">\\n</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">exit</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">1</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Notice that a class <code>hello</code> is defined in the preamble. The state variable <code>s</code> is then initialized to an instance of <code>hello</code> constructed within the <code>{= ... =}</code> delimiters.</p>\n<!-- State variables may be initialized to lists or tuples without requiring `{= ... =}` delimiters. The following illustrates the difference:\n\n```lf-py\ntarget Python;\nmain reactor Foo {\n    state a_tuple(1, 2, 3);\n    state a_list([1, 2, 3]);\n    reaction(startup) {=\n        # will print \"<class 'tuple'> != <class 'list'>\"\n        print(\"{0} != {1}\".format(type(self.a_tuple), type(self.a_list)))\n    =}\n}\n``` -->\n<!--\nIn Python, tuples are immutable, while lists can be modified. Be aware also that the syntax for declaring tuples in the Python target is the same syntax as to declare an array in the C target, so the immutability might be a surprise. -->\n</div>\n<div class=\"lf-ts\">\n<p>In the TypeScript target, all <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html\">TypeScript types</a> are generally acceptable for parameters and state variables. Custom types (and classes) must be defined in the <a href=\"#preamble\">preamble</a> before they may be used.</p>\n<p><strong>To benefit from type checking, you should declare types for your reactor elements.</strong> If a type isn’t declared for a state variable, it is assigned the type <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#new-unknown-top-type\"><code>unknown</code></a>.</p>\n<p>For example, the following reactor will produce the output sequence 0, 1, 2, 3, … :</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> count:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> y:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">count</span><span class=\"source-lf meta-embedded-block-ts keyword-operator-increment-ts\">++</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">y</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">count</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The declaration on the second line gives the variable the name “count”, declares its type to be <code>number</code>, and initializes its value to 0. The type and initial value can be enclosed in the Typescript-code delimiters <code>{= ... =}</code> if they are not simple identifiers, but in this case, that is not necessary.</p>\n<p>In the body of the reaction, the reactor’s state variable is referenced by way of a local variable of the same name. The local variable will contain the current value of the state at the beginning of the reaction. The final value of the local variable will be used to update the state at the end of the reaction.</p>\n<p>It may be tempting to declare state variables in the <strong>preamble</strong>, as follows:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">FlawedCount</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">count</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> y:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">count</span><span class=\"source-lf meta-embedded-block-ts keyword-operator-increment-ts\">++</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">y</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">count</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will produce a sequence of integers, but if there is more than one instance of the reactor, those instances will share the same variable count. Hence, <strong>don’t do this</strong>! Sharing variables across instances of reactors violates a basic principle, which is that reactors communicate only by sending messages to one another. Sharing variables will make your program nondeterministic. If you have multiple instances of the above FlawedCount reactor, the outputs produced by each instance will not be predictable, and in an asynchronous implementation, will also not be repeatable.</p>\n<p>A state variable may be a time value, declared as follows:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> time_value:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n</pre>\n<p>The <code>time_value</code> variable will be of type <code>TimeValue</code>, which is an object used to represent a time in the TypeScript Target. Refer to the section on <a href=\"#timed-behavior\">timed behavior</a> for more information.</p>\n<p>A state variable can have an array or object value. For example, the following reactor computes the <strong>moving average</strong> of the last four inputs each time it receives an input:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">MovingAverage</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> delay_line:</span><span class=\"source-lf meta-embedded-block-ts\">{=</span><span class=\"source-lf meta-embedded-block-ts support-class-builtin-ts\">Array</span><span class=\"source-lf meta-embedded-block-ts keyword-operator-relational-ts\">&lt;</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">number</span><span class=\"source-lf meta-embedded-block-ts\">&gt;=}</span><span class=\"source-lf\">(</span><span class=\"source-lf meta-embedded-block-ts\">{=</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts meta-brace-square-ts\">[</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts meta-delimiter-decimal-period-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts meta-delimiter-decimal-period-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts meta-delimiter-decimal-period-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts meta-brace-square-ts\">]</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts\">=}</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> index:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> x:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">x</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">x</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-control-as-ts\">as</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts support-type-primitive-ts\">number</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts punctuation-whitespace-comment-leading-ts\">        </span><span class=\"source-lf meta-embedded-block-ts comment-line-double-slash-ts punctuation-definition-comment-ts\">//</span><span class=\"source-lf meta-embedded-block-ts comment-line-double-slash-ts\"> Calculate the output.</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">sum</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts variable-other-readwrite-ts\">x</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts keyword-control-loop-ts\">for</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">i</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">i</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-relational-ts\">&lt;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">3</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">i</span><span class=\"source-lf meta-embedded-block-ts keyword-operator-increment-ts\">++</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">sum</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts keyword-operator-assignment-compound-ts\">+=</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">delay_line</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-array-literal-ts meta-brace-square-ts\">[</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-array-literal-ts variable-other-readwrite-ts\">i</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-array-literal-ts meta-brace-square-ts\">]</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">out</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">sum</span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">/</span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">4</span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts meta-delimiter-decimal-period-ts\">.</span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\"></span>\n<span class=\"source-lf meta-embedded-block-ts punctuation-whitespace-comment-leading-ts\">        </span><span class=\"source-lf meta-embedded-block-ts comment-line-double-slash-ts punctuation-definition-comment-ts\">//</span><span class=\"source-lf meta-embedded-block-ts comment-line-double-slash-ts\"> Insert the input in the delay line.</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">delay_line</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts meta-brace-square-ts\">[</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts variable-other-readwrite-ts\">index</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts meta-brace-square-ts\">]</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">x</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\"></span>\n<span class=\"source-lf meta-embedded-block-ts punctuation-whitespace-comment-leading-ts\">        </span><span class=\"source-lf meta-embedded-block-ts comment-line-double-slash-ts punctuation-definition-comment-ts\">//</span><span class=\"source-lf meta-embedded-block-ts comment-line-double-slash-ts\"> Update the index for the next input.</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">index</span><span class=\"source-lf meta-embedded-block-ts keyword-operator-increment-ts\">++</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts keyword-control-conditional-ts\">if</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">index</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-relational-ts\">&gt;=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">3</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">index</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The second line declares that the type of the state variable is an array of <code>number</code>s with the initial value of the array being a three-element array filled with zeros.</p>\n<p>States whose type are objects can similarly be initialized. Declarations can take an object literal as the initial value:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> myLiteral:</span><span class=\"source-lf meta-embedded-block-ts\">{=</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts punctuation-definition-block-ts\">{</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts meta-object-literal-key-ts\">foo</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts meta-object-literal-key-ts punctuation-separator-key-value-ts\">:</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts variable-other-readwrite-ts\">number</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts meta-object-literal-key-ts\">bar</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts meta-object-literal-key-ts punctuation-separator-key-value-ts\">:</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts variable-other-readwrite-ts\">string</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts punctuation-definition-block-ts\">}</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts\">=}</span><span class=\"source-lf\">(</span><span class=\"source-lf meta-embedded-block-ts\">{=</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts punctuation-definition-block-ts\">{</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts meta-object-literal-key-ts\">foo</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts meta-object-literal-key-ts punctuation-separator-key-value-ts\">:</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts constant-numeric-decimal-ts\">42</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts meta-object-literal-key-ts\">bar</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts meta-object-literal-key-ts punctuation-separator-key-value-ts\">:</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts string-quoted-double-ts\">baz</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts meta-object-member-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-objectliteral-ts punctuation-definition-block-ts\">}</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts\">=}</span><span class=\"source-lf\">);</span>\n</pre>\n<p>or use <code>new</code>:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> mySet:</span><span class=\"source-lf meta-embedded-block-ts\">{=</span><span class=\"source-lf meta-embedded-block-ts support-class-builtin-ts\">Set</span><span class=\"source-lf meta-embedded-block-ts keyword-operator-relational-ts\">&lt;</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">number</span><span class=\"source-lf meta-embedded-block-ts\">&gt;=}</span><span class=\"source-lf\">(</span><span class=\"source-lf meta-embedded-block-ts\">{=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts new-expr-ts keyword-operator-new-ts\">new</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-function-call-ts support-class-builtin-ts\">Set</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-type-parameters-ts punctuation-definition-typeparameters-begin-ts\">&lt;</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-type-parameters-ts support-type-primitive-ts\">number</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-type-parameters-ts punctuation-definition-typeparameters-end-ts\">&gt;</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts\">=}</span><span class=\"source-lf\">);</span>\n</pre>\n<p>Reactor parameters are also referenced in the TypeScript code as local variables. The example below modifies the <code>Count</code> reactor so that its stride is a parameter:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">(stride:number(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> count:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> y:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">y</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">count</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">count</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-compound-ts\">+=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">stride</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Display</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> x:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Received: </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">x</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Stride</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">(stride </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Display</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">y</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The second line defines the <code>stride</code> parameter, gives its type, and gives its initial value. As with state variables, the type and initial value can be enclosed in <code>{= ... =}</code> if necessary. The parameter is referenced in the reaction by referring to the local variable <code>stride</code>.</p>\n<p>When the reactor is instantiated, the default parameter value can be overridden. This is done in the above example near the bottom with the line:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">(stride </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">);</span>\n</pre>\n<p>If there is more than one parameter, use a comma separated list of assignments.</p>\n<p>Parameters in Lingua Franca are immutable. To encourage correct usage, parameter variables within a reaction are local <code>const</code> variables. If you feel tempted to use a mutable parameter, instead try using the parameter to initialize state and modify the state variable instead. This is illustrated below by a further modification to the Stride example where it takes an initial “start” value for count as a second parameter:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">(stride:number(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">), start:number(</span><span class=\"source-lf constant-numeric-int-lflang\">5</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> count:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">(start);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> y:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> y </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">y</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">count</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">count</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-compound-ts\">+=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">stride</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Display</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> x:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Received: </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">x</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Stride</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">(stride </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">, start </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">10</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Display</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">y</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<h3 id=\"array-or-object-parameters\" style=\"position:relative;\"><a href=\"#array-or-object-parameters\" aria-label=\"array or object parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array or Object Parameters</h3>\n<p>Parameters can have array or object values. Here is an example that outputs the elements of an array as a sequence of individual messages:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\">(sequence:</span><span class=\"source-lf meta-embedded-block-ts\">{=</span><span class=\"source-lf meta-embedded-block-ts support-class-builtin-ts\">Array</span><span class=\"source-lf meta-embedded-block-ts keyword-operator-relational-ts\">&lt;</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">number</span><span class=\"source-lf meta-embedded-block-ts\">&gt;=}</span><span class=\"source-lf\">(</span><span class=\"source-lf meta-embedded-block-ts\">{=</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts meta-brace-square-ts\">[</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">1</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">2</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts meta-brace-square-ts\">]</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts\">=}</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> count:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> next;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">, next) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out, next </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">out</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">sequence</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts meta-brace-square-ts\">[</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts variable-other-readwrite-ts\">count</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts meta-brace-square-ts\">]</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">count</span><span class=\"source-lf meta-embedded-block-ts keyword-operator-increment-ts\">++</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts keyword-control-conditional-ts\">if</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">count</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-relational-ts\">&lt;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-object-ts\">sequence</span><span class=\"source-lf meta-embedded-block-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts support-variable-property-ts\">length</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts variable-other-object-ts\">actions</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts support-variable-property-dom-ts\">next</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts entity-name-function-ts\">schedule</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts constant-language-null-ts\">null</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Above, the parameter default value is an array with three elements, <code>[0, 1, 2]</code>. The syntax for giving this default value is a TypeScript array literal. Since this is TypeScript syntax, not Lingua Franca syntax, the initial value needs to be surrounded with the target code delimiters, <code>{= ... =}</code>. The default value can be overridden when instantiating the reactor using a similar syntax:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\">(sequence</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf meta-embedded-block-ts\">{=</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts meta-brace-square-ts\">[</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">1</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">2</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">3</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts constant-numeric-decimal-ts\">4</span><span class=\"source-lf meta-embedded-block-ts meta-array-literal-ts meta-brace-square-ts\">]</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts\">=}</span><span class=\"source-lf\">);</span>\n</pre>\n<p>Both default and overridden values for parameters can also be created with the <code>new</code> keyword:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\">(sequence:</span><span class=\"source-lf meta-embedded-block-ts\">{=</span><span class=\"source-lf meta-embedded-block-ts support-class-builtin-ts\">Array</span><span class=\"source-lf meta-embedded-block-ts keyword-operator-relational-ts\">&lt;</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">number</span><span class=\"source-lf meta-embedded-block-ts\">&gt;=}</span><span class=\"source-lf\">(</span><span class=\"source-lf meta-embedded-block-ts\">{=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts new-expr-ts keyword-operator-new-ts\">new</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-function-call-ts support-class-builtin-ts\">Array</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-type-parameters-ts punctuation-definition-typeparameters-begin-ts\">&lt;</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-type-parameters-ts support-type-primitive-ts\">number</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-type-parameters-ts punctuation-definition-typeparameters-end-ts\">&gt;</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts\">=}</span><span class=\"source-lf\">)) {</span>\n</pre>\n<p>and</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\">(sequence</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf meta-embedded-block-ts\">{=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts new-expr-ts keyword-operator-new-ts\">new</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts new-expr-ts support-class-builtin-ts\">Array</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts keyword-operator-relational-ts\">&lt;</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-function-call-ts entity-name-function-ts\">number</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts\">=}</span><span class=\"source-lf\">);</span>\n</pre>\n</div>\n<div class=\"lf-rs\">\n<p>Parameters and state variables in Rust are accessed on the <code>self</code> structure, as shown in <a href=\"/docs/handbook/parameters-and-state-variables#parameter-declaration\">Parameter Declaration</a>.</p>\n</div>\n<h2 id=\"inputs-and-outputs\" style=\"position:relative;\"><a href=\"#inputs-and-outputs\" aria-label=\"inputs and outputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inputs and Outputs</h2>\n<div class=\"lf-c\">\n<p>In the body of a reaction in the C target, the value of an input is obtained using the syntax <code>name->value</code>, where <code>name</code> is the name of the input port. See, for example, the <code>Destination</code> reactor in <a href=\"/docs/handbook/inputs-and-outputs#triggers-effects-and-uses\">Triggers, Effects, and Uses</a>.</p>\n<p>To set the value of outputs, use <code>lf_set</code>. See, for example, the <code>Double</code> reactor in <a href=\"/docs/handbook/inputs-and-outputs#input-and-output-declarations\">Input and Output Declarations</a>.)</p>\n<p>An output may even be set in different reactions of the same reactor at the same tag. In this case, one reaction may wish to test whether the previously invoked reaction has set the output. It can check <code>name->is_present</code> to determine whether the output has been set. For example, the following reactor (the test case <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/TestForPreviousOutput.lf\">TestForPreviousOutput</a>) will always produce the output 42:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TestForPreviousOutput</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\"> Set a seed for random number generation based on the current time.</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">srand</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">time</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\"> Randomly produce an output or not.</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp entity-name-function-call-cpp\">rand</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-cpp\">%</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp constant-numeric-decimal-cpp\">2</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\">out</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp constant-numeric-decimal-cpp\">21</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">out</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">is_present</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\">out</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp constant-numeric-decimal-cpp\">2</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-object-access-cpp\">out</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-control-else-cpp\">else</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\">out</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp constant-numeric-decimal-cpp\">42</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The first reaction may or may not set the output to 21. The second reaction doubles the output if it has been previously produced and otherwise produces 42.</p>\n<h3 id=\"sending-and-receiving-data\" style=\"position:relative;\"><a href=\"#sending-and-receiving-data\" aria-label=\"sending and receiving data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sending and Receiving Data</h3>\n<p>You can define your own data types in C and send and receive those. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/StructAsType.lf\">StructAsType</a> example:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">StructAsType</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-other-typedef-cpp\">typedef</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-head-struct-cpp storage-type-struct-cpp\">struct</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp entity-name-type-struct-cpp\">hello_t</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-head-struct-cpp punctuation-section-block-begin-bracket-curly-struct-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">char</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp\"> name</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp\"> value</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-body-struct-cpp punctuation-section-block-end-bracket-curly-struct-cpp\">}</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-tail-struct-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp meta-tail-struct-cpp support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">hello_t</span><span class=\"source-lf meta-embedded-block-c meta-block-struct-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">hello_t</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c storage-type-struct-declare-cpp\">struct</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-type-struct-cpp\">hello_t</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-declare-cpp\">temp</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp\">Earth</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp constant-numeric-decimal-cpp\">42</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> temp</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The $preamble$ code defines a struct data type. In the reaction to $startup$, the reactor creates an instance of this struct on the stack (as a local variable named <code>temp</code>) and then copies that struct to the output using the <code>lf_set</code> macro.</p>\n<p>For large structs, it may be inefficient to create a struct on the stack and copy it to the output, as done above. You can use a pointer type instead. See <a href=\"#dynamically-allocated-arrays\">below</a> for details.</p>\n<p>A reactor receiving the struct message uses the struct as normal in C:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Print</span><span class=\"source-lf\">() {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> in:</span><span class=\"source-lf support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">hello_t</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(in) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Received: name = </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%s</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">, value = </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-object-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">name</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-object-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The preamble should not be repeated in this reactor definition if the two reactors are defined together because this will trigger an error when the compiler thinks that <code>hello_t</code> is being redefined.</p>\n<h3 id=\"fixed-length-array-inputs-and-outputs\" style=\"position:relative;\"><a href=\"#fixed-length-array-inputs-and-outputs\" aria-label=\"fixed length array inputs and outputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fixed Length Array Inputs and Outputs</h3>\n<p>When inputs and outputs are fixed-length arrays, the memory to contain the array is automatically provided as part of the reactor instance. You can write directly to it, and then just call <code>lf_set_present</code> to alert the system that the output is present. For example:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-bracket-square-access constant-numeric-decimal-cpp\">3</span><span class=\"source-lf meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access constant-numeric-decimal-cpp\">2</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">2</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set_present</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>In general, this will work for any data type that can be copied by a simple assignment operator (see below for how to handle more complex data types).</p>\n<p>Reading the array is equally simple:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Print</span><span class=\"source-lf\">(scale: int(</span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\">)) {  </span><span class=\"source-lf comment-line-double-dash-lflang\">// The scale parameter is just for testing.</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> in:</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-bracket-square-access constant-numeric-decimal-cpp\">3</span><span class=\"source-lf meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(in) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Received: [</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-control-for-cpp\">for</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> i </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> i </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-comparison-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp constant-numeric-decimal-cpp\">3</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> i</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp\">i </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp keyword-operator-comparison-cpp\">&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp\">, </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-bracket-square-access\">i</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">]</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<h3 id=\"variable-length-array-inputs-and-outputs\" style=\"position:relative;\"><a href=\"#variable-length-array-inputs-and-outputs\" aria-label=\"variable length array inputs and outputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variable Length Array Inputs and Outputs</h3>\n<p>Above, the array size is fixed and must be known throughout the program. A more flexible mechanism leaves the array size unspecified in the types of the inputs and outputs and uses <code>lf_set_array</code> instead of <code>lf_set</code> to inform the system of the array length. For example,</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">[]</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\"> Dynamically allocate an output array of length 3.</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-c keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-c\"> array </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">malloc</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">3</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-functionlike-cpp keyword-operator-sizeof-cpp\">sizeof</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-operator-sizeof-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-arguments-operator-sizeof storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-operator-sizeof-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\"> Populate the array.</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access variable-other-object\">array</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access variable-other-object\">array</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access variable-other-object\">array</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access constant-numeric-decimal-cpp\">2</span><span class=\"source-lf meta-embedded-block-c meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">2</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\"> Set the output, specifying the array length.</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set_array</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> array</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">3</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The array length will be available at the receiving end, which may look like this:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Print</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> in:</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">[]</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(in) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Received: [</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-control-for-cpp\">for</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> i </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> i </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-comparison-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">length</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> i</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp\">i </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp keyword-operator-comparison-cpp\">&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp\">, </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-bracket-square-access\">i</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">]</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<h3 id=\"dynamically-allocated-data\" style=\"position:relative;\"><a href=\"#dynamically-allocated-data\" aria-label=\"dynamically allocated data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamically Allocated Data</h3>\n<p>A much more flexible way to communicate complex data types is to set dynamically allocated memory on an output port. This can be done in a way that automatically handles freeing the memory when all users of the data are done with it. The reactor that allocates the memory cannot know when downstream reactors are done with the data, so Lingua Franca provides utilities for managing this using reference counting. You can specify a destructor on a port and pass a pointer to a dynamically allocated object as illustrated in the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/SetDestructor.lf\">SetDestructor</a> example.</p>\n<p>Suppose the data structure of interest, its constructor, destructor, and copy_constructor are defined as follows:</p>\n<pre class=\"source-lf language-c\"><span class=\"source-c\">preamble </span><span class=\"source-c meta-block-c punctuation-section-block-begin-bracket-curly-c\">{</span><span class=\"source-c meta-block-c keyword-operator-assignment-c\">=</span>\n<span class=\"source-c meta-block-c\">    </span><span class=\"source-c meta-block-c keyword-other-typedef-c\">typedef</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c storage-type-struct-c\">struct</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c support-type-posix-reserved-c\">int_array_t</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c punctuation-section-block-begin-bracket-curly-c\">{</span>\n<span class=\"source-c meta-block-c\">        </span><span class=\"source-c meta-block-c storage-type-built-in-primitive-c\">int</span><span class=\"source-c meta-block-c keyword-operator-c\">*</span><span class=\"source-c meta-block-c\"> data</span><span class=\"source-c meta-block-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c meta-block-c\">        </span><span class=\"source-c meta-block-c storage-type-built-in-c\">size_t</span><span class=\"source-c meta-block-c\"> length</span><span class=\"source-c meta-block-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c meta-block-c\">    </span><span class=\"source-c meta-block-c punctuation-section-block-end-bracket-curly-c\">}</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c support-type-posix-reserved-c\">int_array_t</span><span class=\"source-c meta-block-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c meta-block-c\"></span>\n<span class=\"source-c meta-block-c\">    </span><span class=\"source-c meta-block-c support-type-posix-reserved-c\">int_array_t</span><span class=\"source-c meta-block-c keyword-operator-c\">*</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c meta-function-call-c entity-name-function-c\">int_array_constructor</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-function-call-c storage-type-built-in-c\">size_t</span><span class=\"source-c meta-block-c meta-function-call-c\"> length</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c punctuation-section-block-begin-bracket-curly-c\">{</span>\n<span class=\"source-c meta-block-c\">        </span><span class=\"source-c meta-block-c support-type-posix-reserved-c\">int_array_t</span><span class=\"source-c meta-block-c keyword-operator-c\">*</span><span class=\"source-c meta-block-c\"> result </span><span class=\"source-c meta-block-c keyword-operator-assignment-c\">=</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-section-parens-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-parens-block-c support-type-posix-reserved-c\">int_array_t</span><span class=\"source-c meta-block-c meta-parens-block-c keyword-operator-c\">*</span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-section-parens-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c meta-function-call-c entity-name-function-c\">malloc</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-function-call-c keyword-operator-sizeof-c\">sizeof</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-parens-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-function-call-c support-type-posix-reserved-c\">int_array_t</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-parens-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c meta-block-c\">        </span><span class=\"source-c meta-block-c variable-other-object-access-c\">result</span><span class=\"source-c meta-block-c punctuation-separator-pointer-access-c\">-&gt;</span><span class=\"source-c meta-block-c variable-other-member-c\">data</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c keyword-operator-assignment-c\">=</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-section-parens-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-parens-block-c storage-type-built-in-primitive-c\">int</span><span class=\"source-c meta-block-c meta-parens-block-c keyword-operator-c\">*</span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-section-parens-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c meta-function-call-c entity-name-function-c\">calloc</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-function-call-c\">length</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-separator-delimiter-c\">,</span><span class=\"source-c meta-block-c meta-function-call-c\"> </span><span class=\"source-c meta-block-c meta-function-call-c keyword-operator-sizeof-c\">sizeof</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-parens-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-function-call-c storage-type-built-in-primitive-c\">int</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-parens-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c meta-block-c\">        </span><span class=\"source-c meta-block-c variable-other-object-access-c\">result</span><span class=\"source-c meta-block-c punctuation-separator-pointer-access-c\">-&gt;</span><span class=\"source-c meta-block-c variable-other-member-c\">length</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c keyword-operator-assignment-c\">=</span><span class=\"source-c meta-block-c\"> length</span><span class=\"source-c meta-block-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c meta-block-c\">        </span><span class=\"source-c meta-block-c keyword-control-c\">return</span><span class=\"source-c meta-block-c\"> result</span><span class=\"source-c meta-block-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c meta-block-c\">    </span><span class=\"source-c meta-block-c punctuation-section-block-end-bracket-curly-c\">}</span>\n<span class=\"source-c meta-block-c\"></span>\n<span class=\"source-c meta-block-c\">    </span><span class=\"source-c meta-block-c storage-type-built-in-primitive-c\">void</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c meta-function-call-c entity-name-function-c\">int_array_destructor</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-function-call-c storage-type-built-in-primitive-c\">void</span><span class=\"source-c meta-block-c meta-function-call-c keyword-operator-c\">*</span><span class=\"source-c meta-block-c meta-function-call-c\"> array</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c punctuation-section-block-begin-bracket-curly-c\">{</span>\n<span class=\"source-c meta-block-c\">        </span><span class=\"source-c meta-block-c meta-function-call-c entity-name-function-c\">free</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-parens-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-parens-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-function-call-c support-type-posix-reserved-c\">int_array_t</span><span class=\"source-c meta-block-c meta-function-call-c keyword-operator-c\">*</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-parens-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c meta-function-call-c\"> array</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-parens-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-separator-pointer-access-c\">-&gt;</span><span class=\"source-c meta-block-c meta-function-call-c variable-other-member-c\">data</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c meta-block-c\">        </span><span class=\"source-c meta-block-c meta-function-call-c entity-name-function-c\">free</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-function-call-c\">array</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c meta-block-c\">    </span><span class=\"source-c meta-block-c punctuation-section-block-end-bracket-curly-c\">}</span>\n<span class=\"source-c meta-block-c\"></span>\n<span class=\"source-c meta-block-c\">    </span><span class=\"source-c meta-block-c storage-type-built-in-primitive-c\">void</span><span class=\"source-c meta-block-c keyword-operator-c\">*</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c meta-function-call-c entity-name-function-c\">int_array_copy_constructor</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-function-call-c storage-type-built-in-primitive-c\">void</span><span class=\"source-c meta-block-c meta-function-call-c keyword-operator-c\">*</span><span class=\"source-c meta-block-c meta-function-call-c\"> array</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c punctuation-section-block-begin-bracket-curly-c\">{</span>\n<span class=\"source-c meta-block-c\">        </span><span class=\"source-c meta-block-c support-type-posix-reserved-c\">int_array_t</span><span class=\"source-c meta-block-c keyword-operator-c\">*</span><span class=\"source-c meta-block-c\"> source </span><span class=\"source-c meta-block-c keyword-operator-assignment-c\">=</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-section-parens-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-parens-block-c support-type-posix-reserved-c\">int_array_t</span><span class=\"source-c meta-block-c meta-parens-block-c keyword-operator-c\">*</span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-section-parens-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c\"> array</span><span class=\"source-c meta-block-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c meta-block-c\">        </span><span class=\"source-c meta-block-c support-type-posix-reserved-c\">int_array_t</span><span class=\"source-c meta-block-c keyword-operator-c\">*</span><span class=\"source-c meta-block-c\"> copy </span><span class=\"source-c meta-block-c keyword-operator-assignment-c\">=</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-section-parens-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-parens-block-c support-type-posix-reserved-c\">int_array_t</span><span class=\"source-c meta-block-c meta-parens-block-c keyword-operator-c\">*</span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-section-parens-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c meta-function-call-c entity-name-function-c\">malloc</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-function-call-c keyword-operator-sizeof-c\">sizeof</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-parens-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-function-call-c support-type-posix-reserved-c\">int_array_t</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-parens-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c meta-block-c\">        </span><span class=\"source-c meta-block-c variable-other-object-access-c\">copy</span><span class=\"source-c meta-block-c punctuation-separator-pointer-access-c\">-&gt;</span><span class=\"source-c meta-block-c variable-other-member-c\">data</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c keyword-operator-assignment-c\">=</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-section-parens-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-parens-block-c storage-type-built-in-primitive-c\">int</span><span class=\"source-c meta-block-c meta-parens-block-c keyword-operator-c\">*</span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-section-parens-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c meta-function-call-c entity-name-function-c\">calloc</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-function-call-c variable-other-object-access-c\">source</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-separator-pointer-access-c\">-&gt;</span><span class=\"source-c meta-block-c meta-function-call-c variable-other-member-c\">length</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-separator-delimiter-c\">,</span><span class=\"source-c meta-block-c meta-function-call-c\"> </span><span class=\"source-c meta-block-c meta-function-call-c keyword-operator-sizeof-c\">sizeof</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-parens-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-function-call-c storage-type-built-in-primitive-c\">int</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-parens-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c meta-function-call-c punctuation-section-arguments-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c meta-block-c\">        </span><span class=\"source-c meta-block-c variable-other-object-access-c\">copy</span><span class=\"source-c meta-block-c punctuation-separator-pointer-access-c\">-&gt;</span><span class=\"source-c meta-block-c variable-other-member-c\">length</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c keyword-operator-assignment-c\">=</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c variable-other-object-access-c\">source</span><span class=\"source-c meta-block-c punctuation-separator-pointer-access-c\">-&gt;</span><span class=\"source-c meta-block-c variable-other-member-c\">length</span><span class=\"source-c meta-block-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c meta-block-c\">        </span><span class=\"source-c meta-block-c keyword-control-c\">for</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-section-parens-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-parens-block-c storage-type-built-in-c\">size_t</span><span class=\"source-c meta-block-c meta-parens-block-c\"> i </span><span class=\"source-c meta-block-c meta-parens-block-c keyword-operator-assignment-c\">=</span><span class=\"source-c meta-block-c meta-parens-block-c\"> </span><span class=\"source-c meta-block-c meta-parens-block-c constant-numeric-decimal-c\">0</span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-terminator-statement-c\">;</span><span class=\"source-c meta-block-c meta-parens-block-c\"> i </span><span class=\"source-c meta-block-c meta-parens-block-c keyword-operator-comparison-c\">&lt;</span><span class=\"source-c meta-block-c meta-parens-block-c\"> </span><span class=\"source-c meta-block-c meta-parens-block-c variable-other-object-access-c\">source</span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-separator-pointer-access-c\">-&gt;</span><span class=\"source-c meta-block-c meta-parens-block-c variable-other-member-c\">length</span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-terminator-statement-c\">;</span><span class=\"source-c meta-block-c meta-parens-block-c\"> i</span><span class=\"source-c meta-block-c meta-parens-block-c keyword-operator-increment-c\">++</span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-section-parens-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c punctuation-section-block-begin-bracket-curly-c\">{</span>\n<span class=\"source-c meta-block-c\">            </span><span class=\"source-c meta-block-c variable-other-object-access-c\">copy</span><span class=\"source-c meta-block-c punctuation-separator-pointer-access-c\">-&gt;</span><span class=\"source-c meta-block-c variable-other-member-c\">data</span><span class=\"source-c meta-block-c meta-bracket-square-access-c punctuation-definition-begin-bracket-square-c\">[</span><span class=\"source-c meta-block-c meta-bracket-square-access-c\">i</span><span class=\"source-c meta-block-c meta-bracket-square-access-c punctuation-definition-end-bracket-square-c\">]</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c keyword-operator-assignment-c\">=</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c variable-other-object-access-c\">source</span><span class=\"source-c meta-block-c punctuation-separator-pointer-access-c\">-&gt;</span><span class=\"source-c meta-block-c variable-other-member-c\">data</span><span class=\"source-c meta-block-c meta-bracket-square-access-c punctuation-definition-begin-bracket-square-c\">[</span><span class=\"source-c meta-block-c meta-bracket-square-access-c\">i</span><span class=\"source-c meta-block-c meta-bracket-square-access-c punctuation-definition-end-bracket-square-c\">]</span><span class=\"source-c meta-block-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c meta-block-c\">        </span><span class=\"source-c meta-block-c punctuation-section-block-end-bracket-curly-c\">}</span>\n<span class=\"source-c meta-block-c\">        </span><span class=\"source-c meta-block-c keyword-control-c\">return</span><span class=\"source-c meta-block-c\"> </span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-section-parens-begin-bracket-round-c\">(</span><span class=\"source-c meta-block-c meta-parens-block-c storage-type-built-in-primitive-c\">void</span><span class=\"source-c meta-block-c meta-parens-block-c keyword-operator-c\">*</span><span class=\"source-c meta-block-c meta-parens-block-c punctuation-section-parens-end-bracket-round-c\">)</span><span class=\"source-c meta-block-c\"> copy</span><span class=\"source-c meta-block-c punctuation-terminator-statement-c\">;</span>\n<span class=\"source-c meta-block-c\">    </span><span class=\"source-c meta-block-c punctuation-section-block-end-bracket-curly-c\">}</span>\n<span class=\"source-c meta-block-c keyword-operator-assignment-c\">=</span><span class=\"source-c meta-block-c punctuation-section-block-end-bracket-curly-c\">}</span>\n</pre>\n<p>Then, the sender reactor would use <code>lf_set_destructor</code> to specify how the memory set on an output port should be freed:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">int_array_t</span><span class=\"source-lf keyword-operator-cpp\">*</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set_destructor</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> int_array_destructor</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set_copy_constructor</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> int_array_copy_constructor</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    }</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">reaction</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">startup</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\"> </span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">out</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp keyword-operator-assignment-cpp\">=</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">int_array_t</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> array </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">int_array_constructor</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp constant-numeric-decimal-cpp\">2</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp keyword-control-for-cpp\">for</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp storage-type-cpp storage-type-built-in-cpp\">size_t</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp\"> i </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp\"> i </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp keyword-operator-comparison-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp variable-other-object-access-cpp\">array</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp variable-other-property-cpp\">length</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp\"> i</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp variable-other-object-access-cpp\">array</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp variable-other-property-cpp\">data</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp meta-bracket-square-access\">i</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp\"> i</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\">out</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> array</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-c\">}</span>\n</pre>\n<p>The first reaction specifies the destructor and copy constructor (the latter of which will be used if any downstream reactor has a mutable input or wishes to make a writable copy).</p>\n<p><strong>IMPORTANT:</strong> The array constructed should be sent to only one output port using <code>lf_set</code>. If you need to send it to more than one output port or to use it as the payload of an action, you should use <code>lf_set_token</code>.</p>\n<p><strong>FIXME:</strong> Show how to do this.</p>\n<p>A reactor receiving this array is straightforward. It just references the array elements as usual in C, as illustrated by this example:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Print</span><span class=\"source-lf\">() {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> in:</span><span class=\"source-lf support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">int_array_t</span><span class=\"source-lf keyword-operator-cpp\">*</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(in) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Received: [</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-control-for-cpp\">for</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> i </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> i </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-comparison-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">length</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> i</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp\">i </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp keyword-operator-comparison-cpp\">&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp\">, </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp constant-other-placeholder\">%d</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-object-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-property-cpp\">data</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-bracket-square-access\">i</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">]</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The deallocation of memory for the data will occur automatically after the last reactor that receives a pointer to the data has finished using it, using the destructor specified by <code>lf_set_destructor</code> or <code>free</code> if none specified.</p>\n<p>Occasionally, you will want an input or output type to be a pointer, but you don’t want the automatic memory allocation and deallocation. A simple example is a string type, which in C is <code>char*</code>. Consider the following (erroneous) reactor:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Erroneous</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">char</span><span class=\"source-lf keyword-operator-cpp\">*</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Hello World</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>An output data type that ends with <code>*</code> signals to Lingua Franca that the message\nis dynamically allocated and must be freed downstream after all recipients are\ndone with it. But the <code>\"Hello World\"</code> string here is statically allocated, so an\nerror will occur when the last downstream reactor to use this message attempts\nto free the allocated memory. To avoid this for strings, you can use a special\n<code>string</code> type as follows:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Fixed</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-lflang\">string</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Hello World</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The <code>string</code> type is equivalent to <code>char*</code>, but since it doesn’t end with <code>*</code>, it does not signal to Lingua Franca that the type is dynamically allocated. Lingua Franca only handles allocation and deallocation for types that are specified literally with a final <code>*</code> in the type name. The same trick can be used for any type where you don’t want automatic allocation and deallocation. E.g., the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/SendsPointerTest.lf\">SendsPointer</a> example looks like this:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">SendsPointer</span><span class=\"source-lf\">  {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-other-typedef-cpp\">typedef</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-c keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-c\"> int_pointer</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-lflang\">int_pointer</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c storage-modifier-specifier-static-cpp\">static</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-c\"> my_constant </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">42</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-cpp\">&amp;</span><span class=\"source-lf meta-embedded-block-c\">my_constant</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The above technique can be used to abuse the reactor model of computation by communicating pointers to shared variables. This is generally a bad idea unless those shared variables are immutable. The result will likely be nondeterministic. Also, communicating pointers across machines that do not share memory will not work at all.</p>\n<h3 id=\"mutable-inputs\" style=\"position:relative;\"><a href=\"#mutable-inputs\" aria-label=\"mutable inputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mutable Inputs</h3>\n<p>Although it cannot be enforced in C, a receiving reactor should not modify the values provided by an input. Inputs are logically <em>immutable</em> because there may be several recipients. Any recipient that wishes to modify the input should make a copy of it. Fortunately, a utility is provided for this pattern. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ArrayScale.lf\">ArrayScale</a> example:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">ArrayScale</span><span class=\"source-lf\">(scale:int(</span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">mutable</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> in:</span><span class=\"source-lf support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">int_array_t</span><span class=\"source-lf keyword-operator-cpp\">*</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">int_array_t</span><span class=\"source-lf keyword-operator-cpp\">*</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(in) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-control-for-cpp\">for</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> i </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> i </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-comparison-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">length</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp\"> i</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-bracket-square-access\">i</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp keyword-operator-assignment-compound-cpp\">*=</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-property-cpp\">scale</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set_token</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">token</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Here, the input is declared $mutable$, which means that any reaction is free to\nmodify the input. If this reactor is the only recipient of the array or the last\nrecipient of the array, then this will not make a copy of the array but rather use\nthe original array. Otherwise, it will use a copy. By default, <code>memcpy</code> is used to copy the data. However, the sender can also specify\na copy constructor to be used by calling <code>lf_set_copy_constructor</code> on the\noutput port, as explained below.</p>\n<p><strong>Important:</strong> Notice that the above <code>ArrayScale</code> reactor modifies the array and then forwards it to its output port using the <code>lf_set_token()</code> macro. That macro further delegates to downstream reactors the responsibility for freeing dynamically allocated memory once all readers have completed their work. It will not work to just use <code>lf_set</code>, passing it the value.\nThis will result in a memory error, yielding a message like the following:</p>\n<pre class=\"source-lf language-text\">    malloc: *** error for object 0x600002674070: pointer being freed was not allocated</pre>\n<p>If the above code were not to forward the array, then the dynamically allocated memory will be automatically freed when this reactor is done with it.</p>\n<p>Three of the above reactors can be combined into a pipeline as follows:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">ArrayScaleTest</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">ArrayScale</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Print</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">in</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">in</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>In this composite, the array is allocated by <code>ArrayPrint</code>, modified by <code>ArrayScale</code>, and deallocated (freed) after <code>Print</code> has reacted. No copy is necessary because <code>ArrayScale</code> is the only recipient of the original array.</p>\n<p>Inputs and outputs can also be dynamically allocated structs. In fact, Lingua Franca’s C target will treat any input or output data type that ends with <code>[]</code> or <code>*</code> specially by providing utilities for allocating memory and modifying and forwarding. Deallocation of the allocated memory is automatic. The complete set of utilities is given below.</p>\n<h3 id=\"string-types\" style=\"position:relative;\"><a href=\"#string-types\" aria-label=\"string types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String Types</h3>\n<p>String types in C are <code>char*</code>. But, as explained above, types ending with <code>*</code> are interpreted specially to provide automatic memory management, which we generally don’t want with strings (a string that is a compile-time constant must not be freed). You could enclose the type as <code>{= char* =}</code>, but to avoid this awkwardness, the header files include a typedef that permits using <code>string</code> instead of <code>char*</code>. For example (from <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/DelayString.lf\">DelayString.lf</a>):</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">DelayString</span><span class=\"source-lf\">(delay:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> in:</span><span class=\"source-lf storage-type-lflang\">string</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-lflang\">string</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a:</span><span class=\"source-lf storage-type-lflang\">string</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(in) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\"> The following copies the char*, not the string.</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_schedule_copy</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">a</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">delay</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-cpp\">&amp;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<h3 id=\"macros-for-setting-output-values\" style=\"position:relative;\"><a href=\"#macros-for-setting-output-values\" aria-label=\"macros for setting output values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Macros For Setting Output Values</h3>\n<p>In all of the following, <code>&#x3C;out></code> is the name of the output and <code>&#x3C;value></code> is the value to be sent.</p>\n<blockquote>\n<p><code>lf_set(&#x3C;out>, &#x3C;value>);</code></p>\n</blockquote>\n<p>Set the specified output (or input of a contained reactor) to the specified\nvalue using shallow copy. <code>lf_set</code> can be used with all supported data types\n(including type declarations that end with <code>*</code> or <code>[]</code>).</p>\n<blockquote>\n<p><code>lf_set_token(&#x3C;out>, &#x3C;token>);</code></p>\n</blockquote>\n<p>This version is used to directly set the underlying reference-counted token in\noutputs with a type declaration ending with <code>*</code> (any pointer) or <code>[]</code> (any\narray). The <code>&#x3C;value></code> argument should be a struct of type <code>token_t</code>. It should\nbe rarely necessary to have the need to create your own (dynamically allocated)\ninstance of <code>token_t</code>.</p>\n<p>Consider the\n<a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/SetToken.lf\">SetToken.lf</a>\nexample:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">        </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf keyword-operator-cpp\">*</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">        </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">        </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">            </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_schedule_int</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">a</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">MSEC</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">200</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">42</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">        </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">            </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set_token</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">token</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    }</span>\n</pre>\n<p>Here, the first reaction schedules an integer-valued action to trigger after 200 microseconds. As explained below, action payloads are carried by tokens. The second reaction grabs the token rather than the value using the syntax <code>a->token</code> (the name of the action followed by <code>->token</code>). It then forwards the token to the output. The output data type is <code>int*</code> not <code>int</code> because the token carries a pointer to dynamically allocated memory that contains the value. All inputs and outputs with types ending in <code>*</code> or <code>[]</code> are carried by tokens.</p>\n<blockquote>\n<p><code>lf_set_destructor(&#x3C;out>, &#x3C;destructor>);</code></p>\n</blockquote>\n<p>Specify the destructor <code>destructor</code> used to deallocate any dynamic data set on the output port <code>out</code>.</p>\n<blockquote>\n<p><code>lf_set_copy_constructor(&#x3C;out>, &#x3C;copy_constructor>);</code></p>\n</blockquote>\n<p>Specify the <code>copy_constructor</code> used to copy construct any dynamic data set on the output port <code>out</code> if the receiving port is $mutable$.</p>\n<p><code>lf_set</code> (and <code>lf_set_token</code>) will overwrite any output value previously set at the same logical time and will cause the final output value to be sent to all reactors connected to the output. They also set a local <code>&#x3C;out>->is_present</code> variable to true. This can be used to subsequently test whether the output value has been set.</p>\n</div>\n<div class=\"lf-cpp\">\n<p>In the body of a reaction in the C++ target, the value of an input is obtained using the syntax <code>*name.get()</code>, where <code>name</code> is the name of the input port. Similarly, outputs are set using a <code>set()</code> method on an output port. For examples, see <a href=\"/docs/handbook/inputs-and-outputs\">Inputs and Outputs</a>.</p>\n<p>Note that <code>get()</code> always returns a pointer to the actual value. Thus the pointer needs to be dereferenced with <code>*</code> to obtain the value. (See <a href=\"#sending-and-receiving-large-data-types\">Sending and Receiving Large Data Types</a> for an explanation of the exact mechanisms behind this pointer access).\nTo determine whether an input is present, <code>name.is_present()</code> can be used. Since <code>get()</code> returns a <code>nullptr</code> if no value is present, <code>name.get() != nullptr</code> can be used alternatively for checking presence.</p>\n<h3 id=\"sending-and-receiving-large-data-types\" style=\"position:relative;\"><a href=\"#sending-and-receiving-large-data-types\" aria-label=\"sending and receiving large data types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sending and Receiving Large Data Types</h3>\n<p>You can define your own data types in C++ or use types defined in a library and send and receive those. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/StructAsType.lf\">StructAsType</a> example:</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">StructAsType</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">public</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-head-struct-cpp storage-type-struct-cpp\">struct</span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp entity-name-type-struct-cpp\">Hello</span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-head-struct-cpp punctuation-section-block-begin-bracket-curly-struct-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp\">            </span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp\">string name</span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp\">            </span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp\"> value</span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp meta-body-struct-cpp punctuation-section-block-end-bracket-curly-struct-cpp\">}</span><span class=\"source-lf meta-embedded-block-cpp meta-block-struct-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf entity-name-type-lflang\">Hello</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        Hello hello</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp\">Earth, 42};</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp\">        out.set(hello);</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp\">    =}</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp string-quoted-double-cpp\">}</span>\n</pre>\n<p>The <strong>preamble</strong> code defines a struct data type. In the reaction to <strong>startup</strong>, the reactor creates an instance of this struct on the stack (as a local variable named <code>hello</code>) and then copies that instance to the output using the <code>set()</code> method. For this reason, the C++ reactor runtime provides more sophisticated ways to allocate objects and send them via ports.</p>\n<p>The C++ library defines two types of smart pointers that the runtime uses internally to implement the exchange of data between ports. These are <code>reactor::MutableValuePtr&#x3C;T></code> and <code>reactor::ImmutableValuePtr&#x3C;T></code>. <code>reactor::MutableValuePtr&#x3C;T></code> is a wrapper around <a href=\"https://en.cppreference.com/w/cpp/memory/unique_ptr\"><code>std::unique_ptr</code></a> and provides read and write access to the value hold, while ensuring that the value has a unique owner. In contrast, <code>reactor::ImmutableValuePtr&#x3C;T></code> is a wrapper around <a href=\"https://en.cppreference.com/w/cpp/memory/shared_ptr\"><code>std::shared_pointer</code></a> and provides read only (const) access to the value it holds. This allows data to be shared between reactions of various reactors, while guarantee data consistency. Similar to <code>std::make_unique</code> and <code>std::make_shared</code>, the reactor library provides convenient function for creating mutable and immutable values pointers: <code>reactor::make_mutable_value&#x3C;T>(...)</code> and <code>reactor::make_immutable_value&#x3C;T>(...)</code>.</p>\n<p>In fact this code from the example above:</p>\n<pre class=\"source-lf language-cpp\"><span class=\"source-cpp\">Hello hello</span><span class=\"source-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span><span class=\"source-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-cpp meta-block-cpp string-quoted-double-cpp\">Earth, 42</span><span class=\"source-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-cpp variable-other-object-access-cpp\">out</span><span class=\"source-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-cpp entity-name-function-member-cpp\">set</span><span class=\"source-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-cpp\">hello</span><span class=\"source-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n</pre>\n<p>implicitly invokes <code>reactor::make_immutable_value&#x3C;Hello>(hello)</code> and could be rewritten as</p>\n<pre class=\"source-lf language-cpp\"><span class=\"source-cpp\">Hello hello</span><span class=\"source-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span><span class=\"source-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-cpp meta-block-cpp string-quoted-double-cpp\">Earth, 42</span><span class=\"source-cpp meta-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-cpp variable-other-object-access-cpp\">out</span><span class=\"source-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-cpp entity-name-function-member-cpp\">set</span><span class=\"source-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-cpp entity-name-scope-resolution-function-call-cpp\">reactor</span><span class=\"source-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-function-call-cpp\">::</span><span class=\"source-cpp entity-name-function-call-cpp\">make_immutable_value</span><span class=\"source-cpp meta-template-call-cpp meta-template-call-cpp punctuation-section-angle-brackets-begin-template-call-cpp\">&lt;</span><span class=\"source-cpp meta-template-call-cpp meta-template-call-cpp meta-qualified_type-cpp entity-name-type-cpp\">Hello</span><span class=\"source-cpp meta-template-call-cpp meta-template-call-cpp punctuation-section-angle-brackets-end-template-call-cpp\">&gt;</span><span class=\"source-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-cpp\">hello</span><span class=\"source-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n</pre>\n<p>This will invoke the copy constructor of <code>Hello</code>, copying its content from the <code>hello</code> instance to the newly created <code>reactor::ImmutableValuePtr&#x3C;Hello></code>.</p>\n<p>Since copying large objects is inefficient, the move semantics of C++ can be used to move the ownership of object instead of copying it. This can be done in the following two ways. First, by directly creating a mutable or immutable value pointer, where a mutable pointer allows modification of the object after it has been created:</p>\n<pre class=\"source-lf language-cpp\"><span class=\"source-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-cpp\"> hello </span><span class=\"source-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-cpp\"> </span><span class=\"source-cpp entity-name-scope-resolution-cpp\">reactor</span><span class=\"source-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-cpp entity-name-function-call-cpp\">make_mutable_value</span><span class=\"source-cpp meta-template-call-cpp meta-template-call-cpp punctuation-section-angle-brackets-begin-template-call-cpp\">&lt;</span><span class=\"source-cpp meta-template-call-cpp meta-template-call-cpp meta-qualified_type-cpp entity-name-type-cpp\">Hello</span><span class=\"source-cpp meta-template-call-cpp meta-template-call-cpp punctuation-section-angle-brackets-end-template-call-cpp\">&gt;</span><span class=\"source-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-cpp string-quoted-double-cpp\">Earth</span><span class=\"source-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-cpp\"> </span><span class=\"source-cpp constant-numeric-decimal-cpp\">42</span><span class=\"source-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-cpp variable-other-object-access-cpp\">hello</span><span class=\"source-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-cpp variable-other-property-cpp\">name</span><span class=\"source-cpp\"> </span><span class=\"source-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-cpp\"> </span><span class=\"source-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-cpp string-quoted-double-cpp\">Mars</span><span class=\"source-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-cpp variable-other-object-access-cpp\">out</span><span class=\"source-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-cpp entity-name-function-member-cpp\">set</span><span class=\"source-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-cpp entity-name-scope-resolution-function-call-cpp\">std</span><span class=\"source-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-function-call-cpp\">::</span><span class=\"source-cpp entity-name-function-call-cpp\">move</span><span class=\"source-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-cpp\">hello</span><span class=\"source-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n</pre>\n<p>An example of this can be found in <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/StructPrint.lf\">StructPrint.lf</a>. Not that after the call to <code>std::move</code>, hello is <code>nullptr</code> and the reaction cannot modify the object anymore. Alternatively, if no modification is requires, the object can be instantiated directly in the call to <code>set()</code> as follows:</p>\n<pre class=\"source-lf language-cpp\"><span class=\"source-cpp variable-other-object-access-cpp\">out</span><span class=\"source-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-cpp entity-name-function-member-cpp\">set</span><span class=\"source-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-cpp\">{</span><span class=\"source-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-cpp string-quoted-double-cpp\">Earth</span><span class=\"source-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-cpp\"> </span><span class=\"source-cpp constant-numeric-decimal-cpp\">42</span><span class=\"source-cpp\">}</span><span class=\"source-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n</pre>\n<p>An example of this can be found in <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/StructAsTypeDirect.lf\">StructAsTypeDirect</a>.</p>\n<p>Getting a value from an input port of type <code>T</code> via <code>get()</code> always returns an <code>reactor::ImmutableValuePtr&#x3C;T></code>. This ensures that the value cannot be modified by multiple reactors receiving the same value, as this could lead to an inconsistent state and nondeterminism in a multi-threaded execution. An immutable value pointer can be converted to a mutable pointer by calling <code>get_mutable_copy</code>. For instance, the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/ArrayScale.lf\">ArrayScale</a> reactor modifies elements of the array it receives before sending it to the next reactor:</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Scale</span><span class=\"source-lf\">(scale:int(</span><span class=\"source-lf constant-numeric-int-lflang\">2</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> in:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-bracket-square-access constant-numeric-decimal-cpp\">3</span><span class=\"source-lf meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-bracket-square-access constant-numeric-decimal-cpp\">3</span><span class=\"source-lf meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(in) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> array </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">get</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">get_mutable_copy</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp keyword-control-for-cpp\">for</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> i </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> i </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp keyword-operator-comparison-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp variable-other-object-access-cpp\">array</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp entity-name-function-member-cpp\">size</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp\"> i</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp keyword-operator-increment-cpp\">++</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-parens-cpp keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-parens-cpp\">array</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-bracket-square-access\">i</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-parens-cpp keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-parens-cpp\">array</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-bracket-square-access punctuation-definition-begin-bracket-square\">[</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-bracket-square-access\">i</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp meta-bracket-square-access punctuation-definition-end-bracket-square\">]</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\"> scale</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">out</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">set</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-function-call-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-function-call-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">move</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp\">array</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Currently <code>get_mutable_copy()</code> always copies the contained value to safely create a mutable pointer. However, a future implementation could optimize this by checking if any other reaction is accessing the same value. If not, the value can simply be moved from the immutable pointer to a mutable one.</p>\n</div>\n<div class=\"lf-py\">\n<p>In the body of a reaction in the Python target, the value of an input is\nobtained using the syntax <code>name.value</code>, where <code>name</code> is the name of the input\nport. To determine whether an input is present, use <code>name.is_present</code>. To\nproduce an output, use the syntax <code>name.set(value)</code>. The <code>value</code> can be any\nvalid Python object. For simple examples, see <a href=\"/docs/handbook/inputs-and-outputs\">Inputs and\nOutputs</a>.</p>\n<h3 id=\"sending-and-receiving-objects\" style=\"position:relative;\"><a href=\"#sending-and-receiving-objects\" aria-label=\"sending and receiving objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sending and Receiving Objects</h3>\n<p>You can define your own data types in Python and send and receive those. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/StructAsType.lf\">StructAsType</a> example:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\"> {</span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">files</span><span class=\"source-lf meta-targetspec-lflang\">: include</span><span class=\"source-lf meta-targetspec-lflang keyword-operator-lflang\">/</span><span class=\"source-lf meta-targetspec-lflang variable-other-constant-reactorinstance-lflang\">hello</span><span class=\"source-lf meta-targetspec-lflang keyword-operator-lflang\">.</span><span class=\"source-lf meta-targetspec-lflang variable-other-lflang\">py</span><span class=\"source-lf meta-targetspec-lflang\">}</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py keyword-control-import-python\">import</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">hello</span>\n<span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">temp</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">hello</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">hello</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Earth</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">42</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">out</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">set</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">temp</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The top-level preamble has imported the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/include/hello.py\">hello</a> module, which contains the following class:</p>\n<pre class=\"source-lf language-python\"><span class=\"source-python meta-class-python storage-type-class-python\">class</span><span class=\"source-python meta-class-python\"> </span><span class=\"source-python meta-class-python entity-name-type-class-python\">hello</span><span class=\"source-python meta-class-python punctuation-section-class-begin-python\">:</span>\n<span class=\"source-python meta-function-python\">    </span><span class=\"source-python meta-function-python storage-type-function-python\">def</span><span class=\"source-python meta-function-python\"> </span><span class=\"source-python meta-function-python support-function-magic-python\">__init__</span><span class=\"source-python meta-function-python meta-function-parameters-python punctuation-definition-parameters-begin-python\">(</span><span class=\"source-python meta-function-python meta-function-parameters-python variable-parameter-function-language-python variable-parameter-function-language-special-self-python\">self</span><span class=\"source-python meta-function-python meta-function-parameters-python punctuation-separator-parameters-python\">,</span><span class=\"source-python meta-function-python meta-function-parameters-python\"> </span><span class=\"source-python meta-function-python meta-function-parameters-python variable-parameter-function-language-python\">name</span><span class=\"source-python meta-function-python meta-function-parameters-python\"> </span><span class=\"source-python meta-function-python meta-function-parameters-python keyword-operator-python\">=</span><span class=\"source-python meta-function-python meta-function-parameters-python\"> </span><span class=\"source-python meta-function-python meta-function-parameters-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-python meta-function-python meta-function-parameters-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-python meta-function-python meta-function-parameters-python punctuation-separator-parameters-python\">,</span><span class=\"source-python meta-function-python meta-function-parameters-python\"> </span><span class=\"source-python meta-function-python meta-function-parameters-python variable-parameter-function-language-python\">value</span><span class=\"source-python meta-function-python meta-function-parameters-python\"> </span><span class=\"source-python meta-function-python meta-function-parameters-python keyword-operator-python\">=</span><span class=\"source-python meta-function-python meta-function-parameters-python\"> </span><span class=\"source-python meta-function-python meta-function-parameters-python constant-numeric-dec-python\">0</span><span class=\"source-python meta-function-python meta-function-parameters-python punctuation-definition-parameters-end-python\">)</span><span class=\"source-python meta-function-python punctuation-section-function-begin-python\">:</span>\n<span class=\"source-python\">        </span><span class=\"source-python variable-language-special-self-python\">self</span><span class=\"source-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-python meta-member-access-python meta-attribute-python\">name</span><span class=\"source-python\"> </span><span class=\"source-python keyword-operator-assignment-python\">=</span><span class=\"source-python\"> </span><span class=\"source-python\">name</span>\n<span class=\"source-python\">        </span><span class=\"source-python variable-language-special-self-python\">self</span><span class=\"source-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-python\"> </span><span class=\"source-python keyword-operator-assignment-python\">=</span><span class=\"source-python\"> </span><span class=\"source-python\">value</span>\n</pre>\n<p>In the reaction to <strong>startup</strong>, the reactor has created an instance object of this class (as local variable named <code>temp</code>) and passed it downstream using the <code>set</code> method on output port <code>out</code>.</p>\n<p>The <code>set</code> method is defined as follows:</p>\n<blockquote>\n<p><code>&#x3C;port>.set(&#x3C;value>)</code>: Set the specified output port (or input of a contained\nreactor) to the specified value. This value can be any Python object\n(including <code>None</code> and objects of type <code>Any</code>). The value is\ncopied and therefore the variable carrying the value can be subsequently\nmodified without changing the output.</p>\n</blockquote>\n<p>A reactor receiving the class object message can subsequently access the object\nusing <code>&#x3C;port>.value</code>:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Print</span><span class=\"source-lf\">(expected(</span><span class=\"source-lf constant-numeric-int-lflang\">42</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> _in;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(_in) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Received: name = </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python storage-type-format-python\">:s</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">, value = </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python\">{</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python storage-type-format-python\">:d</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python meta-format-brace-python constant-character-format-placeholder-other-python\">}</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python constant-character-escape-python\">\\n</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">format</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">_in</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">name</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span>\n<span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">                                                             </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">_in</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p><strong>Note:</strong> The <code>hello</code> module has been imported using a top-level preamble, therefore, the contents of the module are available to all reactors defined in the current Lingua Franca file (similar situation arises if the <code>hello</code> class itself was in the top-level preamble).</p>\n</div>\n<div class=\"lf-ts\">\n<p>In the TypeScript target, all <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html\">TypeScript types</a> are generally acceptable for inputs and outputs with one notable exception:</p>\n<ul>\n<li><code>undefined</code> is not a valid type for an input, output, or action. This is because <code>undefined</code> is used to designate the absence of an input, output, or action during a reaction.</li>\n</ul>\n<p>As with parameters and state variables, custom types (and classes) must be defined in the <a href=\"#preamble\">preamble</a> before they may be used.</p>\n<p><strong>To benefit from type checking, you should declare types for your reactor elements.</strong> If a type isn’t declared for an input, output, or action, it is assigned the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> type <code>Present</code> which is defined as</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf\">export type Present </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> (number | string | boolean | symbol | object | null);</span>\n</pre>\n<p>In the body of a reaction in the TypeScript target, inputs are simply referred to by name. An input of type <code>t</code> is available within the body of a reaction as a local variable of type <code>t | undefined</code>. To determine whether an input is present, test the value of the input against <code>undefined</code>. An <code>undefined</code> input is not present.</p>\n<p><strong>WARNING</strong> Be sure to use the <code>===</code> or <code>!==</code> operator and not <code>==</code> or <code>!=</code> to test against <code>undefined</code>. In JavaScript/TypeScript the comparison <code>undefined == null</code> yields the value <code>true</code>. It may also be tempting to rely upon the falsy evaluation of <code>undefined</code> within an <code>if</code> statement, but this may introduce bugs. For example a reaction that tests the presence of input <code>x</code> with <code>if (x) { ... }</code> will not correctly identify potentially valid present values such as <code>0</code>, <code>false</code>, or <code>\"\"</code>.</p>\n<p>For example, the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/TypeScript/src/Determinism.lf\">Determinism.lf</a> test case includes the following reactor:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Destination</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> x:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> y:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x, y) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">sum</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts keyword-control-conditional-ts\">if</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">x</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-comparison-ts\">!==</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-language-undefined-ts\">undefined</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">sum</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts keyword-operator-assignment-compound-ts\">+=</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">x</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts keyword-control-conditional-ts\">if</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">y</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-comparison-ts\">!==</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-language-undefined-ts\">undefined</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">sum</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts keyword-operator-assignment-compound-ts\">+=</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">y</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Received </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">sum</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts keyword-control-conditional-ts\">if</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">sum</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-comparison-ts\">!=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">2</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-quoted-double-ts\">FAILURE: Expected 2.</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts entity-name-function-ts\">failure</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The reaction refers to the inputs <code>x</code> and <code>y</code> by name and tests for their presence by testing <code>x</code> and <code>y</code> against <code>undefined</code>. If a reaction is triggered by just one input, then normally it is not necessary to test for its presence. It will always be present. However TypeScript’s type system is not smart enough to know such an input will never have type <code>undefined</code> if there’s no test against <code>undefined</code> within the reaction. An explicit type annotation (for example <code>x = x as t;</code> where <code>t</code> is the type of the input) may be necessary to avoid type errors from the compiler. In the above example, there are two triggers, so the reaction has no assurance that both will be present.</p>\n<p>Inputs declared in the <strong>uses</strong> part of the reaction do not trigger the reaction. Consider this modification of the above reaction:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) y </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">sum</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts variable-other-readwrite-ts\">x</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-control-as-ts\">as</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts support-type-primitive-ts\">number</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts keyword-control-conditional-ts\">if</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">y</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-comparison-ts\">!==</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-language-undefined-ts\">undefined</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">sum</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts keyword-operator-assignment-compound-ts\">+=</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">y</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Received </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">sum</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">=}</span>\n</pre>\n<p>It is no longer necessary to test for the presence of <code>x</code> because that is the only trigger. The input <code>y</code>, however, may or may not be present at the logical time that this reaction is triggered. Hence, the code must test for its presence.</p>\n<p>The <strong>effects</strong> portion of the reaction specification can include outputs and actions. Actions will be described below. Like inputs, an output of type <code>t</code> is available within the body of a reaction as a local variable of type <code>t | undefined</code>. The local variable for each output is initialized to the output’s current value. Outputs are set by assigning a (non-<code>undefined</code>) value to its local variable (no changes will be made to an output if it has the value <code>undefined</code> at the end of a reaction). Whatever value an output’s local variable has at the end of the reaction will be set to that output. If an output’s local variable has the value <code>undefined</code> at the end of the reaction, that output will not be set and connected downstream inputs will be absent. For example, we can further modify the above example as follows:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> z:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) y </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> z </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">sum</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts variable-other-readwrite-ts\">x</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-control-as-ts\">as</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts support-type-primitive-ts\">number</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts keyword-control-conditional-ts\">if</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">y</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-comparison-ts\">!==</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-language-undefined-ts\">undefined</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">sum</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts keyword-operator-assignment-compound-ts\">+=</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">y</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">z</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">sum</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">=}</span>\n</pre>\n<p>If an output gets set more than once at any logical time, downstream reactors will see only the <em>final</em> value that is set. Since the order in which reactions of a reactor are invoked at a logical time is deterministic, and whether inputs are present depends only on their timestamps, the final value set for an output will also be deterministic.</p>\n<p>An output may even be set in different reactions of the same reactor at the same logical time. In this case, one reaction may wish to test whether the previously invoked reaction has set the output. It can do that using a <code>!== undefined</code> test for that output. For example, the following reactor will always produce the output 42:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">TestForPreviousOutput</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts keyword-control-conditional-ts\">if</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-constant-math-ts\">Math</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-math-ts\">random</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-relational-ts\">&gt;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts meta-delimiter-decimal-period-ts\">.</span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">5</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">out</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts constant-numeric-decimal-ts\">21</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">previous_output</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts variable-other-readwrite-ts\">out</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts keyword-control-conditional-ts\">if</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">previous_output</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">out</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts constant-numeric-decimal-ts\">2</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts keyword-operator-arithmetic-ts\">*</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">previous_output</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-control-conditional-ts\">else</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">out</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts constant-numeric-decimal-ts\">42</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The first reaction may or may not set the output to 21. The second reaction doubles the output if it has been previously produced and otherwise produces 42.</p>\n<h3 id=\"sending-and-receiving-custom-types\" style=\"position:relative;\"><a href=\"#sending-and-receiving-custom-types\" aria-label=\"sending and receiving custom types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sending and Receiving Custom Types</h3>\n<p>You can define your own data types in TypeScript and send and receive those. Consider the following example:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">CustomType</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-type-declaration-ts storage-type-type-ts\">type</span><span class=\"source-lf meta-embedded-block-ts meta-type-declaration-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-type-declaration-ts entity-name-type-alias-ts\">custom</span><span class=\"source-lf meta-embedded-block-ts meta-type-declaration-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-type-declaration-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-type-declaration-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-type-declaration-ts support-type-primitive-ts\">string</span><span class=\"source-lf meta-embedded-block-ts meta-type-declaration-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-type-declaration-ts keyword-operator-type-ts\">|</span><span class=\"source-lf meta-embedded-block-ts meta-type-declaration-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-type-declaration-ts support-type-builtin-ts\">null</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-lflang\">custom</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">out</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-language-null-ts\">null</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The <strong>preamble</strong> code defines a custom union type of <code>string</code> and <code>null</code>.</p>\n</div>\n<div class=\"lf-rs\">\n<p>Inputs and outputs in the Rust target are accessed using the <code>set</code> and <code>get</code> methods of the <code>ctx</code> objects, as shown in <a href=\"/docs/handbook/inputs-and-outputs\">Inputs and Outputs</a>.</p>\n</div>\n<h2 id=\"time\" style=\"position:relative;\"><a href=\"#time\" aria-label=\"time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Time</h2>\n<div class=\"lf-c\">\n<p>In the C target, the value of a time instant or interval is an integer specifying a number of nanoseconds. An instant is the number of nanoseconds that have elapsed since January 1, 1970. An interval is the difference between two instants. When an LF program starts executing, logical time is (normally) set to the instant provided by the operating system. (On some embedded platforms without real-time clocks, it will be set instead to zero.)</p>\n<p>Time in the C target is a <code>int64_t</code>, which is a 64-bit signed number. Since a 64-bit number has a limited range, this measure of time instants will overflow in approximately the year 2262. For better code clarity, two types are defined in <a href=\"https://github.com/lf-lang/reactor-c/blob/main/core/tag.h\">tag.h</a>, <code>instant_t</code> and <code>interval_t</code>, which you can use for time instants and intervals respectively. These are both equivalent to <code>int64_t</code>, but using those types will insulate your code against changes and platform-specific customizations.</p>\n<p>Lingua Franca uses a superdense model of time. A reaction is invoked at a logical <strong>tag</strong>, a struct consisting of a <code>time</code> value (an <code>instant_t</code>, which is a <code>int64_t</code>) and a <code>microstep</code> value (a <code>microstep_t</code>, which is an <code>uint32_t</code>). The tag is guaranteed to not increase during the execution of a reaction. Outputs produced by a reaction have the same tag as the inputs, actions, or timers that trigger the reaction, and hence are <strong>logically simultaneous</strong>.</p>\n<p>The time structs and functions for working with time are defined in <a href=\"https://github.com/lf-lang/reactor-c/blob/main/core/tag.h\">tag.h</a>. The most useful functions are:</p>\n<ul>\n<li><code>tag_t lf_tag()</code>: Get the current tag at which this reaction has been invoked.</li>\n<li><code>int lf_tag_compare(tag_t, tag_t)</code>: Compare two tags, returning -1, 0, or 1 for less than, equal, and greater than.</li>\n<li><code>instant_t lf_time_logical()</code>: Get the current logical time (the first part of the current tag).</li>\n<li><code>interval_t lf_time_logical_elapsed()</code>: Get the logical time elapsed since program start.</li>\n</ul>\n<p>There are also some useful functions for accessing physical time:</p>\n<ul>\n<li><code>instant_t lf_time_physical()</code>: Get the current physical time.</li>\n<li><code>instant_t lf_time_physical_elapsed()</code>: Get the physical time elapsed since program start.</li>\n<li><code>instant_t lf_time_start()</code>: Get the starting physical and logical time.</li>\n</ul>\n<p>The last of these is both a physical and logical time because, at the start of execution, the starting logical time is set equal to the current physical time as measured by a local clock.</p>\n<p>A reaction can examine the current logical time (which is constant during the execution of the reaction). For example, consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/GetTime.lf\">GetTime</a> example:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">GetTime</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">instant_t</span><span class=\"source-lf meta-embedded-block-c\"> logical </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_time_logical</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Logical time is </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%ld</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> logical</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>When executed, you will get something like this:</p>\n<pre class=\"source-lf language-text\">Start execution at time Sun Oct 13 10:18:36 2019\nplus 353609000 nanoseconds.\nLogical time is 1570987116353609000.\nLogical time is 1570987117353609000.\nLogical time is 1570987118353609000.\n...</pre>\n<p>The first two lines give the current time-of-day provided by the execution platform at the start of execution. This is used to initialize logical time. Subsequent values of logical time are printed out in their raw form, rather than the friendlier form in the first two lines. If you look closely, you will see that each number is one second larger than the previous number, where one second is 1000000000 nanoseconds.</p>\n<p>You can also obtain the <em>elapsed</em> logical time since the start of execution:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">GetTime</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">interval_t</span><span class=\"source-lf meta-embedded-block-c\"> elapsed </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_time_logical_elapsed</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Elapsed logical time is </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%ld</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> elapsed</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will produce:</p>\n<pre class=\"source-lf language-text\">Start execution at time Sun Oct 13 10:25:22 2019\nplus 833273000 nanoseconds.\nElapsed logical time is 0.\nElapsed logical time is 1000000000.\nElapsed logical time is 2000000000.\n...</pre>\n<p>You can also get physical time, which comes from your platform’s real-time clock:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">GetTime</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">instant_t</span><span class=\"source-lf meta-embedded-block-c\"> physical </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_time_physical</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Physical time is </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%ld</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> physical</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will produce something like this:</p>\n<pre class=\"source-lf language-text\">Start execution at time Sun Oct 13 10:35:59 2019\nplus 984992000 nanoseconds.\nPhysical time is 1570988159986108000.\nPhysical time is 1570988160990219000.\nPhysical time is 1570988161990067000.\n...</pre>\n<p>Finally, you can get elapsed physical time:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">GetTime</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">instant_t</span><span class=\"source-lf meta-embedded-block-c\"> elapsed_physical </span><span class=\"source-lf meta-embedded-block-c keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_time_physical_elapsed</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Elapsed physical time is </span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-other-placeholder\">%ld</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">.</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> elapsed_physical</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will produce something like this:</p>\n<pre class=\"source-lf language-text\">Elapsed physical time is 657000.\nElapsed physical time is 1001856000.\nElapsed physical time is 2004761000.\n...</pre>\n<p>Notice that these numbers are increasing by <em>roughly</em> one second each time. If you set the <code>fast</code> target parameter to <code>true</code>, then logical time will elapse much faster than physical time.</p>\n<p>Working with nanoseconds in C code can be tedious if you are interested in longer durations. For convenience, a set of macros are available to the C programmer to convert time units into the required nanoseconds. For example, you can specify 200 msec in C code as <code>MSEC(200)</code> or two weeks as <code>WEEKS(2)</code>. The provided macros are <code>NSEC</code>, <code>USEC</code> (for microseconds), <code>MSEC</code>, <code>SEC</code>, <code>MINUTE</code>, <code>HOUR</code>, <code>DAY</code>, and <code>WEEK</code>. You may also use the plural of any of these. Examples are given in the next section.</p>\n</div>\n<div class=\"lf-cpp\">\n<p>Timers are specified exactly as in the <a href=\"/docs/handbook/time-and-timers\">Time and Timers</a>. When working with time in the C++ code body of a reaction, however, you will need to know a bit about its internal representation.</p>\n<p>The reactor-cpp library uses <a href=\"https://en.cppreference.com/w/cpp/chrono\"><code>std::chrono</code></a> for representing time. Specifically, the library defines two types for representing durations and timepoints: <code>reactor::Duration</code> and <code>reactor::TimePoint</code>. <code>reactor::Duration</code> is an alias for <a href=\"https://en.cppreference.com/w/cpp/chrono/duration\"><code>std::chrono::nanosecods</code></a>. <code>reactor::TimePoint</code> is alias for <a href=\"https://en.cppreference.com/w/cpp/chrono/time_point\"><code>std::chrono::time_point&#x3C;std::chrono::system_clock, std::chrono::nanoseconds></code></a>. As you can see from these definitions, the smallest time step that can be represented is one nanosecond. Note that <code>reactor::TimePoint</code> describes a specific point in time and is associated with a specific clock, whereas <code>reactor::Duration</code> defines a time interval between two time points.</p>\n<p>Lingua Franca uses a superdense model of logical time. A reaction is invoked at a logical <strong>tag</strong>. In the C++ library, a tag is represented by the class <code>reactor::Tag</code>. In essence, this class is a tuple of a <code>reactor::TimePoint</code> representing a specific point in logical time and a microstep value (of type <code>reactor::mstep_t</code>, which is an alias for <code>unsigned long</code>). <code>reactor::Tag</code> provides two methods for getting the time point or the microstep:</p>\n<pre class=\"source-lf language-cpp\"><span class=\"source-cpp meta-function-definition-cpp storage-modifier-const-cpp\">const</span><span class=\"source-cpp meta-function-definition-cpp\"> </span><span class=\"source-cpp meta-function-definition-cpp meta-qualified_type-cpp entity-name-type-cpp\">TimePoint</span><span class=\"source-cpp meta-function-definition-cpp storage-modifier-reference-cpp\">&amp;</span><span class=\"source-cpp meta-function-definition-cpp\"> </span><span class=\"source-cpp meta-function-definition-cpp meta-head-function-definition-cpp entity-name-function-definition-cpp\">time_point</span><span class=\"source-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-parameters-begin-bracket-round-cpp\">(</span><span class=\"source-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-parameters-end-bracket-round-cpp\">)</span><span class=\"source-cpp meta-function-definition-cpp meta-head-function-definition-cpp\"> </span><span class=\"source-cpp meta-function-definition-cpp meta-head-function-definition-cpp storage-modifier-specifier-functional-post-parameters-const-cpp\">const</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-cpp meta-function-definition-cpp storage-modifier-const-cpp\">const</span><span class=\"source-cpp meta-function-definition-cpp\"> </span><span class=\"source-cpp meta-function-definition-cpp meta-qualified_type-cpp support-type-posix-reserved-cpp support-type-built-in-posix-reserved-cpp\">mstep_t</span><span class=\"source-cpp meta-function-definition-cpp storage-modifier-reference-cpp\">&amp;</span><span class=\"source-cpp meta-function-definition-cpp\"> </span><span class=\"source-cpp meta-function-definition-cpp meta-head-function-definition-cpp entity-name-function-definition-cpp\">micro_step</span><span class=\"source-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-parameters-begin-bracket-round-cpp\">(</span><span class=\"source-cpp meta-function-definition-cpp meta-head-function-definition-cpp punctuation-section-parameters-end-bracket-round-cpp\">)</span><span class=\"source-cpp meta-function-definition-cpp meta-head-function-definition-cpp\"> </span><span class=\"source-cpp meta-function-definition-cpp meta-head-function-definition-cpp storage-modifier-specifier-functional-post-parameters-const-cpp\">const</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n</pre>\n<p>The C++ code in reaction bodies has access to library functions that allow to retrieve the current logical or physical time:</p>\n<ul>\n<li><code>TimePoint get_physical_time()</code>: Get the current physical time.</li>\n<li><code>TimePoint get_logcial_time()</code>: Get the current logical time.</li>\n<li><code>Duration get_elapsed_physical_time()</code>: Get the physical time elapsed since program start.</li>\n<li><code>Duration get_elapsed_logical_time()</code>: Get the logical time elapsed since program start.</li>\n</ul>\n<p>A reaction can examine the current logical time (which is constant during the execution of the reaction). For example, consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/GetTime.lf\">GetTime</a> example:</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> logical </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">get_logical_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Logical time is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> logical </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Note that the <code>&#x3C;&#x3C;</code> operator is overloaded for both <code>reactor::TimePoint</code> and <code>reactor::Duration</code> and will print the time information accordingly.</p>\n<p>When executing the above program, you will see something like this:</p>\n<pre class=\"source-lf language-text\">[INFO]  Starting the execution\nLogical time is 2021-05-19 14:06:09.496828396\nLogical time is 2021-05-19 14:06:10.496828396\nLogical time is 2021-05-19 14:06:11.496828396\nLogical time is 2021-05-19 14:06:11.496828396\n...</pre>\n<p>If you look closely, you will see that each printed logical time is one second larger than the previous one.</p>\n<p>You can also obtain the <em>elapsed</em> logical time since the start of execution:</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">get_elapsed_logical_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Elapsed logical time is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">In seconds: </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\">  </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-function-call-cpp\">chrono</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-function-call-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">duration_cast</span><span class=\"source-lf meta-embedded-block-cpp meta-template-call-cpp meta-template-call-cpp punctuation-section-angle-brackets-begin-template-call-cpp\">&lt;</span><span class=\"source-lf meta-embedded-block-cpp meta-template-call-cpp meta-template-call-cpp entity-name-scope-resolution-template-call-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp meta-template-call-cpp meta-template-call-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-template-call-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-template-call-cpp meta-template-call-cpp entity-name-scope-resolution-template-call-cpp\">chrono</span><span class=\"source-lf meta-embedded-block-cpp meta-template-call-cpp meta-template-call-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-template-call-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp meta-template-call-cpp meta-template-call-cpp meta-qualified_type-cpp entity-name-type-cpp\">seconds</span><span class=\"source-lf meta-embedded-block-cpp meta-template-call-cpp meta-template-call-cpp punctuation-section-angle-brackets-end-template-call-cpp\">&gt;</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp\">elapsed</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Using <code>std::chrono</code> it is also possible to convert between time units and directly print the number of elapsed seconds as seen above. The resulting output of this program will be:</p>\n<pre class=\"source-lf language-text\">[INFO]  Starting the execution\nElapsed logical time is 0 nsecs\nIn seconds: 0 secs\nElapsed logical time is 1000000000 nsecs\nIn seconds: 1 secs\nElapsed logical time is 2000000000 nsecs\nIn seconds: 2 secs\n...</pre>\n<p>You can also get physical and elapsed physical time:</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">\t</span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> logical </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">get_logical_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> physical </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">get_physical_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">\t\t</span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">get_elapsed_physical_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Physical time is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> physical </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Elapsed physical time is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Time lag is </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> physical </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-cpp\">-</span><span class=\"source-lf meta-embedded-block-cpp\"> logical </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">   </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Notice that the physical times are increasing by <em>roughly</em> one second in each reaction. The output also shows the lag between physical and logical time. If you set the <code>fast</code> target parameter to <code>true</code>, then physical time will elapse much faster than logical time. The above program will produce something like this:</p>\n<pre class=\"source-lf language-text\">[INFO]  Starting the execution\nPhysical time is 2021-05-19 14:25:18.070523014\nElapsed physical time is 2601601 nsecs\nTime lag is 2598229 nsecs\nPhysical time is 2021-05-19 14:25:19.068038275\nElapsed physical time is 1000113888 nsecs\nTime lag is 113490 nsecs\n[INFO]  Physical time is Terminating the execution\n2021-05-19 14:25:20.068153026\nElapsed physical time is 2000228689 nsecs\nTime lag is 228241 nsecs</pre>\n<p>For specifying time durations in code <a href=\"https://en.cppreference.com/w/cpp/header/chrono\">chrono</a> provides convenient literal operators in <code>std::chrono_literals</code>. This namespace is automatically included for all reaction bodies. Thus, we can simply write:</p>\n<pre class=\"source-lf language-cpp\"><span class=\"source-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-cpp\">cout </span><span class=\"source-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-cpp\"> </span><span class=\"source-cpp constant-numeric-decimal-cpp\">42</span><span class=\"source-cpp keyword-other-unit-user-defined-cpp\">us</span><span class=\"source-cpp\"> </span><span class=\"source-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-cpp\"> </span><span class=\"source-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-cpp\">endl</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-cpp\">cout </span><span class=\"source-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-cpp\"> </span><span class=\"source-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-cpp keyword-other-unit-user-defined-cpp\">ms</span><span class=\"source-cpp\"> </span><span class=\"source-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-cpp\"> </span><span class=\"source-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-cpp\">endl</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-cpp\">cout </span><span class=\"source-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-cpp\"> </span><span class=\"source-cpp constant-numeric-decimal-cpp\">3</span><span class=\"source-cpp keyword-other-unit-user-defined-cpp\">s</span><span class=\"source-cpp\"> </span><span class=\"source-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-cpp\"> </span><span class=\"source-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-cpp\">endl</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n</pre>\n<p>which prints:</p>\n<pre class=\"source-lf language-text\">42 usecs\n1 msecs\n3 secs</pre>\n</div>\n<div class=\"lf-py\">\n<p>Timers are specified exactly as in the <a href=\"/docs/handbook/time-and-timers\">Time and Timers</a>. When working with time in the Python code body of a reaction, however, you will need to know a bit about its internal representation.</p>\n<p>In the Python target, similar to the C target, the value of a time instant or\ninterval is an integer specifying a number of nanoseconds. An instant is the\nnumber of nanoseconds that have elapsed since January 1, 1970. An interval is\nthe difference between two instants.</p>\n<p>The functions for working with time and tags are:</p>\n<ul>\n<li><code>lf.tag() -> Tag</code>: Returns a Tag instance of the current tag at which this reaction has been invoked.</li>\n<li><code>lf.tag_compare(Tag, Tag) -> int</code>: Compare two <code>Tag</code> instances, returning -1, 0, or 1 for less than, equal, and greater than. <code>Tag</code>s can also be compared using rich comparators (ex. <code>&#x3C;</code>, <code>></code>, <code>==</code>), which returns <code>True</code> or <code>False</code>.</li>\n<li><code>lf.time.logical() -> int</code>: Get the current logical time (the first part of the current tag).</li>\n<li><code>lf.time.logical_elapsed() -> int</code>: Get the logical time elapsed since program start.</li>\n</ul>\n<p><code>Tag</code>s can be initialized using <code>Tag(time=some_number, microstep=some_other_number)</code>.</p>\n<p>There are also some useful functions for accessing physical time:</p>\n<ul>\n<li><code>lf.time.physical() -> int</code>: Get the current physical time.</li>\n<li><code>lf.time.physical_elapsed() -> int</code>: Get the physical time elapsed since program start.</li>\n<li><code>lf.time.start() -> int</code>: Get the starting physical and logical time.</li>\n</ul>\n<p>The last of these is both a physical and a logical time because, at the start of execution, the starting logical time is set equal to the current physical time as measured by a local clock.</p>\n<p>A reaction can examine the current logical time (which is constant during the execution of the reaction). For example, consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/GetTime.lf\">GetTime.lf</a> example:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">GetTime</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">logical</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">lf</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">logical</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Logical time is </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">logical</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>When executed, you will get something like this:</p>\n<pre class=\"source-lf language-text\">---- Start execution at time Thu Nov  5 08:51:02 2020\n---- plus 864237900 nanoseconds.\nLogical time is  1604587862864237900\nLogical time is  1604587863864237900\nLogical time is  1604587864864237900\n...</pre>\n<p>The first two lines give the current time-of-day provided by the execution platform at the start of execution. This is used to initialize logical time. Subsequent values of logical time are printed out in their raw form, rather than the friendlier form in the first two lines. If you look closely, you will see that each number is one second larger than the previous number, where one second is 1000000000 nanoseconds.</p>\n<p>You can also obtain the <em>elapsed</em> logical time since the start of execution:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">GetTime</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">elapsed</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">lf</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">logical_elapsed</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Elapsed logical time is </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">elapsed</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will produce:</p>\n<pre class=\"source-lf language-text\">---- Start execution at time Thu Nov  5 08:51:02 2020\n---- plus 864237900 nanoseconds.\nElapsed logical time is  0\nElapsed logical time is  1000000000\nElapsed logical time is  2000000000\n...</pre>\n<p>You can also get physical time, which comes from your platform’s real-time clock:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">GetTime</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">physical</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">lf</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">physical</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Physical time is </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">physical</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will produce something like this:</p>\n<pre class=\"source-lf language-text\">---- Start execution at time Thu Nov  5 08:51:02 2020\n---- plus 864237900 nanoseconds.\nPhysical time is  1604587862864343500\nPhysical time is  1604587863864401900\nPhysical time is  1604587864864395200\n...</pre>\n<p>Finally, you can get elapsed physical time:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">GetTime</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">elapsed_physical</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">lf</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">time</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">physical_elapsed</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Elapsed physical time is </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">elapsed_physical</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will produce something like this:</p>\n<pre class=\"source-lf language-text\">---- Start execution at time Thu Nov  5 08:51:02 2020\n---- plus 864237900 nanoseconds.\nElapsed physical time is  110200\nElapsed physical time is  1000185400\nElapsed physical time is  2000178600\n...</pre>\n<p>Notice that these numbers are increasing by roughly one second each time. If you set the <code>fast</code> target parameter to <code>true</code>, then logical time will elapse much faster than physical time.</p>\n<p>Working with nanoseconds in the Python code can be tedious if you are interested in longer durations. For convenience, a set of functions are available to the Python programmer to convert time units into the required nanoseconds. For example, you can specify 200 msec in Python code as <code>MSEC(200)</code> or two weeks as <code>WEEKS(2)</code>. The provided functions are <code>NSEC</code>, <code>USEC</code> (for microseconds), <code>MSEC</code>, <code>SEC</code>, <code>MINUTE</code>, <code>HOUR</code>, <code>DAY</code>, and <code>WEEK</code>. You may also use the plural of any of these. Examples are given in the next section.</p>\n</div>\n<div class=\"lf-ts\">\n<p>See <a href=\"#summary-of-time-functions\">Summary of Time Functions</a> and <a href=\"#utility-function-reference\">Utility Function Reference</a> for a quick API reference.</p>\n<p>Timers are specified exactly as in the <a href=\"/docs/handbook/time-and-timers\">Time and Timers</a> section. When working with time in the TypeScript code body of a reaction, however, you will need to know a bit about its internal representation.</p>\n<p>A <code>TimeValue</code> is an class defined in the TypeScript target library file <code>time.ts</code> to represent a time instant or interval. For your convenience <code>TimeValue</code> and other classes from the <code>time.ts</code> library mentioned in these instructions are automatically imported into scope of your reactions. An instant is the number of nanoseconds that have elapsed since January 1, 1970. An interval is the difference between two instants. When an LF program starts executing, logical time is (normally) set to the instant provided by the operating system. (On some embedded platforms without real-time clocks, it will be set instead to zero.)</p>\n<p>Internally a <code>TimeValue</code> uses two numbers to represent the time. To prevent overflow (which would occur for time intervals spanning more than 0.29 years if a single JavaScript number, which has 2^53 bits of precision, were to be used), we use <em>two</em> numbers to store a time value. The first number denotes the number of whole seconds in the interval or instant; the second number denotes the remaining number of nanoseconds in the interval or instant. The first number represents the number of seconds, the second number represents the number of nanoseconds. These fields are not accessible to the programmer, instead <code>TimeValue</code>s may be manipulated by an <a href=\"#summary-of-time-functions\">API</a> with functions for addition, subtraction, and comparison.</p>\n<p>A reaction can examine the current logical time (which is constant during the execution of the reaction). For example, consider:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">GetTime</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">logical</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts keyword-operator-type-annotation-ts\">:</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts entity-name-type-ts\">TimeValue</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts entity-name-function-ts\">getCurrentLogicalTime</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Logical time is </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">logical</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>When executed, you will get something like this:</p>\n<pre class=\"source-lf language-text\">Logical time is (1584666585 secs; 805146880 nsecs).\nLogical time is (1584666586 secs; 805146880 nsecs).\nLogical time is (1584666587 secs; 805146880 nsecs).\n...</pre>\n<p>Subsequent values of logical time are printed out in their raw form, of seconds and nanoseconds. If you look closely, you will see that each number is one second larger than the previous number.</p>\n<p>You can also obtain the <em>elapsed</em> logical time since the start of execution, rather than exact logical time:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">GetTime</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">logical</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts keyword-operator-type-annotation-ts\">:</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts entity-name-type-ts\">TimeValue</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts entity-name-function-ts\">getElapsedLogicalTime</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Logical time is </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">logical</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will produce:</p>\n<pre class=\"source-lf language-text\">Logical time is (0 secs; 0 nsecs).\nLogical time is (1 secs; 0 nsecs).\nLogical time is (2 secs; 0 nsecs).\n...</pre>\n<p>You can get physical time, which comes from your platform’s real-time clock:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">GetTime</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">physical</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts keyword-operator-type-annotation-ts\">:</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts entity-name-type-ts\">TimeValue</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts entity-name-function-ts\">getCurrentPhysicalTime</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Physical time is </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">physical</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will produce something like this:</p>\n<pre class=\"source-lf language-text\">Physical time is (1584666801 secs; 644171008 nsecs).\nPhysical time is (1584666802 secs; 642269952 nsecs).\nPhysical time is (1584666803 secs; 642278912 nsecs).\n...</pre>\n<p>Notice that these numbers are increasing by <em>roughly</em> one second each time.</p>\n<p>You can also get <em>elapsed</em> physical time from the start of execution:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">GetTime</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">physical</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts keyword-operator-type-annotation-ts\">:</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts entity-name-type-ts\">TimeValue</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts entity-name-function-ts\">getElapsedPhysicalTime</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Physical time is </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">physical</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will produce something like:</p>\n<pre class=\"source-lf language-text\">Physical time is (0 secs; 2260992 nsecs).\nPhysical time is (1 secs; 166912 nsecs).\nPhysical time is (2 secs; 136960 nsecs).\n...</pre>\n<p>You can create a <code>TimeValue</code> yourself with the <code>UnitBasedTimeValue</code> class. <code>UnitBasedTimeValue</code> is a subclass of <code>TimeValue</code> and can be used wherever you could also use a <code>TimeValue</code> directly obtained from one of the <code>util</code> functions. A <code>UnitBasedTimeValue</code> is constructed with a whole number and a <code>TimeUnit</code>. A <code>TimeUnit</code> is an enum from the <code>time.ts</code> library with convenient labels for common time units. These are nsec, usec, msec, sec (or secs), minute (or minutes), hour (or hours), day (or days), and week (or weeks).</p>\n<p>This reactor has an example of a UnitBasedTimeValue.</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">GetTime</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">myTimeValue</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts keyword-operator-type-annotation-ts\">:</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts entity-name-type-ts\">TimeValue</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts new-expr-ts keyword-operator-new-ts\">new</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts new-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts new-expr-ts meta-function-call-ts entity-name-function-ts\">UnitBasedTimeValue</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts new-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts new-expr-ts constant-numeric-decimal-ts\">200</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts new-expr-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts new-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts new-expr-ts variable-other-object-ts\">TimeUnit</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts new-expr-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts new-expr-ts variable-other-property-ts\">msec</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts new-expr-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">logical</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts keyword-operator-type-annotation-ts\">:</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts entity-name-type-ts\">TimeValue</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts entity-name-function-ts\">getCurrentLogicalTime</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">My custom time value is </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">myTimeValue</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n</pre>\n<p>This will produce:</p>\n<pre class=\"source-lf language-text\">My custom time value is 200 msec.\nMy custom time value is 200 msec.\nMy custom time value is 200 msec.\n...</pre>\n<h3 id=\"tags\" style=\"position:relative;\"><a href=\"#tags\" aria-label=\"tags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tags</h3>\n<p>The TypeScript target provides a utility to get the current <code>Tag</code> of a reaction. Recall that time in Lingua Franca is superdense and each <code>TimeValue </code>is paired with an integer “microstep” index to track the number of iterations at a particular <code>TimeValue</code>. A <code>Tag</code> is this combination of a TimeValue and a “microstep”. The <code>time.ts</code> library provides functions for adding, subtracting, and comparing <code>Tag</code>s.</p>\n<p>You can get the current <code>Tag</code> in your reactions. This example illustrates tags with a <a href=\"#zero-delay-actions\">Zero-Delay Action</a>:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">GetTime</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, </span><span class=\"source-lf constant-numeric-int-lflang\">1</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">sec</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">superdense</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts keyword-operator-type-annotation-ts\">:</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts entity-name-type-ts\">Tag</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts entity-name-function-ts\">getCurrentTag</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">First iteration - the tag is: </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">superdense</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-ts\">actions</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-property-ts\">a</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts entity-name-function-ts\">schedule</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">0</span><span class=\"source-lf meta-embedded-block-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-language-null-ts\">null</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">superdense</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts keyword-operator-type-annotation-ts\">:</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts entity-name-type-ts\">Tag</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts entity-name-function-ts\">getCurrentTag</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">timePart</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts keyword-operator-type-annotation-ts\">:</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts entity-name-type-ts\">TimeValue</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts variable-other-object-ts\">superdense</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts variable-other-property-ts\">time</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">microstepPart</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts keyword-operator-type-annotation-ts\">:</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts support-type-primitive-ts\">number</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts variable-other-object-ts\">superdense</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts variable-other-property-ts\">microstep</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Second iteration - the time part of the tag is:  </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">timePart</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Second iteration - the microstep part of the tag is:  </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">microstepPart</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This will produce:</p>\n<pre class=\"source-lf language-text\">First iteration - the tag is: ((1584669987 secs; 740464896 nsecs), 0).\nSecond iteration - the time part of the tag is:  (1584669987 secs; 740464896 nsecs).\nSecond iteration - the microstep part of the tag is:  1.\nFirst iteration - the tag is: ((1584669988 secs; 740464896 nsecs), 0).\nSecond iteration - the time part of the tag is:  (1584669988 secs; 740464896 nsecs).\nSecond iteration - the microstep part of the tag is:  1.\nFirst iteration - the tag is: ((1584669989 secs; 740464896 nsecs), 0).\nSecond iteration - the time part of the tag is:  (1584669989 secs; 740464896 nsecs).\nSecond iteration - the microstep part of the tag is:  1.\n...</pre>\n<p>The first reaction prints the “First iteration” part of the output at microstep 0. The second reaction occurs one microstep later (explained in <a href=\"#scheduling-delayed-reactions\">Scheduling Delayed Reactions</a>) and illustrates how to split a <code>Tag</code> into its constituent <code>TimeValue</code> and microstep.</p>\n<h3 id=\"summary-of-time-functions\" style=\"position:relative;\"><a href=\"#summary-of-time-functions\" aria-label=\"summary of time functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary of Time Functions</h3>\n<p>See <a href=\"#timed-behavior\">Time</a>. These time functions are defined in the <a href=\"https://github.com/lf-lang/reactor-ts/blob/master/src/core/time.ts\">time.ts</a> library of <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a>.</p>\n<p><code>UnitBasedTimeValue(value: number, unit:TimeUnit)</code> Constructor for <code>UnitBasedTimeValue</code>, a programmer-friendly subclass of TimeValue. Use a number and a <code>TimeUnit</code> enum.</p>\n<pre class=\"source-lf language-ts\"><span class=\"source-ts meta-enum-declaration-ts storage-type-enum-ts\">enum</span><span class=\"source-ts meta-enum-declaration-ts\"> </span><span class=\"source-ts meta-enum-declaration-ts entity-name-type-enum-ts\">TimeUnit</span><span class=\"source-ts meta-enum-declaration-ts\"> </span><span class=\"source-ts meta-enum-declaration-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-ts meta-enum-declaration-ts\">  </span><span class=\"source-ts meta-enum-declaration-ts variable-other-enummember-ts\">nsec</span><span class=\"source-ts meta-enum-declaration-ts punctuation-separator-comma-ts\">,</span>\n<span class=\"source-ts meta-enum-declaration-ts\">  </span><span class=\"source-ts meta-enum-declaration-ts variable-other-enummember-ts\">usec</span><span class=\"source-ts meta-enum-declaration-ts punctuation-separator-comma-ts\">,</span>\n<span class=\"source-ts meta-enum-declaration-ts\">  </span><span class=\"source-ts meta-enum-declaration-ts variable-other-enummember-ts\">msec</span><span class=\"source-ts meta-enum-declaration-ts punctuation-separator-comma-ts\">,</span>\n<span class=\"source-ts meta-enum-declaration-ts\">  </span><span class=\"source-ts meta-enum-declaration-ts variable-other-enummember-ts\">sec</span><span class=\"source-ts meta-enum-declaration-ts punctuation-separator-comma-ts\">,</span>\n<span class=\"source-ts meta-enum-declaration-ts\">  </span><span class=\"source-ts meta-enum-declaration-ts variable-other-enummember-ts\">secs</span><span class=\"source-ts meta-enum-declaration-ts punctuation-separator-comma-ts\">,</span>\n<span class=\"source-ts meta-enum-declaration-ts\">  </span><span class=\"source-ts meta-enum-declaration-ts variable-other-enummember-ts\">minute</span><span class=\"source-ts meta-enum-declaration-ts punctuation-separator-comma-ts\">,</span>\n<span class=\"source-ts meta-enum-declaration-ts\">  </span><span class=\"source-ts meta-enum-declaration-ts variable-other-enummember-ts\">minutes</span><span class=\"source-ts meta-enum-declaration-ts punctuation-separator-comma-ts\">,</span>\n<span class=\"source-ts meta-enum-declaration-ts\">  </span><span class=\"source-ts meta-enum-declaration-ts variable-other-enummember-ts\">hour</span><span class=\"source-ts meta-enum-declaration-ts punctuation-separator-comma-ts\">,</span>\n<span class=\"source-ts meta-enum-declaration-ts\">  </span><span class=\"source-ts meta-enum-declaration-ts variable-other-enummember-ts\">hours</span><span class=\"source-ts meta-enum-declaration-ts punctuation-separator-comma-ts\">,</span>\n<span class=\"source-ts meta-enum-declaration-ts\">  </span><span class=\"source-ts meta-enum-declaration-ts variable-other-enummember-ts\">day</span><span class=\"source-ts meta-enum-declaration-ts punctuation-separator-comma-ts\">,</span>\n<span class=\"source-ts meta-enum-declaration-ts\">  </span><span class=\"source-ts meta-enum-declaration-ts variable-other-enummember-ts\">days</span><span class=\"source-ts meta-enum-declaration-ts punctuation-separator-comma-ts\">,</span>\n<span class=\"source-ts meta-enum-declaration-ts\">  </span><span class=\"source-ts meta-enum-declaration-ts variable-other-enummember-ts\">week</span><span class=\"source-ts meta-enum-declaration-ts punctuation-separator-comma-ts\">,</span>\n<span class=\"source-ts meta-enum-declaration-ts\">  </span><span class=\"source-ts meta-enum-declaration-ts variable-other-enummember-ts\">weeks</span><span class=\"source-ts meta-enum-declaration-ts punctuation-separator-comma-ts\">,</span>\n<span class=\"source-ts meta-enum-declaration-ts punctuation-definition-block-ts\">}</span>\n</pre>\n<p><code>TimeValue.add(other: TimeValue): TimeValue</code> Adds <code>this</code> to <code>other</code>.</p>\n<p><code>TimeValue.subtract(other: TimeValue): TimeValue</code> Subtracts <code>other</code> from <code>this</code>. A negative result is an error.</p>\n<p><code>TimeValue.difference(other: TimeValue): TimeValue</code> Obtain absolute value of <code>other</code> minus <code>this</code>.</p>\n<p><code>TimeValue.isEqualTo(other: TimeValue): boolean</code> Returns true if <code>this</code> and <code>other</code> represents the same TimeValue. Otherwise false.</p>\n<p><code>TimeValue.isZero(): boolean</code> Returns true if <code>this</code> represents a 0 TimeValue.</p>\n<p><code>TimeValue.isEarlierThan(other: TimeValue): boolean</code> Returns true if <code>this</code> &#x3C; <code>other</code>. Otherwise false.</p>\n<p><code>Tag.isSmallerThan(other: Tag): boolean</code> Returns true if <code>this</code> &#x3C; <code>other</code>. Otherwise false.</p>\n<p><code>Tag.isSimultaneousWith(other: Tag): boolean</code> Returns true if <code>this</code> and <code>other</code> represents the same Tag. Otherwise false.</p>\n<p><code>Tag.getLaterTag(delay: TimeValue): Tag</code> Returns a tag with the time part of this TimeValue incremented by delay.</p>\n<p><code>Tag.getMicroStepLater(): Tag</code> Returns a tag with the microstep part of this TimeValue incremented by 1.</p>\n<p><code>getTimeDifference(other: Tag): TimeValue</code> Returns a TimeValue that represents the absolute (i.e., positive) time difference between <code>this</code> and <code>other</code>.</p>\n</div>\n<div class=\"lf-rs\">\n<p><span class=\"warning\">FIXME: details needed here on time in Rust.</span></p>\n</div>\n<h2 id=\"actions\" style=\"position:relative;\"><a href=\"#actions\" aria-label=\"actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions</h2>\n<div class=\"lf-c\">\n<p>Actions are described in <a href=\"/docs/handbook/actions\">Actions</a>. If an action is declared with a data type, then it can carry a <strong>value</strong>, a data value that becomes available to any reaction triggered by the action. This is particularly useful for physical actions that are externally triggered because it enables the action to convey information to the reactor. This could be, for example, the body of an incoming network message or a numerical reading from a sensor.</p>\n<p>Recall from <a href=\"/docs/handbook/composing-reactors\">Composing Reactors</a> that the $after$ keyword on a connection between ports introduces a logical delay. This is actually implemented using a logical action. We illustrate how this is done using the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/DelayInt.lf\">DelayInt</a> example:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">DelayInt</span><span class=\"source-lf\">(delay:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> in:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> d:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(d) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">d</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(in) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> d </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_schedule_int</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">d</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">delay</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Using this reactor as follows</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">delay</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Delay</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">source</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">delay</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">in</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">delay</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">in</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">sink</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span>\n</pre>\n<p>is equivalent to</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">source</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">sink</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">in</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">after</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span>\n</pre>\n<p>(except that our <code>DelayInt</code> reactor will only work with data type <code>int</code>).</p>\n<p>In the <code>Delay</code> reactor, the action <code>d</code> is specified with a type <code>int</code>. The reaction to the input <code>in</code> declares as its effect the action <code>d</code>. This declaration makes it possible for the reaction to schedule a future triggering of <code>d</code>. The reaction uses one of several variants of the <strong>lf_schedule</strong> function, namely <strong>lf_schedule_int</strong>, a convenience function provided because integer payloads on actions are very common. We will see below, however, that payloads can have any data type.</p>\n<p>The first reaction declares that it is triggered by <code>d</code> and has effect <code>out</code>. To\nread the value, it uses the <code>d->value</code> variable. Because this reaction is first,\nthe <code>out</code> at any logical time can be produced before the input <code>in</code> is even\nknown to be present. Hence, this reactor can be used in a feedback loop, where\n<code>out</code> triggers a downstream reactor to send a message back to <code>in</code> of this same\nreactor. If the reactions were given in the opposite order, there would be a\ncausality loop and compilation would fail.</p>\n<p>If you are not sure whether an action carries a value, you can test for it as follows:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(d) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">d</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">has_value</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\">out</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-object-access-cpp\">d</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-c meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n</pre>\n<p>It is possible to both be triggered by and schedule an action in the same\nreaction. For example, the\nfollowing <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/CountSelf.lf\">CountSelf</a>\nreactor will produce a counting sequence after it is triggered the first time:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">CountSelf</span><span class=\"source-lf\">(delay:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a, out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_schedule_int</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">a</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">delay</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a, out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_schedule_int</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">a</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">delay</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-cpp\">+</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Of course, to produce a counting sequence, it would be more efficient to use a state variable.</p>\n</div>\n<div class=\"lf-cpp\">\n<p>The C++ provides a simple interface for scheduling actions via a <code>schedule()</code> method. Actions are described in the <a href=\"/docs/handbook/actions\">Actions</a> document. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/Schedule.lf\">Schedule</a> reactor:</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Schedule</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">\t</span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> x:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">         </span><span class=\"source-lf meta-embedded-block-cpp storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">auto</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed_time </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-assignment-cpp\">=</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">get_elapsed_logical_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">         </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Action triggered at logical time </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">elapsed_time</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">count</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span>\n<span class=\"source-lf meta-embedded-block-cpp\">                  </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\"> after start</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span><span class=\"source-lf meta-embedded-block-cpp\"> elapsed_time)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">schedule</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">200</span><span class=\"source-lf meta-embedded-block-cpp keyword-other-unit-user-defined-cpp\">ms</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>When this reactor receives an input <code>x</code>, it calls <code>schedule()</code> on the action <code>a</code>, specifying a logical time offset of 200 milliseconds. The action <code>a</code> will be triggered at a logical time 200 milliseconds after the arrival of input <code>x</code>. At that logical time, the second reaction will trigger and will use the <code>get_elapsed_logical_time()</code> function to determine how much logical time has elapsed since the start of execution.</p>\n<p>Notice that after the logical time offset of 200 msec, there may be another input <code>x</code> simultaneous with the action <code>a</code>. Because the reaction to <code>a</code> is given first, it will execute first. This becomes important when such a reactor is put into a feedback loop (see below).</p>\n<p>Physical actions work exactly as described in the <a href=\"/docs/handbook/actions#physical-actions\">Physical Actions</a> section.</p>\n<h3 id=\"zero-delay-actions\" style=\"position:relative;\"><a href=\"#zero-delay-actions\" aria-label=\"zero delay actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Zero-Delay Actions</h3>\n<p>If the specified delay in a <code>schedule()</code> is omitted or is zero, then the action <code>a</code> will be triggered one <strong>microstep</strong> later in <strong>superdense time</strong> (see <a href=\"/docs/handbook/superdense-time\">Superdense Time</a>). Hence, if the input <code>x</code> arrives at metric logical time <em>t</em>, and you call <code>schedule()</code> in one of the following ways:</p>\n<pre class=\"source-lf language-cpp\"><span class=\"source-cpp variable-other-object-access-cpp\">a</span><span class=\"source-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-cpp entity-name-function-member-cpp\">schedule</span><span class=\"source-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-cpp variable-other-object-access-cpp\">a</span><span class=\"source-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-cpp entity-name-function-member-cpp\">schedule</span><span class=\"source-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-cpp keyword-other-unit-user-defined-cpp\">s</span><span class=\"source-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-cpp variable-other-object-access-cpp\">a</span><span class=\"source-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-cpp entity-name-function-member-cpp\">schedule</span><span class=\"source-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-cpp entity-name-scope-resolution-function-call-cpp\">reactor</span><span class=\"source-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-function-call-cpp\">::</span><span class=\"source-cpp entity-name-scope-resolution-function-call-cpp\">Duration</span><span class=\"source-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-function-call-cpp\">::</span><span class=\"source-cpp entity-name-function-call-cpp\">zero</span><span class=\"source-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n</pre>\n<p>then when the reaction to <code>a</code> is triggered, the input <code>x</code> will be absent (it was present at the <em>previous</em> microstep). The reaction to <code>x</code> and the reaction to <code>a</code> occur at the same metric time <em>t</em>, but separated by one microstep, so these two reactions are <em>not</em> logically simultaneous.</p>\n<p>As discussed above the he metric time is visible to the programmer and can be obtained in a reaction using either <code>get_elapsed_logical_time()</code> or <code>get_logical_time()</code>.</p>\n<p>As described in the <a href=\"/docs/handbook/actions\">Action</a> document, action declarations can have a <em>min_delay</em> parameter. This modifies the timestamp further. Also, the action declaration may be <strong>physical</strong> rather than <strong>logical</strong>, in which case, the assigned timestamp will depend on the physical clock of the executing platform.</p>\n<h3 id=\"actions-with-values\" style=\"position:relative;\"><a href=\"#actions-with-values\" aria-label=\"actions with values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions With Values</h3>\n<p>If an action is declared with a data type, then it can carry a <strong>value</strong>, a data value that becomes available to any reaction triggered by the action. This is particularly useful for physical actions that are externally triggered because it enables the action to convey information to the reactor. This could be, for example, the body of an incoming network message or a numerical reading from a sensor.</p>\n<p>Recall from the <a href=\"/docs/handbook/composing-reactors#connections-with-logical-delays\">Composing Reactors</a> section that the <strong>after</strong> keyword on a connection between ports introduces a logical delay. This is actually implemented using a logical action. We illustrate how this is done using the <a href=\"https://github.com/tud-ccc/reactor-cpp/blob/master/include/reactor-cpp/logical_time.hh\">DelayInt</a> example:</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Delay</span><span class=\"source-lf\">(delay:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> in:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> d:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(in) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> d </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">d</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">schedule</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">get</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> delay</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(d) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp variable-other-object-access-cpp\">d</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp entity-name-function-member-cpp\">is_present</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">            </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp variable-other-object-access-cpp\">out</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp entity-name-function-member-cpp\">set</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp variable-other-object-access-cpp\">d</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp entity-name-function-member-cpp\">get</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Using this reactor as follows</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Delay</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf variable-other-constant-reactorinstance-lflang\">source</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">in</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">in</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">sink</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span>\n</pre>\n<p>is equivalent to</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">source</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">sink</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">in</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">after</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span>\n</pre>\n<p>(except that our <code>Delay</code> reactor will only work with data type <code>int</code>).</p>\n<p>The action <code>d</code> is specified with a type <code>int</code>. The reaction to the input <code>in</code> declares as its effect the action <code>d</code>. This declaration makes it possible for the reaction to schedule a future triggering of <code>d</code>. In the C++ target, actions use the same mechanism for passing data via value pointers as do ports. In the example above, the <code>reactor::ImmutablValuePtr&#x3C;int></code> derived by the call to <code>in.get()</code> is passed directly to <code>schedule()</code>. Similarly, the value can later be retrieved from the action with <code>d.get()</code> and passed to the output port.</p>\n<p>The first reaction declares that it is triggered by <code>d</code> and has effect <code>out</code>. Because this reaction is first, the <code>out</code> at any logical time can be produced before the input <code>in</code> is even known to be present. Hence, this reactor can be used in a feedback loop, where <code>out</code> triggers a downstream reactor to send a message back to <code>in</code> of this same reactor. If the reactions were given in the opposite order, there would be causality loop and compilation would fail.</p>\n<p>If you are not sure whether an action carries a value, you can test for it using <code>is_present()</code>:</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(d) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp keyword-control-if-cpp\">if</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp variable-other-object-access-cpp\">d</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp entity-name-function-member-cpp\">is_present</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-begin-bracket-curly-cpp\">{</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp variable-other-object-access-cpp\">out</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp entity-name-function-member-cpp\">set</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp variable-other-object-access-cpp\">d</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp entity-name-function-member-cpp\">get</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp meta-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp meta-block-cpp punctuation-section-block-end-bracket-curly-cpp\">}</span>\n<span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n</pre>\n<p>It is possible to both be triggered by and schedule an action the same reaction. For example, this reactor will produce a counting sequence after it is triggered the first time:</p>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">CountSelf</span><span class=\"source-lf\">(delay:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a, out </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">out</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">set</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">schedule_int</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> delay</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a, out </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">out</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">set</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">get</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">schedule_int</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">get</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-cpp\">+</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-cpp\"> delay</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Of course, to produce a counting sequence, it would be more efficient to use a state variable.</p>\n</div>\n<div class=\"lf-py\">\n<p>Actions are described <a href=\"/docs/handbook/actions\">here</a>. Actions can carry a\n<strong>value</strong>, a Python object that becomes available to any reaction triggered by\nthe action. This is particularly useful for physical actions that are externally\ntriggered because it enables the action to convey information to the reactor.\nThis could be, for example, the body of an incoming network message or a\nnumerical reading from a sensor. Note that actions do not have a data\ntype in the Python target, even when they carry a value.</p>\n<p>Recall from <a href=\"/docs/handbook/composing-reactors\">Composing Reactors</a> that the\n$after$ keyword on a connection between ports introduces a logical delay. This\nis actually implemented using a logical action. We illustrate how this is done\nusing the\n<code>Delay</code> reactor in the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/DelayInt.lf\">DelayInt</a>\nexample:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Delay</span><span class=\"source-lf\">(delay(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> _in;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py keyword-control-flow-python\">if</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py punctuation-parenthesis-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-logical-python\">is</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-logical-python\">not</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-language-python\">None</span><span class=\"source-lf meta-embedded-block-py punctuation-parenthesis-end-python\">)</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-logical-python\">and</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">is_present</span><span class=\"source-lf meta-embedded-block-py punctuation-separator-colon-python\">:</span>\n<span class=\"source-lf meta-embedded-block-py\">            </span><span class=\"source-lf meta-embedded-block-py\">out</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">set</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(_in) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">schedule</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">delay</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">_in</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Using this reactor as follows</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">delay</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Delay</span><span class=\"source-lf\">()</span>\n<span class=\"source-lf\">    &lt;source_port_reference&gt; </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">delay</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">_in</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">delay</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">_in</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> &lt;destination_port_reference&gt;</span>\n</pre>\n<p>is equivalent to</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf\">    &lt;source_port_reference&gt; </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> &lt;destination_port_reference&gt; </span><span class=\"source-lf keyword-control-lflang\">after</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span>\n</pre>\n<p>In the <code>Delay</code> reactor, the reaction to the input <code>_in</code> declares as its effect\nthe action <code>a</code>. This declaration makes it possible for the reaction to schedule\na future triggering of <code>a</code> using the\n<a href=\"/docs/handbook/target-language-details#schedule-functions\"><code>a.schedule()</code></a>\nmethod.</p>\n<p>The first reaction declares that it is triggered by <code>a</code> and has effect <code>out</code>. To\nread the value, it uses the <code>a.value</code> syntax. Because this reaction is first,\nthe <code>out</code> at any logical time can be produced before the input <code>_in</code> is even\nknown to be present. Hence, this reactor can be used in a feedback loop, where\n<code>out</code> triggers a downstream reactor to send a message back to <code>_in</code> of this same\nreactor. If the reactions were given in the opposite order, there would be a\ncausality loop and compilation would fail.</p>\n<p>If you are not sure whether an action carries a value, you can test for it as follows:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py keyword-control-flow-python\">if</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py punctuation-parenthesis-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-logical-python\">is</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-logical-python\">not</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py constant-language-python\">None</span><span class=\"source-lf meta-embedded-block-py punctuation-parenthesis-end-python\">)</span><span class=\"source-lf meta-embedded-block-py punctuation-separator-colon-python\">:</span>\n<span class=\"source-lf meta-embedded-block-py\">            </span><span class=\"source-lf meta-embedded-block-py\">out</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">set</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n</pre>\n<p>It is possible to both be triggered by and schedule an action in the same\nreaction. For example, the\nfollowing <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/CountSelf.lf\">CountSelf</a>\nreactor will produce a counting sequence after it is triggered the first time:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">CountSelf2</span><span class=\"source-lf\">(delay(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a, out </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">out</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">set</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">0</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">schedule</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">delay</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">1</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a, out </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">out</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">set</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">schedule</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">delay</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python keyword-operator-arithmetic-python\">+</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">1</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Of course, to produce a counting sequence, it would be more efficient to use a state variable.</p>\n</div>\n<div class=\"lf-ts\">\n<p>Each action listed as an <strong>effect</strong> for a reaction is available as a schedulable object in the reaction body via the <code>actions</code> object. The TypeScript target provides a special <code>actions</code> object with a property for each schedulable action. Schedulable actions (of type <code>t</code>) have the object method:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf\">schedule: (extraDelay: TimeValue | </span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">, value?: T) </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\">&gt; void;</span>\n</pre>\n<p>The first argument can either be the literal 0 (shorthand for 0 seconds) or a <code>TimeValue</code>/<code>UnitBasedTimeValue</code>. The second argument is the value for the action. Consider the following reactor:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Schedule</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> x:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-ts\">actions</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-property-ts\">a</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts entity-name-function-ts\">schedule</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts keyword-operator-new-ts\">new</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-function-call-ts entity-name-function-ts\">UnitBasedTimeValue</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts constant-numeric-decimal-ts\">200</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts new-expr-ts variable-other-object-ts\">TimeUnit</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts variable-other-property-ts\">msec</span><span class=\"source-lf meta-embedded-block-ts new-expr-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-language-null-ts\">null</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">elapsedTime</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts entity-name-function-ts\">getElapsedLogicalTime</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Action triggered at logical time </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">elapsedTime</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-arithmetic-ts\">+</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\"> after start.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>When this reactor receives an input <code>x</code>, it calls <code>schedule()</code> on the action <code>a</code>, so it will be triggered at the logical time offset (200 msec) with a null value. The action <code>a</code> will be triggered at a logical time 200 milliseconds after the arrival of input <code>x</code>. This will trigger the second reaction, which will use the <code>util.getElapsedLogicalTime()</code> function to determine how much logical time has elapsed since the start of execution. The second argument to the <code>schedule()</code> function is a <strong>value</strong>, data that can be carried by the action, which is explained below. In the above example, there is no value.</p>\n<h3 id=\"zero-delay-actions-1\" style=\"position:relative;\"><a href=\"#zero-delay-actions-1\" aria-label=\"zero delay actions 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Zero-Delay Actions</h3>\n<p>If the specified delay in a <code>schedule()</code> call is zero, then the action <code>a</code> will be triggered one <strong>microstep</strong> later in <strong>superdense time</strong> (see <a href=\"/docs/handbook/superdense-time\">Superdense Time</a>). Hence, if the input <code>x</code> arrives at metric logical time <em>t</em>, and you call <code>schedule()</code> as follows:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">actions</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">a</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">schedule</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">);</span>\n</pre>\n<p>then when a reaction to <code>a</code> is triggered, the input <code>x</code> will be absent (it was present at the <em>previous</em> microstep). The reaction to <code>x</code> and the reaction to <code>a</code> occur at the same metric time <em>t</em>, but separated by one microstep, so these two reactions are <em>not</em> logically simultaneous. These reactions execute with different <a href=\"#tags\">Tags</a>.</p>\n<h3 id=\"actions-with-values-1\" style=\"position:relative;\"><a href=\"#actions-with-values-1\" aria-label=\"actions with values 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions With Values</h3>\n<p>If an action is declared with a data type, then it can carry a <strong>value</strong>, a data value that becomes available to any reaction triggered by the action. The most common use of this is to implement a logical delay, where a value provided at an input is produced on an output with a larger logical timestamp. To accomplish that, it is much easier to use the <strong>after</strong> keyword on a connection between reactors. Nevertheless, in this section, we explain how to directly use actions with value. In fact, the <strong>after</strong> keyword is implemented as described below.</p>\n<p>If you are familiar with other targets (like C) you may notice it is much easier to schedule actions with values in TypeScript because of TypeScript/JavaScript’s garbage collected memory management. The following example implements a logical delay using an action with a value.</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Delay</span><span class=\"source-lf\">(delay:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> x:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-ts\">actions</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-property-ts\">a</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts entity-name-function-ts\">schedule</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">delay</span><span class=\"source-lf meta-embedded-block-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">x</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-control-as-ts\">as</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts support-type-primitive-ts\">number</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts keyword-control-conditional-ts\">if</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">a</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-comparison-ts\">!==</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-language-null-ts\">null</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">out</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">a</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts keyword-control-as-ts\">as</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts support-type-primitive-ts\">number</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The action <code>a</code> is specified with a type <code>number</code>. The first reaction declares <code>a</code> as its effect. This declaration makes it possible for the reaction to schedule a future triggering of <code>a</code>. It’s necessary to explicitly annotate the type of <code>x</code> as a number in the schedule function because TypeScript doesn’t know the only trigger of a reaction must be present in that reaction.</p>\n<p>The second reaction declares that it is triggered by <code>a</code> and has effect <code>out</code>. When a reaction triggers or uses an action the value of that action is made available within the reaction as a local variable with the name of the action. This variable will take on the value of the action and it will have the value <code>undefined</code> if that action is absent because it was not scheduled for this reaction.</p>\n<p>The local variable cannot be used directly to schedule an action. As described above, an action <code>a</code> can only be scheduled in a reaction when it is 1) declared as an effect and 2) referenced through a property of the <code>actions</code> object. The reason for this implementation is that <code>actions.a</code> refers to the <strong>action</strong>, not its value, and it is possible to use both the action and the value in the same reaction. For example, the following reaction will produce a counting sequence after it is triggered the first time:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out, a </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts keyword-control-conditional-ts\">if</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">a</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-comparison-ts\">!==</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-language-null-ts\">null</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">a</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">a</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts keyword-control-as-ts\">as</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts support-type-primitive-ts\">number</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">out</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">a</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">newValue</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-var-expr-ts variable-other-readwrite-ts\">a</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-var-expr-ts keyword-operator-increment-ts\">++</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts variable-other-object-ts\">actions</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts variable-other-object-property-ts\">a</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-function-call-ts entity-name-function-ts\">schedule</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">delay</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts variable-other-readwrite-ts\">newValue</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">=}</span>\n</pre>\n</div>\n<div class=\"lf-rs\">\n<p>Actions may carry values if they mention a data type, for instance:</p>\n<pre class=\"source-lf language-lf-rust\"><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> act: </span><span class=\"source-lf entity-name-type-lflang\">u32</span><span class=\"source-lf\">;</span>\n</pre>\n<p>Within a reaction, you can schedule that action with a value like so</p>\n<pre class=\"source-lf language-rust\"><span class=\"source-rust\">ctx.</span><span class=\"source-rust entity-name-function-rust\">schedule_with_v</span><span class=\"source-rust\">(</span><span class=\"source-rust\">act, Asap, </span><span class=\"source-rust constant-numeric-integer-decimal-rust\">30</span><span class=\"source-rust\">);</span>\n</pre>\n<p>you can get the value from another reaction like so:</p>\n<pre class=\"source-lf language-rust\"><span class=\"source-rust keyword-control-rust\">if</span><span class=\"source-rust\"> </span><span class=\"source-rust keyword-other-rust\">let</span><span class=\"source-rust\"> </span><span class=\"source-rust support-constant-core-rust\">Some</span><span class=\"source-rust\">(value) </span><span class=\"source-rust keyword-operator-assignment-rust\">=</span><span class=\"source-rust\"> ctx.</span><span class=\"source-rust entity-name-function-rust\">get_action</span><span class=\"source-rust\">(</span><span class=\"source-rust\">act) {</span>\n<span class=\"source-rust\">  </span><span class=\"source-rust comment-line-double-slash-rust\">//</span><span class=\"source-rust comment-line-double-slash-rust\"> a value is present at this tag</span>\n<span class=\"source-rust\">} </span><span class=\"source-rust keyword-control-rust\">else</span><span class=\"source-rust\"> {</span>\n<span class=\"source-rust\">  </span><span class=\"source-rust comment-line-double-slash-rust\">//</span><span class=\"source-rust comment-line-double-slash-rust\"> value was not specified</span>\n<span class=\"source-rust\">}</span>\n</pre>\n<p>If an action does not mention a data type, the type defaults to <code>()</code>.</p>\n</div>\n<h3 id=\"schedule-functions\" style=\"position:relative;\"><a href=\"#schedule-functions\" aria-label=\"schedule functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Schedule Functions</h3>\n<div class=\"lf-c\">\n<p>Actions with values can be rather tricky to use because the value must usually be carried in dynamically allocated memory. It will not work for value to refer to a state variable of the reactor because that state variable will likely have changed value by the time the reactions to the action are invoked. Several variants of the <code>lf_schedule</code> function are provided to make it easier to pass values across time in varying circumstances.</p>\n<blockquote>\n<p><code>lf_schedule(&#x3C;action>, &#x3C;offset>);</code></p>\n</blockquote>\n<p>This is the simplest version as it carries no value. The action need not have a data type.</p>\n<blockquote>\n<p><code>lf_schedule_int(&#x3C;action>, &#x3C;offset>, &#x3C;value>);</code></p>\n</blockquote>\n<p>This version carries an <code>int</code> value. The data type of the action is required to be <code>int</code>.</p>\n<blockquote>\n<p><code>lf_schedule_token(&#x3C;action>, &#x3C;offset>, &#x3C;value>);</code></p>\n</blockquote>\n<p>This version carries a <strong>token</strong>, which has type <code>token_t</code> and points to the value, which can have any type. There is a <code>create_token()</code> function that can be used to create a token, but programmers will rarely need to use this. Instead, you can use <code>lf_schedule_value()</code> (see below), which will automatically create a token. Alternatively, for inputs with types ending in <code>*</code> or <code>[]</code>, the value is wrapped in a token, and the token can be obtained using the syntax <code>inputname->token</code> in a reaction and then forwarded using <code>lf_schedule_token()</code> (see <a href=\"#Dynamically-Allocated-Structs\">Dynamically Allocated Structs</a> above). If the input is mutable, the reaction can then even modify the value pointed to by the token and/or use <code>lf_schedule_token()</code> to send the token to a future logical time. For example, the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/DelayPointer.lf\">DelayPointer</a> reactor realizes a logical delay for any data type carried by a token:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">DelayPointer</span><span class=\"source-lf\">(delay:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> in:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">void</span><span class=\"source-lf keyword-operator-cpp\">*</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">void</span><span class=\"source-lf keyword-operator-cpp\">*</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">void</span><span class=\"source-lf keyword-operator-cpp\">*</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\"> Using lf_set_token delegates responsibility for</span>\n<span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\"> freeing the allocated memory downstream.</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set_token</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">token</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(in) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\"> Schedule the actual token from the input rather than</span>\n<span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\"> a new token with a copy of the input value.</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_schedule_token</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">a</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">delay</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">token</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<blockquote>\n<p><code>lf_schedule_value(&#x3C;action>, &#x3C;offset>, &#x3C;value>, &#x3C;length>);</code></p>\n</blockquote>\n<p>This version is used to send into the future a value that has been dynamically allocated using malloc. It will be automatically freed when it is no longer needed. The <em>value</em> argument is a pointer to the memory containing the value. The <em>length</em> argument should be 1 if it is a not an array and the array length otherwise. This length will be needed downstream to interpret the data correctly. See <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ScheduleValue.lf\">ScheduleValue.lf</a>.</p>\n<blockquote>\n<p><code>lf_schedule_copy(&#x3C;action>, &#x3C;offset>, &#x3C;value>, &#x3C;length>);</code></p>\n</blockquote>\n<p>This version is for sending a copy of some data pointed to by the <code>&#x3C;value></code> argument. The data is assumed to be a scalar or array of type matching the <code>&#x3C;action></code> type. The <code>&#x3C;length></code> argument should be 1 if it is a not an array and the array length otherwise. This length will be needed downstream to interpret the data correctly.</p>\n<p>Occasionally, an action payload may not be dynamically allocated nor freed. For example, it could be a pointer to a statically allocated string. If you know this to be the case, the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/DelayString.lf\">DelayString</a> reactor will realize a logical time delay on such a string:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">DelayString</span><span class=\"source-lf\">(delay:</span><span class=\"source-lf storage-type-lflang\">time</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">100</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> in:</span><span class=\"source-lf storage-type-lflang\">string</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out:</span><span class=\"source-lf storage-type-lflang\">string</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a:</span><span class=\"source-lf storage-type-lflang\">string</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">out</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(in) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\">        </span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp punctuation-definition-comment-cpp\">//</span><span class=\"source-lf meta-embedded-block-c comment-line-double-slash-cpp\"> The following copies the char*, not the string.</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_schedule_copy</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">a</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">self</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">delay</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c keyword-operator-cpp\">&amp;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-begin-bracket-round-cpp\">(</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-object-access-cpp\">in</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c meta-parens-cpp punctuation-section-parens-end-bracket-round-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">1</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>The data type <code>string</code> is an alias for <code>char*</code>, but Lingua Franca does not know this, so it creates a token that contains a copy of the pointer to the string rather than a copy of the string itself.</p>\n</div>\n<div class=\"lf-cpp\">\n<p><span class=\"warning\">FIXME: Give a list of schedule() functions with descriptions.</span></p>\n</div>\n<div class=\"lf-py\">\n<p>The Python reactor target provides a <code>.schedule()</code> method to trigger an action at a\nfuture logical time. The <code>.schedule()</code> method also optionally allows for a value\nto be sent into the future. For example, take the\n<a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/ScheduleValue.lf\">ScheduleValue.lf</a>:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">ScheduleValue</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> a </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">value</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-assignment-python\">=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py string-quoted-single-python\">Hello</span><span class=\"source-lf meta-embedded-block-py string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">schedule</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">0</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Received: </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">a</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py keyword-control-flow-python\">if</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-operator-comparison-python\">!=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py string-quoted-single-python\">Hello</span><span class=\"source-lf meta-embedded-block-py string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py punctuation-separator-colon-python\">:</span>\n<span class=\"source-lf meta-embedded-block-py\">            </span><span class=\"source-lf meta-embedded-block-py\">sys</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">stderr</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">write</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">FAILURE: Should have received &#039;Hello&#039;</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python constant-character-escape-python\">\\n</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">            </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">exit</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">1</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>In this example, the logical action <code>a</code> is scheduled one\n<a href=\"/docs/handbook/superdense-time\">microstep</a> in the future with a string <code>value</code>\ncontaining <code>\"Hello\"</code>.</p>\n</div>\n<div class=\"lf-ts\">\n<p><span class=\"warning\">FIXME: List them here</span></p>\n</div>\n<div class=\"lf-rs\">\n<p>Within a reaction, actions may be scheduled using the <a href=\"https://lf-lang.github.io/reactor-rust/reactor_rt/struct.ReactionCtx.html#method.schedule\"><code>schedule</code></a> function:</p>\n<pre class=\"source-lf language-rust\"><span class=\"source-rust comment-line-double-slash-rust\">//</span><span class=\"source-rust comment-line-double-slash-rust\"> schedule without additional delay</span>\n<span class=\"source-rust\">ctx.</span><span class=\"source-rust entity-name-function-rust\">schedule</span><span class=\"source-rust\">(</span><span class=\"source-rust\">act, Asap);</span>\n<span class=\"source-rust comment-line-double-slash-rust\">//</span><span class=\"source-rust comment-line-double-slash-rust\"> schedule with an additional delay</span>\n<span class=\"source-rust\">ctx.</span><span class=\"source-rust entity-name-function-rust\">schedule</span><span class=\"source-rust\">(</span><span class=\"source-rust\">act, </span><span class=\"source-rust entity-name-function-macro-rust\">after!</span><span class=\"source-rust\">(</span><span class=\"source-rust constant-numeric-integer-decimal-rust\">20</span><span class=\"source-rust\"> ms));</span>\n<span class=\"source-rust comment-line-double-slash-rust\">//</span><span class=\"source-rust comment-line-double-slash-rust\"> that&#039;s shorthand for</span>\n<span class=\"source-rust\">ctx.</span><span class=\"source-rust entity-name-function-rust\">schedule</span><span class=\"source-rust\">(</span><span class=\"source-rust\">act, </span><span class=\"source-rust entity-name-function-rust\">After</span><span class=\"source-rust\">(</span><span class=\"source-rust\">Duration.</span><span class=\"source-rust entity-name-function-rust\">of_millis</span><span class=\"source-rust\">(</span><span class=\"source-rust constant-numeric-integer-decimal-rust\">20</span><span class=\"source-rust\">)));</span>\n</pre>\n</div>\n<h2 id=\"stopping-execution\" style=\"position:relative;\"><a href=\"#stopping-execution\" aria-label=\"stopping execution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stopping Execution</h2>\n<div class=\"lf-c\">\n<p>A reaction may request that the execution stop after all events with the current timestamp have been processed by calling the built-in method <code>request_stop()</code>, which takes no arguments. In a non-federated execution, the actual last tag of the program will be one microstep later than the tag at which <code>request_stop()</code> was called. For example, if the current tag is <code>(2 seconds, 0)</code>, the last (stop) tag will be <code>(2 seconds, 1)</code>. In a federated execution, however, the stop time will likely be larger than the current logical time. All federates are assured of stopping at the same logical time.</p>\n<blockquote>\n<p>The <a href=\"/docs/handbook/termination#timeout\">timeout</a> target property will take precedence over this function. For example, if a program has a timeout of <code>2 seconds</code> and <code>request_stop()</code> is called at the <code>(2 seconds, 0)</code> tag, the last tag will still be <code>(2 seconds, 0)</code>.</p>\n</blockquote>\n</div>\n<div class=\"lf-py\">\n<p>A reaction may request that the execution stop after all events with the current timestamp have been processed by calling the built-in method <code>lf.request_stop()</code>, which takes no arguments. In a non-federated execution, the actual last tag of the program will be one microstep later than the tag at which <code>lf.request_stop()</code> was called. For example, if the current tag is <code>(2 seconds, 0)</code>, the last (stop) tag will be <code>(2 seconds, 1)</code>. In a federated execution, however, the stop time will likely be larger than the current logical time. All federates are assured of stopping at the same logical time.</p>\n<blockquote>\n<p>The <a href=\"/docs/handbook/termination#timeout\">timeout</a> target property will take precedence over this function. For example, if a program has a timeout of <code>2 seconds</code> and <code>request_stop()</code> is called at the <code>(2 seconds, 0)</code> tag, the last tag will still be <code>(2 seconds, 0)</code>.</p>\n</blockquote>\n</div>\n<div class=\"lf-cpp\">\n<p>A reaction may request that the execution stops after all events with the current timestamp have been processed by calling <code>environment()->sync_shutdown()</code>. There is also a method <code>environment()->async_shutdown()</code>\nwhich may be invoked from outside an reaction, like an external thread.</p>\n</div>\n<div class=\"lf-ts\">\n<p>A reaction may request that the execution stop by calling the function <code>util.requestShutdown()</code> which takes no arguments. Execution will not stop immediately when this function is called; all events with the current tag will finish processing and execution will continue for one more microstep to give shutdown triggers a chance to execute. After this additional step, execution will terminate.</p>\n</div>\n<div class=\"lf-rs\">\n<p><span class=\"warning\">FIXME: Details needed here.</span></p>\n</div>\n<h2 id=\"log-and-debug-information\" style=\"position:relative;\"><a href=\"#log-and-debug-information\" aria-label=\"log and debug information permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Log and Debug Information</h2>\n<div class=\"lf-c\">\n<p>A suite of useful functions is provided in <a href=\"https://www.lf-lang.org/reactor-c/d8/d3c/util_8h.html\">util.h</a> for producing messages to be made visible when the generated program is run. Of course, you can always use <code>printf</code>, but this is not a good choice for logging or debug information, and it is not a good choice when output needs to be redirected to a window or some other user interface (see for example the <a href=\"https://github.com/lf-lang/reactor-c/blob/main/util/sensor_simulator.h\">sensor simulator</a>). Also, in federated execution, these functions identify which federate is producing the message. The functions are listed below. The arguments for all of these are identical to <code>printf</code> with the exception that a trailing newline is automatically added and therefore need not be included in the format string.</p>\n<ul>\n<li>\n<p><code>LF_PRINT_DEBUG(format, ...)</code>: Use this for verbose messages that are only needed during debugging. Nothing is printed unless the <a href=\"/docs/handbook/target-declaration#logging\">target</a> parameter <code>logging</code> is set to <code>debug</code>. THe overhead is minimized when nothing is to be printed.</p>\n</li>\n<li>\n<p><code>LF_PRINT_LOG(format, ...)</code>: Use this for messages that are useful logs of the execution. Nothing is printed unless the <a href=\"/docs/handbook/target-declaration#logging\">target parameter <code>logging</code></a> is set to <code>log</code> or <code>debug</code>. This is a macro so that overhead is minimized when nothing is to be printed.</p>\n</li>\n<li>\n<p><code>lf_print(format, ...)</code>: Use this for messages that should normally be printed but may need to be redirected to a user interface such as a window or terminal (see <code>register_print_function</code> below). These messages can be suppressed by setting the <a href=\"/docs/handbook/target-declaration#logging\">logging target property</a> to <code>warn</code> or <code>error</code>.</p>\n</li>\n<li>\n<p><code>lf_print_warning(format, ...)</code>: Use this for warning messages. These messages can be suppressed by setting the <a href=\"/docs/handbook/target-declaration#logging\">logging target property</a> to <code>error</code>.</p>\n</li>\n<li>\n<p><code>lf_print_error(format, ...)</code>: Use this for error messages. These messages are not suppressed by any <a href=\"/docs/handbook/target-declaration#logging\">logging target property</a>.</p>\n</li>\n<li>\n<p><code>lf_print_error_and_exit(format, ...)</code>: Use this for catastrophic errors.</p>\n</li>\n</ul>\n<p>In addition, a utility function is provided to register a function to redirect printed outputs:</p>\n<ul>\n<li><code>lf_register_print_function(function)</code>: Register a function that will be used instead of <code>printf</code> to print messages generated by any of the above functions. The function should accept the same arguments as <code>printf</code>.</li>\n</ul>\n</div>\n<div class=\"lf-cpp\">\n<p>The reactor-cpp library provides logging utilities in <a href=\"https://github.com/tud-ccc/reactor-cpp/blob/master/include/reactor-cpp/logging.hh\">logging.hh</a> for producing messages to be made visible when the generated program is run. Of course <code>std::cout</code> or <code>printf</code> can be used for the same purpose, but the logging mechanism provided by reactor-cpp is thread-safe ensuring that messages produced in parallel reactions are not interleaved with each other and provides common way for turning messages of a certain severity on and off.</p>\n<p>In particular, reactor-cpp provides the following logging interfaces:</p>\n<ul>\n<li><code>reactor::Debug()</code>: for verbose debug messages</li>\n<li><code>reactor::Info()</code>: for info messages of general interest, info is the default severity level</li>\n<li><code>reactor::Warning()</code>: for warning messages</li>\n<li><code>reactor::Error()</code>: for errors</li>\n</ul>\n<p>These utilities can be used analogues to <code>std::cout</code>. For instance:</p>\n<pre class=\"source-lf language-cpp\"><span class=\"source-cpp entity-name-scope-resolution-function-call-cpp\">reactor</span><span class=\"source-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-function-call-cpp\">::</span><span class=\"source-cpp entity-name-function-call-cpp\">Info</span><span class=\"source-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-cpp\"> </span><span class=\"source-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-cpp\"> </span><span class=\"source-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-cpp string-quoted-double-cpp\">Hello World! It is </span><span class=\"source-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-cpp\"> </span><span class=\"source-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-cpp\"> </span><span class=\"source-cpp entity-name-function-call-cpp\">get_physical_time</span><span class=\"source-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-cpp punctuation-terminator-statement-cpp\">;</span>\n</pre>\n<p>Note that unlike <code>std::cout</code> the new line delimiter is automatically added to the end of the message.</p>\n<p>Which type of messages are actually produced by the compiled program can be controlled with the <code>log-level</code> target property.</p>\n</div>\n<div class=\"lf-py\">\n<p>The Python supports the <a href=\"/docs/handbook/target-declaration#logging\">logging</a> target specification. This will cause the runtime to produce more or less information about the execution. However, user-facing functions for different logging levels are not yet implemented (see issue <a href=\"https://github.com/lf-lang/lingua-franca/issues/619\">#619</a>).</p>\n</div>\n<div class=\"lf-ts\">\n<p><span class=\"warning\">FIXME: Details needed here.</span></p>\n</div>\n<div class=\"lf-rs\">\n<p>The executable reacts to the environment variable <code>RUST_LOG</code>, which sets the logging level of the application. Possible values are\n<code>off</code>, <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code>, <code>trace</code></p>\n<p>Error and warning logs are on by default. Enabling a level enables all greater levels (i.e., <code>RUST_LOG=info</code> also enables <code>warn</code> and <code>error</code>, but not <code>trace</code> or <code>debug</code>).</p>\n<p>Logging can also be turned on with the <code>--log-level</code> CLI option, if the application features a <a href=\"/docs/handbook/target-declaration#command-line-arguments\">CLI</a>.</p>\n<p>Note that the <code>logging</code> target property is ignored, as its levels do not match the Rust standard levels we use (those of the <a href=\"https://docs.rs/log/\"><code>log</code> crate</a>).</p>\n<p>Note that when building with a release profile (i.e., target property <code>build-type</code> is not <code>Debug</code>), all log statements with level <code>debug</code> and <code>trace</code> are removed from the executable, and cannot be turned on at runtime. A warning is produced by the executable if you try to use these levels explicitly.</p>\n</div>\n<h2 id=\"libraries-available-to-programmers\" style=\"position:relative;\"><a href=\"#libraries-available-to-programmers\" aria-label=\"libraries available to programmers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Libraries Available to Programmers</h2>\n<div class=\"lf-c\">\n<h4 id=\"libraries-available-in-all-programs\" style=\"position:relative;\"><a href=\"#libraries-available-in-all-programs\" aria-label=\"libraries available in all programs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Libraries Available in All Programs</h4>\n<p>Reactions in C can use a number of pre-defined functions, macros, and constants without having to explicitly include any header files:</p>\n<ul>\n<li>\n<p><strong>Time and tags</strong> (<a href=\"https://www.lf-lang.org/reactor-c/d2/dcd/tag_8h.html\">tag.h</a>):</p>\n<ul>\n<li>Specifying time value, such as <code>MSEC</code> and <code>FOREVER</code></li>\n<li>Time data types, such as <code>tag_t</code> and <code>instant_t</code></li>\n<li>Obtaining tag and time information, e.g. <code>lf_time_logical</code> and <code>lf_time_physical</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Ports</strong></p>\n<ul>\n<li>Writing to output ports, such as <code>lf_set</code> and <code>lf_set_token</code> (<a href=\"https://www.lf-lang.org/reactor-c/d4/d13/set_8h.html\">set.h</a>)</li>\n<li>Iterating over sparse multiports, such as <code>lf_multiport_iterator</code> and <code>lf_multiport_next</code> (<a href=\"https://www.lf-lang.org/reactor-c/da/d00/port_8h.html\">port.h</a>)</li>\n</ul>\n</li>\n<li>\n<p><strong>Scheduling actions</strong></p>\n<ul>\n<li>Schedule future events, such as <code>lf_schedule</code> and <code>lf_schedule_value</code> (<a href=\"https://www.lf-lang.org/reactor-c/dc/d65/api_8h.html\">api.h</a>)</li>\n</ul>\n</li>\n<li>\n<p><strong>File Access</strong></p>\n<ul>\n<li>LF_SOURCE_DIRECTORY: A C string giving the full path to the directory containing the <code>.lf</code> file of the program.</li>\n<li>LF_PACKAGE_DIRECTORY: A C string giving the full path to the directory that is the root of the project or package (normally, the directory above the <code>src</code> directory).</li>\n<li>LF_FILE_SEPARATOR: A C string giving the file separator for the platform containing the <code>.lf</code> file (”/” for Unix-like systems, ”\\” for Windows).</li>\n</ul>\n</li>\n</ul>\n<p>These are useful when your application needs to open and read additional files. For example, the following C code can be used to open a file in a subdirectory called <code>dir</code> of the directory that contains the <code>.lf</code> file:</p>\n<pre class=\"source-lf language-text\">    const char* path = LF_SOURCE_DIRECTORY LF_FILE_SEPARATOR &quot;dir&quot; LF_FILE_SEPARATOR &quot;filename&quot;\n    FILE* fp = fopen(path, &quot;rb&quot;);</pre>\n<ul>\n<li>\n<p><strong>Miscellaneous</strong></p>\n<ul>\n<li>Changing modes in modal models, <code>lf_set_mode</code> (<a href=\"https://www.lf-lang.org/reactor-c/d4/d13/set_8h.html\">set.h</a>)</li>\n<li>Checking deadlines, <code>lf_check_deadline</code> (<a href=\"https://www.lf-lang.org/reactor-c/dc/d65/api_8h.html\">api.h</a>)</li>\n<li>Defining and recording tracepoints, such as <code>register_user_trace_event</code> and <code>tracepoint</code> (<a href=\"https://www.lf-lang.org/reactor-c/d1/d1b/trace_8h.html\">trace.h</a>)</li>\n<li>Printing utilities, such as <code>lf_print</code> and <code>lf_print_error</code> (<a href=\"https://www.lf-lang.org/reactor-c/d8/d3c/util_8h.html\">util.h</a>)</li>\n<li>Logging utilities, such as <code>LF_PRINT_LOG</code> and <code>LF_PRINT_DEBUG</code> (<a href=\"https://www.lf-lang.org/reactor-c/d8/d3c/util_8h.html\">util.h</a>)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"standard-c-libraries\" style=\"position:relative;\"><a href=\"#standard-c-libraries\" aria-label=\"standard c libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Standard C Libraries</h4>\n<p>The generated C code automatically includes the following <a href=\"https://en.wikipedia.org/wiki/C_standard_library\">standard C libraries</a> (see also the <a href=\"https://en.cppreference.com/w/c/header\">C standard library header files</a>):</p>\n<ul>\n<li>limits.h (Defines <code>INT_MIN</code>, <code>INT_MAX</code>, etc.)</li>\n<li>stdbool.h (Defines <code>bool</code> datatype and <code>true</code> and <code>false</code> constants)</li>\n<li>stddef.h (Defines <code>size_t</code>, <code>NULL</code>, etc.)</li>\n<li>stdint.h (Defines <code>int64_t</code>, <code>int32_t</code>, etc.)</li>\n<li>stdlib.h (Defines <code>exit</code>, <code>getenv</code>, <code>atoi</code>, etc.)</li>\n</ul>\n<p>Hence, programmers are free to use functions from these libraries without explicitly providing a <code>#include</code> statement. Nevertheless, providing one is harmless and may be good form. In particular, future releases may not include these header files</p>\n<h4 id=\"available-libraries-requiring-include\" style=\"position:relative;\"><a href=\"#available-libraries-requiring-include\" aria-label=\"available libraries requiring include permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Available Libraries Requiring #include</h4>\n<p>More sophisticated library functions require a <code>#include</code> statement in a $preamble$.\nSpecifically, <a href=\"https://www.lf-lang.org/reactor-c/de/d03/platform_8h.html\">platform.h</a> includes the following:</p>\n<ul>\n<li>Sleep functions such as <code>lf_sleep</code></li>\n<li>Mutual exclusion such as <code>lf_critial_section_enter</code> and <code>lf_critical_section_exit</code></li>\n<li>Threading functions such as <code>lf_thread_create</code></li>\n</ul>\n<p>The threading functions are only available for platforms that support multithreading.</p>\n<h4 id=\"available-libraries-requiring-include-a-files-entry-and-a-cmake-include\" style=\"position:relative;\"><a href=\"#available-libraries-requiring-include-a-files-entry-and-a-cmake-include\" aria-label=\"available libraries requiring include a files entry and a cmake include permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Available Libraries Requiring #include, a files entry, and a cmake-include</h4>\n<p>A few utility libraries are provided, but require considerably more setup.\nThese also help to illustrate how to incorporate your own libraries.</p>\n<ul>\n<li>Audio functions (for Linux and Mac only): <a href=\"https://www.lf-lang.org/reactor-c/d1/dcb/audio__loop_8h.html\">audio_loop.h</a></li>\n<li>Audio file reader: <a href=\"https://www.lf-lang.org/reactor-c/d3/d8a/wave__file__reader_8h.html\">wave_file_reader.h</a></li>\n<li>A double-ended queue: <a href=\"https://www.lf-lang.org/reactor-c/dc/d44/deque_8h.html\">deque.h</a></li>\n<li>An ncurses terminal interface for I/O: <a href=\"https://www.lf-lang.org/reactor-c/dc/de9/sensor__simulator_8h.html\">sensor_simulator.h</a></li>\n</ul>\n</div>\n<div class=\"lf-cpp\">\n<p><span class=\"warning\">FIXME: Details needed here.</span></p>\n</div>\n<div class=\"lf-py\">\n<p><span class=\"warning\">FIXME: Details needed here.</span></p>\n</div>\n<div class=\"lf-ts\">\n<p><span class=\"warning\">FIXME: Details needed here.</span></p>\n</div>\n<div class=\"lf-rs\">\n<p><span class=\"warning\">FIXME: Details needed here.</span></p>\n</div>\n<div class=\"lf-c lf-py\">\n<h2 id=\"scheduler-target-property\" style=\"position:relative;\"><a href=\"#scheduler-target-property\" aria-label=\"scheduler target property permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scheduler Target Property</h2>\n<p>The <code>scheduler</code> target property is used to select the scheduler used by the C runtime. This scheduler determines the exact order in which reactions are processed, as long as the order complies with the deterministic semantics of Lingua Franca. It also assigns reactions to user-level threads and can thereby influence the assignment of reactions to processors.</p>\n<p>Because the C runtime scheduler operates at a higher level of abstraction than the OS, none of the scheduling policies that we currently support allow preemption; furthermore, they do not control migration of threads between processors.</p>\n<p>Another limitation of these schedulers is that they are constrained to process the reaction graph breadth-first. We define the <em>level</em> of a reaction <em>r</em> to be the length of the longest chain of causally dependent reactions that are all (causally) upstream of <em>r</em>. Current LF schedulers process one level of reactions at a time, but this constraint is more restrictive than necessary to implement Lingua Franca’s semantics and is notable only for its effect on execution times.</p>\n<p>The following schedulers are available:</p>\n<ul>\n<li><code>GEDF_NP</code> (global earliest-deadline-first): This scheduler is the default scheduler for programs that have deadlines. When the semantics of Lingua Franca allows for concurrent execution of two or more ready reactions with the same level at a particular tag, this scheduler will prioritize the reaction with the earliest deadline to run first (but with the limitation that reaction executions are non-preemptive). Reactions with no explicit deadline implicitly have an infinitely late deadline.</li>\n<li><code>NP</code> (non-preemptive): This scheduler is the default scheduler for programs that have no deadlines. It makes minimal guarantees about its behavior, and this allows it to include optimizations that can result in lower execution times than the GEDF_NP scheduler.</li>\n<li><code>adaptive</code>: This scheduler behaves similarly to the <code>NP</code> scheduler, with the additional limitation that it is designed for applications that can tolerate potentially wide variability in physical execution times. It performs experiments and measures execution times at runtime to determine the degree of exploitable parallelism in various parts of the program. This lets it automate judgments which are made more naively by the other schedulers and which are typically made by the programmer in general-purpose languages.</li>\n<li><code>GEDF_NP_CI</code> (global earliest-deadline-first, with chain ID): This scheduler implements the same policy as <code>GEDF_NP</code>, but it is designed for an optimization called chain ID that is described on page 92 <a href=\"https://www2.eecs.berkeley.edu/Pubs/TechRpts/2020/EECS-2020-235.pdf\">here</a>. This optimization is currently disabled because it is not yet fully developed, so we advise against the use of this scheduler in practical applications.</li>\n</ul>\n</div>\n<h2 id=\"target-implementation-details\" style=\"position:relative;\"><a href=\"#target-implementation-details\" aria-label=\"target implementation details permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Target Implementation Details</h2>\n<div class=\"lf-c\">\n<h3 id=\"included-libraries\" style=\"position:relative;\"><a href=\"#included-libraries\" aria-label=\"included libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Included Libraries</h3>\n<p>Definitions for the following do not need to be explicitly included because the code generator exposes them in the user namespace automatically:</p>\n<ul>\n<li>Functions and macros used to set ports and iterate over multiports</li>\n<li>Functions and macros used to schedule actions</li>\n<li>Functions and macros used to set a reactor’s mode</li>\n<li>Functions and macros used to create trace points</li>\n<li>Logging utility functions</li>\n<li>Typedefs relating to time and logical time, including <code>tag_t</code>, <code>instant_t</code>, <code>interval_t</code>, and <code>microstep_t</code></li>\n<li>API functions for obtaining timing information about the current program execution, including the current physical and logical time</li>\n</ul>\n<p>Some standard C libraries are exposed to the user through <code>reactor.h</code>, including <code>stddef.h</code>,\n<code>stdio.h</code>, and <code>stdlib.h</code>. However, users who wish to avoid breaking changes between releases should\nconsider including these libraries explicitly instead of relying on their being exposed by the\nruntime.</p>\n<p>Users who wish to include functionality that has a platform-specific implementation may choose to\nexplicitly include <code>platform.h</code>, which provides a uniform interface for various concurrency\nprimitives and sleep functions.</p>\n<h3 id=\"single-threaded-implementation\" style=\"position:relative;\"><a href=\"#single-threaded-implementation\" aria-label=\"single threaded implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single Threaded Implementation</h3>\n<p>The execution strategy is to have two queues of pending accessor invocations, one that is sorted by\ntimestamp (the <strong>event queue</strong>) and one that is sorted by priority (the <strong>reaction queue</strong>).\nExecution proceeds as follows:</p>\n<ol>\n<li>\n<p>At initialization, an event for each timer is put on the event queue and logical time is initialized to the current time, represented as the number of nanoseconds elapsed since January 1, 1970.</p>\n</li>\n<li>\n<p>At each logical time, pull all events from event queue that have the same earliest time stamp, find the reactions that these events trigger, and put them on the reaction queue. If there are no events on the event queue, then exit the program (unless the <code>--keepalive true</code> command-line argument is given).</p>\n</li>\n<li>\n<p>Wait until physical time matches or exceeds that earliest timestamp (unless the <code>--fast true</code> command-line argument is given). Then advance logical time to match that earliest timestamp.</p>\n</li>\n<li>\n<p>Execute reactions in order of priority from the reaction queue. These reactions may produce outputs, which results in more events getting put on the reaction queue. Those reactions are assured of having lower priority than the reaction that is executing. If a reaction calls <code>lf_schedule()</code>, an event will be put on the event queue, not the reaction queue.</p>\n</li>\n<li>\n<p>When the reaction queue is empty, go to 2.</p>\n</li>\n</ol>\n<h3 id=\"multithreaded-implementation\" style=\"position:relative;\"><a href=\"#multithreaded-implementation\" aria-label=\"multithreaded implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multithreaded Implementation</h3>\n<p>The default number of worker threads is given by the <code>workers</code> argument in the <a href=\"/docs/handbook/target-declaration#threading\">target</a> statement.\nThis can be overridden with the <code>--workers</code> <a href=\"#command-line-arguments\">command-line argument</a>.\nBy default, the number of workers will match the number of cores on the execution platform.</p>\n<p>Upon initialization, the main thread will create the specified number of worker threads.\nA good choice is for this number to match the number of available cores.\nExecution proceeds in a manner similar to the <a href=\"#single-threaded-implementation\">single threaded implementation</a>\nexcept that the worker threads concurrently draw reactions from the reaction queue.\nThe execution algorithm ensures that no reaction executes until all reactions that it depends on that are also\non the reaction queue have executed at the current logical time.</p>\n</div>\n<div class=\"lf-cpp\">\n<p>Unlike the C target, the Cpp target implements more of the analysis and setup of a Lingua Franca in the runtime system. The runtime system is define in the <a href=\"https://github.com/lf-lang/reactor-cpp\">reactor-cpp</a> repository on GitHub. See that repo for details.</p>\n</div>\n<div class=\"lf-py\">\n<p>The Python target is built on top of the C runtime to enable maximum efficiency where possible. It uses the single-threaded C runtime by default but will switch to the multi-threaded C runtime if a physical action is detected. The <a href=\"/docs/handbook/target-declaration#threading\">threading</a> target property can be used to override this behavior.</p>\n<p>Running <a href=\"/docs/handbook/command-line-tools\">lfc</a> on a <code>XXX.lf</code> program that uses the Python target specification on a\nLinux machine will create the following files (other operating systems will have\na slightly different structure and/or files):</p>\n<pre class=\"source-lf language-shell\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">├──</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">src</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">│  </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">└──</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">XXX.lf</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">└──</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">src-gen</span>\n<span class=\"source-shell meta-statement-shell\">    </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">└──</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">XXX</span>\n<span class=\"source-shell\">        </span><span class=\"source-shell comment-line-number-sign-shell punctuation-definition-comment-shell\">#</span><span class=\"source-shell comment-line-number-sign-shell\">##### Files related to the Python C extension module for XXX ######</span>\n<span class=\"source-shell meta-statement-shell\">        </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">├──</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">build</span><span class=\"source-shell\">               </span><span class=\"source-shell comment-line-number-sign-shell punctuation-definition-comment-shell\">#</span><span class=\"source-shell comment-line-number-sign-shell\"> Temporary files for setuptools</span>\n<span class=\"source-shell meta-statement-shell\">        </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">├──</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">core</span><span class=\"source-shell\">                </span><span class=\"source-shell comment-line-number-sign-shell punctuation-definition-comment-shell\">#</span><span class=\"source-shell comment-line-number-sign-shell\"> Core C runtime files</span>\n<span class=\"source-shell meta-statement-shell\">        </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">├──</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">ctarget.c</span><span class=\"source-shell\">           </span><span class=\"source-shell comment-line-number-sign-shell punctuation-definition-comment-shell\">#</span><span class=\"source-shell comment-line-number-sign-shell\"> C target API implementations</span>\n<span class=\"source-shell meta-statement-shell\">        </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">├──</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">ctarget.h</span><span class=\"source-shell\">           </span><span class=\"source-shell comment-line-number-sign-shell punctuation-definition-comment-shell\">#</span><span class=\"source-shell comment-line-number-sign-shell\"> C target API definitions</span>\n<span class=\"source-shell meta-statement-shell\">        </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">├──</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">LinguaFrancaXXX</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell variable-language-special-wildcard-shell\">*</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">.so</span><span class=\"source-shell\"> </span><span class=\"source-shell comment-line-number-sign-shell punctuation-definition-comment-shell\">#</span><span class=\"source-shell comment-line-number-sign-shell\"> The Python C extension module for XXX</span>\n<span class=\"source-shell meta-statement-shell\">        </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">├──</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">pythontarget.c</span><span class=\"source-shell\">      </span><span class=\"source-shell comment-line-number-sign-shell punctuation-definition-comment-shell\">#</span><span class=\"source-shell comment-line-number-sign-shell\"> Python target API implementations</span>\n<span class=\"source-shell meta-statement-shell\">        </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">├──</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">pythontarget.h</span><span class=\"source-shell\">      </span><span class=\"source-shell comment-line-number-sign-shell punctuation-definition-comment-shell\">#</span><span class=\"source-shell comment-line-number-sign-shell\"> Python target API definitions</span>\n<span class=\"source-shell meta-statement-shell\">        </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">├──</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">setup.py</span><span class=\"source-shell\">            </span><span class=\"source-shell comment-line-number-sign-shell punctuation-definition-comment-shell\">#</span><span class=\"source-shell comment-line-number-sign-shell\"> Setup file used to build the Python C extension</span>\n<span class=\"source-shell meta-statement-shell\">        </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">├──</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">XXX.c</span><span class=\"source-shell\">               </span><span class=\"source-shell comment-line-number-sign-shell punctuation-definition-comment-shell\">#</span><span class=\"source-shell comment-line-number-sign-shell\"> Source code of the Python C extension</span>\n<span class=\"source-shell\">        </span><span class=\"source-shell comment-line-number-sign-shell punctuation-definition-comment-shell\">#</span><span class=\"source-shell comment-line-number-sign-shell\">##### Files containing the Python code ######</span>\n<span class=\"source-shell meta-statement-shell\">        </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">└──</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">XXX.py</span><span class=\"source-shell\">              </span><span class=\"source-shell comment-line-number-sign-shell punctuation-definition-comment-shell\">#</span><span class=\"source-shell comment-line-number-sign-shell\"> Python file containing reactors and reaction code</span>\n</pre>\n<p>There are two major components in the <code>src-gen/XXX</code> directory that together enable the execution of a Python target application:</p>\n<ul>\n<li>An <a href=\"#the-xxxpy-file-containing-user-code\">XXX.py</a> file containing the user code (e.g., reactor definitions and reactions).</li>\n<li>The source code for a <a href=\"#the-generated-linguafrancaxxx-python-module-a-c-extension-module\">Python C extension module</a> called <code>LinguaFrancaXXX</code> containing the C runtime, as well as hooks to execute the user-defined reactions.</li>\n</ul>\n<p>The interactions between the <code>src-gen/XXX/XXX.py</code> file and the <code>LinguaFrancaXXX</code> module are explained <a href=\"#interactions-between-xxxpy-and-linguafrancaxxx\">below</a>.</p>\n<h3 id=\"the-xxxpy-file-containing-user-code\" style=\"position:relative;\"><a href=\"#the-xxxpy-file-containing-user-code\" aria-label=\"the xxxpy file containing user code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code>XXX.py</code> file containing user code</h3>\n<p>The <code>XXX.py</code> file contains all the reactor definitions in the form of Python classes. The contents of a reactor are converted as follows:</p>\n<ul>\n<li>Each <strong>Reaction</strong> in a reactor definition will be converted to a class method.</li>\n<li>Each <strong>Parameter</strong> will be converted to a class <a href=\"https://docs.python.org/3/library/functions.html?highlight=property#property\">property</a> to make it read-only.</li>\n<li>Each <strong>State</strong> variable will be converted to an <a href=\"https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables\">instance variable</a>.</li>\n<li>Each trigger and effect will be converted to an object passed as a method function argument to reaction methods, allowing the body of the reaction to access them.</li>\n<li>Each reactor <strong>Preamble</strong> will be put in the class definition verbatim.</li>\n</ul>\n<p>Finally, each reactor class instantiation will be converted to a Python object class instantiation.</p>\n<p>For example, imagine the following program:</p>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf comment-line-double-dash-lflang\"># src/XXX.lf</span>\n<span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Foo</span><span class=\"source-lf\">(bar(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">)) {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py keyword-control-import-python\">import</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">random</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> baz</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> _in</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> act</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(_in, act) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-lf meta-embedded-block-py comment-line-number-sign-python\"> Body of the reaction</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py variable-language-special-self-python\">self</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">random</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">seed</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-lf meta-embedded-block-py comment-line-number-sign-python\"> Note the use of self</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">foo</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Foo</span><span class=\"source-lf\">()</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Th reactor <code>Foo</code> and its instance, <code>foo</code>, will be converted to</p>\n<pre class=\"source-lf language-python\"><span class=\"source-python comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-python comment-line-number-sign-python\"> src-gen/</span><span class=\"source-python comment-line-number-sign-python keyword-codetag-notation-python\">XXX</span><span class=\"source-python comment-line-number-sign-python\">/</span><span class=\"source-python comment-line-number-sign-python keyword-codetag-notation-python\">XXX</span><span class=\"source-python comment-line-number-sign-python\">.py</span>\n<span class=\"source-python constant-other-ellipsis-python\">...</span>\n<span class=\"source-python comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-python comment-line-number-sign-python\"> Python class for reactor Foo</span>\n<span class=\"source-python meta-class-python storage-type-class-python\">class</span><span class=\"source-python meta-class-python\"> </span><span class=\"source-python meta-class-python entity-name-type-class-python\">_Foo</span><span class=\"source-python meta-class-python punctuation-section-class-begin-python\">:</span>\n<span class=\"source-python\"></span>\n<span class=\"source-python\">    </span><span class=\"source-python comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-python comment-line-number-sign-python\"> From the preamble, verbatim:</span>\n<span class=\"source-python\">    </span><span class=\"source-python keyword-control-import-python\">import</span><span class=\"source-python\"> </span><span class=\"source-python\">random</span>\n<span class=\"source-python meta-function-python\">    </span><span class=\"source-python meta-function-python storage-type-function-python\">def</span><span class=\"source-python meta-function-python\"> </span><span class=\"source-python meta-function-python support-function-magic-python\">__init__</span><span class=\"source-python meta-function-python meta-function-parameters-python punctuation-definition-parameters-begin-python\">(</span><span class=\"source-python meta-function-python meta-function-parameters-python variable-parameter-function-language-python variable-parameter-function-language-special-self-python\">self</span><span class=\"source-python meta-function-python meta-function-parameters-python punctuation-separator-parameters-python\">,</span><span class=\"source-python meta-function-python meta-function-parameters-python\"> </span><span class=\"source-python meta-function-python meta-function-parameters-python keyword-operator-unpacking-parameter-python\">**</span><span class=\"source-python meta-function-python meta-function-parameters-python variable-parameter-function-language-python\">kwargs</span><span class=\"source-python meta-function-python meta-function-parameters-python punctuation-definition-parameters-end-python\">)</span><span class=\"source-python meta-function-python punctuation-section-function-begin-python\">:</span>\n<span class=\"source-python\">        </span><span class=\"source-python comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-python comment-line-number-sign-python\">Define parameters and their default values</span>\n<span class=\"source-python\">        </span><span class=\"source-python variable-language-special-self-python\">self</span><span class=\"source-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-python meta-member-access-python meta-attribute-python\">_bar</span><span class=\"source-python\"> </span><span class=\"source-python keyword-operator-assignment-python\">=</span><span class=\"source-python\"> </span><span class=\"source-python constant-numeric-dec-python\">0</span>\n<span class=\"source-python\">        </span><span class=\"source-python comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-python comment-line-number-sign-python\"> Handle parameters that are set in instantiation</span>\n<span class=\"source-python\">        </span><span class=\"source-python variable-language-special-self-python\">self</span><span class=\"source-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-python meta-member-access-python support-variable-magic-python\">__dict__</span><span class=\"source-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">update</span><span class=\"source-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-python meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">kwargs</span><span class=\"source-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-python\"></span>\n<span class=\"source-python\">        </span><span class=\"source-python comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-python comment-line-number-sign-python\"> Define state variables</span>\n<span class=\"source-python\">        </span><span class=\"source-python variable-language-special-self-python\">self</span><span class=\"source-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-python meta-member-access-python meta-attribute-python\">baz</span><span class=\"source-python\"> </span><span class=\"source-python keyword-operator-assignment-python\">=</span><span class=\"source-python\"> </span><span class=\"source-python constant-language-python\">None</span>\n<span class=\"source-python\"></span>\n<span class=\"source-python meta-function-decorator-python\">    </span><span class=\"source-python meta-function-decorator-python entity-name-function-decorator-python punctuation-definition-decorator-python\">@</span><span class=\"source-python meta-function-decorator-python support-type-python\">property</span>\n<span class=\"source-python meta-function-python\">    </span><span class=\"source-python meta-function-python storage-type-function-python\">def</span><span class=\"source-python meta-function-python\"> </span><span class=\"source-python meta-function-python entity-name-function-python\">bar</span><span class=\"source-python meta-function-python meta-function-parameters-python punctuation-definition-parameters-begin-python\">(</span><span class=\"source-python meta-function-python meta-function-parameters-python variable-parameter-function-language-python variable-parameter-function-language-special-self-python\">self</span><span class=\"source-python meta-function-python meta-function-parameters-python punctuation-definition-parameters-end-python\">)</span><span class=\"source-python meta-function-python punctuation-section-function-begin-python\">:</span>\n<span class=\"source-python\">        </span><span class=\"source-python keyword-control-flow-python\">return</span><span class=\"source-python\"> </span><span class=\"source-python variable-language-special-self-python\">self</span><span class=\"source-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-python meta-member-access-python meta-attribute-python\">_bar</span>\n<span class=\"source-python\"></span>\n<span class=\"source-python meta-function-python\">    </span><span class=\"source-python meta-function-python storage-type-function-python\">def</span><span class=\"source-python meta-function-python\"> </span><span class=\"source-python meta-function-python entity-name-function-python\">reaction_function_0</span><span class=\"source-python meta-function-python meta-function-parameters-python punctuation-definition-parameters-begin-python\">(</span><span class=\"source-python meta-function-python meta-function-parameters-python variable-parameter-function-language-python variable-parameter-function-language-special-self-python\">self</span><span class=\"source-python meta-function-python meta-function-parameters-python\"> </span><span class=\"source-python meta-function-python meta-function-parameters-python punctuation-separator-parameters-python\">,</span><span class=\"source-python meta-function-python meta-function-parameters-python\"> </span><span class=\"source-python meta-function-python meta-function-parameters-python variable-parameter-function-language-python\">_in</span><span class=\"source-python meta-function-python meta-function-parameters-python punctuation-separator-parameters-python\">,</span><span class=\"source-python meta-function-python meta-function-parameters-python\"> </span><span class=\"source-python meta-function-python meta-function-parameters-python variable-parameter-function-language-python\">act</span><span class=\"source-python meta-function-python meta-function-parameters-python punctuation-definition-parameters-end-python\">)</span><span class=\"source-python meta-function-python punctuation-section-function-begin-python\">:</span>\n<span class=\"source-python\">        </span><span class=\"source-python comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-python comment-line-number-sign-python\"> Body of the reaction</span>\n<span class=\"source-python\">        </span><span class=\"source-python variable-language-special-self-python\">self</span><span class=\"source-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-python meta-member-access-python meta-attribute-python\">random</span><span class=\"source-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-python meta-member-access-python meta-function-call-python meta-function-call-generic-python\">seed</span><span class=\"source-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-python meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-python\"> </span><span class=\"source-python comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-python comment-line-number-sign-python\"> Note the use of self</span>\n<span class=\"source-python\">        </span><span class=\"source-python keyword-control-flow-python\">return</span><span class=\"source-python\"> </span><span class=\"source-python constant-numeric-dec-python\">0</span>\n<span class=\"source-python\"></span>\n<span class=\"source-python\"></span>\n<span class=\"source-python comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-python comment-line-number-sign-python\"> Instantiate classes</span>\n<span class=\"source-python\">xxx_lf</span><span class=\"source-python\"> </span><span class=\"source-python keyword-operator-assignment-python\">=</span><span class=\"source-python\"> </span><span class=\"source-python punctuation-definition-list-begin-python\">[</span><span class=\"source-python constant-language-python\">None</span><span class=\"source-python punctuation-definition-list-end-python\">]</span><span class=\"source-python\"> </span><span class=\"source-python keyword-operator-arithmetic-python\">*</span><span class=\"source-python\"> </span><span class=\"source-python constant-numeric-dec-python\">1</span>\n<span class=\"source-python\">xxx_foo_lf</span><span class=\"source-python\"> </span><span class=\"source-python keyword-operator-assignment-python\">=</span><span class=\"source-python\"> </span><span class=\"source-python punctuation-definition-list-begin-python\">[</span><span class=\"source-python constant-language-python\">None</span><span class=\"source-python punctuation-definition-list-end-python\">]</span><span class=\"source-python\"> </span><span class=\"source-python keyword-operator-arithmetic-python\">*</span><span class=\"source-python\"> </span><span class=\"source-python constant-numeric-dec-python\">1</span>\n<span class=\"source-python comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-python comment-line-number-sign-python\"> Start initializing </span><span class=\"source-python comment-line-number-sign-python keyword-codetag-notation-python\">XXX</span><span class=\"source-python comment-line-number-sign-python\"> of class </span><span class=\"source-python comment-line-number-sign-python keyword-codetag-notation-python\">XXX</span>\n<span class=\"source-python keyword-control-flow-python\">for</span><span class=\"source-python\"> </span><span class=\"source-python\">xxx_i</span><span class=\"source-python\"> </span><span class=\"source-python keyword-control-flow-python\">in</span><span class=\"source-python\"> </span><span class=\"source-python meta-function-call-python support-function-builtin-python\">range</span><span class=\"source-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">1</span><span class=\"source-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-python punctuation-separator-colon-python\">:</span>\n<span class=\"source-python\">    </span><span class=\"source-python\">bank_index</span><span class=\"source-python\"> </span><span class=\"source-python keyword-operator-assignment-python\">=</span><span class=\"source-python\"> </span><span class=\"source-python\">xxx_i</span>\n<span class=\"source-python\">    </span><span class=\"source-python meta-item-access-python meta-indexed-name-python\">xxx_lf</span><span class=\"source-python meta-item-access-python punctuation-definition-arguments-begin-python\">[</span><span class=\"source-python meta-item-access-python meta-item-access-arguments-python constant-numeric-dec-python\">0</span><span class=\"source-python meta-item-access-python punctuation-definition-arguments-end-python\">]</span><span class=\"source-python\"> </span><span class=\"source-python keyword-operator-assignment-python\">=</span><span class=\"source-python\"> </span><span class=\"source-python meta-function-call-python meta-function-call-generic-python\">_XXX</span><span class=\"source-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span>\n<span class=\"source-python meta-function-call-python meta-function-call-arguments-python\">        </span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python variable-parameter-function-call-python\">_bank_index</span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python keyword-operator-assignment-python\">=</span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">0</span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span>\n<span class=\"source-python meta-function-call-python meta-function-call-arguments-python\">    </span><span class=\"source-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-python\">    </span><span class=\"source-python comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-python comment-line-number-sign-python\"> Start initializing </span><span class=\"source-python comment-line-number-sign-python keyword-codetag-notation-python\">XXX</span><span class=\"source-python comment-line-number-sign-python\">.foo of class Foo</span>\n<span class=\"source-python\">    </span><span class=\"source-python keyword-control-flow-python\">for</span><span class=\"source-python\"> </span><span class=\"source-python\">xxx_foo_i</span><span class=\"source-python\"> </span><span class=\"source-python keyword-control-flow-python\">in</span><span class=\"source-python\"> </span><span class=\"source-python meta-function-call-python support-function-builtin-python\">range</span><span class=\"source-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">1</span><span class=\"source-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-python punctuation-separator-colon-python\">:</span>\n<span class=\"source-python\">        </span><span class=\"source-python\">bank_index</span><span class=\"source-python\"> </span><span class=\"source-python keyword-operator-assignment-python\">=</span><span class=\"source-python\"> </span><span class=\"source-python\">xxx_foo_i</span>\n<span class=\"source-python\">        </span><span class=\"source-python meta-item-access-python meta-indexed-name-python\">xxx_foo_lf</span><span class=\"source-python meta-item-access-python punctuation-definition-arguments-begin-python\">[</span><span class=\"source-python meta-item-access-python meta-item-access-arguments-python constant-numeric-dec-python\">0</span><span class=\"source-python meta-item-access-python punctuation-definition-arguments-end-python\">]</span><span class=\"source-python\"> </span><span class=\"source-python keyword-operator-assignment-python\">=</span><span class=\"source-python\"> </span><span class=\"source-python meta-function-call-python meta-function-call-generic-python\">_Foo</span><span class=\"source-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span>\n<span class=\"source-python meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python variable-parameter-function-call-python\">_bank_index</span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python keyword-operator-assignment-python\">=</span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python\"> </span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">0</span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span>\n<span class=\"source-python meta-function-call-python meta-function-call-arguments-python\">            </span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python variable-parameter-function-call-python\">_bar</span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python keyword-operator-assignment-python\">=</span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">0</span><span class=\"source-python meta-function-call-python meta-function-call-arguments-python punctuation-separator-arguments-python\">,</span>\n<span class=\"source-python meta-function-call-python meta-function-call-arguments-python\">        </span><span class=\"source-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-python constant-other-ellipsis-python\">...</span>\n</pre>\n<h3 id=\"the-generated-linguafrancaxxx-python-module-a-c-extension-module\" style=\"position:relative;\"><a href=\"#the-generated-linguafrancaxxx-python-module-a-c-extension-module\" aria-label=\"the generated linguafrancaxxx python module a c extension module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The generated LinguaFrancaXXX Python module (a C extension module)</h3>\n<p>The rest of the files in <code>src-gen/XXX</code> form a <a href=\"https://docs.python.org/3/extending/building.html#building-c-and-c-extensions\">Python C extension\nmodule</a>\ncalled <code>LinguaFrancaXXX</code> that can be built by executing <code>python3 setup.py build_ext --inplace</code> in the <code>src-gen/XXX/</code> folder. In this case, Python will\nread the instructions in the <code>src-gen/XXX/setup.py</code> file and build a\n<code>LinguaFrancaXXX</code> module in <code>src-gen/XXX/</code>. The <code>--inplace</code> flag puts the\ncompiled extension (the <code>LinguaFrancaXXX*.so</code> in the example above) in the\n<code>src-gen</code> directory alongside the <code>XXX.py</code> file.</p>\n<p>As mentioned before, the LinguaFrancaXXX module is separate from\n<code>src-gen/XXX/XXX.py</code> but interacts with it. Next, we explain this interaction.</p>\n<h3 id=\"interactions-between-xxxpy-and-linguafrancaxxx\" style=\"position:relative;\"><a href=\"#interactions-between-xxxpy-and-linguafrancaxxx\" aria-label=\"interactions between xxxpy and linguafrancaxxx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interactions between XXX.py and LinguaFrancaXXX</h3>\n<p>The LinguaFrancaXXX module is imported in <code>src-gen/XXX/XXX.py</code>:</p>\n<pre class=\"source-lf language-python\"><span class=\"source-python keyword-control-import-python\">from</span><span class=\"source-python\"> </span><span class=\"source-python\">LinguaFrancaXXX</span><span class=\"source-python\"> </span><span class=\"source-python keyword-control-import-python\">import</span><span class=\"source-python\"> </span><span class=\"source-python keyword-operator-arithmetic-python\">*</span>\n</pre>\n<p>This is done to enable the main function in <code>src-gen/XXX/XXX.py</code> to make a call to the <code>start()</code> function, which is part of the generated (and installed) <code>LinguaFrancaXXX</code> module. This function will start the main event handling loop of the C runtime.</p>\n<p>From then on, <code>LinguaFrancaXXX</code> will call reactions that are defined in <code>src-gen/XXX/XXX.py</code> when needed.</p>\n<h3 id=\"the-linguafrancabase-package\" style=\"position:relative;\"><a href=\"#the-linguafrancabase-package\" aria-label=\"the linguafrancabase package permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The LinguaFrancaBase package</h3>\n<p><a href=\"https://pypi.org/project/LinguaFrancaBase/\">LinguaFrancaBase</a> is a package that contains several helper methods and definitions that are necessary for the Python target to work. This module is installable via <code>python3 -m pip install LinguaFrancaBase</code> but is automatically installed if needed during the installation of <code>LinguaFrancaXXX</code>. The source code of this package can be found <a href=\"https://github.com/lf-lang/reactor-c-py\">on GitHub</a>.</p>\n<p>This package’s modules are imported in the <code>XXX.py</code> program:</p>\n<pre class=\"source-lf language-python\"><span class=\"source-python keyword-control-import-python\">from</span><span class=\"source-python\"> </span><span class=\"source-python\">LinguaFrancaBase</span><span class=\"source-python punctuation-separator-period-python\">.</span><span class=\"source-python\">constants</span><span class=\"source-python\"> </span><span class=\"source-python keyword-control-import-python\">import</span><span class=\"source-python\"> </span><span class=\"source-python keyword-operator-arithmetic-python\">*</span><span class=\"source-python\"> </span><span class=\"source-python comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-python comment-line-number-sign-python\">Useful constants</span>\n<span class=\"source-python keyword-control-import-python\">from</span><span class=\"source-python\"> </span><span class=\"source-python\">LinguaFrancaBase</span><span class=\"source-python punctuation-separator-period-python\">.</span><span class=\"source-python\">functions</span><span class=\"source-python\"> </span><span class=\"source-python keyword-control-import-python\">import</span><span class=\"source-python\"> </span><span class=\"source-python keyword-operator-arithmetic-python\">*</span><span class=\"source-python\"> </span><span class=\"source-python comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-python comment-line-number-sign-python\">Useful helper functions</span>\n<span class=\"source-python keyword-control-import-python\">from</span><span class=\"source-python\"> </span><span class=\"source-python\">LinguaFrancaBase</span><span class=\"source-python punctuation-separator-period-python\">.</span><span class=\"source-python\">classes</span><span class=\"source-python\"> </span><span class=\"source-python keyword-control-import-python\">import</span><span class=\"source-python\"> </span><span class=\"source-python keyword-operator-arithmetic-python\">*</span><span class=\"source-python\"> </span><span class=\"source-python comment-line-number-sign-python punctuation-definition-comment-python\">#</span><span class=\"source-python comment-line-number-sign-python\">Useful classes</span>\n</pre>\n<h3 id=\"already-imported-python-modules\" style=\"position:relative;\"><a href=\"#already-imported-python-modules\" aria-label=\"already imported python modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Already imported Python modules</h3>\n<p>The following packages are already imported and thus do not need to be re-imported by the user:</p>\n<pre class=\"source-lf language-python\"><span class=\"source-python keyword-control-import-python\">import</span><span class=\"source-python\"> </span><span class=\"source-python\">os</span>\n<span class=\"source-python keyword-control-import-python\">import</span><span class=\"source-python\"> </span><span class=\"source-python\">sys</span>\n<span class=\"source-python keyword-control-import-python\">import</span><span class=\"source-python\"> </span><span class=\"source-python\">copy</span>\n</pre>\n</div>\n<div class=\"lf-ts\">\n<p>When a TypeScript reactor is compiled, the generated code is placed inside a project directory. This is because there are two steps of compilation. First, the Lingua Franca compiler generates a TypeScript project from the TypeScript reactor code. Second, the Lingua Franca compiler runs a TypeScript compiler on the generated TypeScript project to produce executable JavaScript. This is illustrated below:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf\">Lingua Franca (</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\">lf) </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\">&gt; TypeScript (</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\">ts) </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\">&gt; JavaScript (</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf\">js)</span>\n</pre>\n<p>Assuming the directory containing our Lingua Franca file <code>Foo.lf</code> is named <code>TS</code>, the compiler will generate the following:</p>\n<ol>\n<li>TS/package.json</li>\n<li>TS/node_modules</li>\n<li>TS/Foo/tsconfig.json</li>\n<li>TS/Foo/babel.config.js</li>\n<li>TS/Foo/src/</li>\n<li>TS/Foo/dist/</li>\n</ol>\n<p>Items 1, 3, and 4 are configuration files for the generated project. Item 2 is a node_modules directory with contents specified by item 1. Item 5 is the directory for generated TypeScript code. Item 6 is the directory for compiled JavaScript code. In addition to the generated code for your Lingua Franca program, items 5 and 6 include libraries from the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> submodule.</p>\n<p>The Lingua Franca compiler automatically invokes other programs as it compiles a Lingua Franca (.lf) file to a Node.js executable JavaScript (.js) file. The files package.json, babel.config.js, and tsconfig.json are used to configure the behavior of those other programs. Whenever you compile a .lf file for the first time, the Lingua Franca compiler will copy default versions of these configuration files into the new project so the other programs can run. <strong>The Lingua Franca compiler will only copy a default configuration file into a project if that file is not already present in the generated project.</strong> This means you, the reactor programmer, may safely modify these configuration files to control the finer points of compilation. Beware, other generated files in the project’s src and dist directories may be overwritten by the compiler.</p>\n<h3 id=\"packagejson\" style=\"position:relative;\"><a href=\"#packagejson\" aria-label=\"packagejson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>package.json</h3>\n<p>Node.js uses a <a href=\"https://nodejs.org/en/knowledge/getting-started/npm/what-is-the-file-package-json/\">package.json</a> file to describe metadata relevant to a Node project. This includes a list of project dependencies (i.e. modules) used by the project. When the Lingua Franca compiler copies a default package.json file into a Lingua Franca project that doesn’t already have a package.json, the compiler runs the command <code>npm install</code> to create a node_modules directory. The default package.json only lists dependencies for the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> submodule. <a href=\"#using-node-modules\">Follow these instructions</a> to modify package.json if you want to use other Node modules in your reactors.</p>\n<h3 id=\"tsconfigjson\" style=\"position:relative;\"><a href=\"#tsconfigjson\" aria-label=\"tsconfigjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tsconfig.json</h3>\n<p>After generating a TypeScript program from a .lf file, the Lingua Franca compiler uses the TypeScript compiler <code>tsc</code> to run a type check. The behavior of <code>tsc</code> is configured by the <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">tsconfig.json</a> file. You probably won’t need to modify tsconfig.json, but you can if you know what you’re doing.</p>\n<h3 id=\"babelconfigjs\" style=\"position:relative;\"><a href=\"#babelconfigjs\" aria-label=\"babelconfigjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>babel.config.js</h3>\n<p>If the <code>tsc</code> type check was successful, the Lingua Franca compiler uses <code>babel</code> to compile the generated TypeScript code into JavaScript. (This <a href=\"https://iamturns.com/typescript-babel/\">blog post</a> articulates the advantages of using <code>babel</code> over <code>tsc</code> to generate JavaScript.) There are many different flavors of JavaScript and the <a href=\"https://babeljs.io/docs/en/configuration\">babel.config.js</a> file specifies exactly what <code>babel</code> should generate. This is the file to edit if you want the Lingua Franca compiler to produce a different version of JavaScript as its final output.</p>\n<h3 id=\"debugging-type-errors\" style=\"position:relative;\"><a href=\"#debugging-type-errors\" aria-label=\"debugging type errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debugging Type Errors</h3>\n<p>Let’s take the <a href=\"#a-minimal-example\">minimal reactor example</a>, and intentionally break it by adding a type error into the reaction.</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">ReactionTypeError</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">timer</span><span class=\"source-lf\"> t;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(t) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">let</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-readwrite-ts\">foo</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts keyword-operator-type-annotation-ts\">:</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts support-type-primitive-ts\">number</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-type-annotation-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts string-quoted-double-ts\">THIS IS NOT A NUMBER</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Hello World.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>This reactor will not compile, and should you attempt to compile it you will get an output from the compiler which looks something like this:</p>\n<pre class=\"source-lf language-text\">--- Standard output from command:\nsrc/ReactionTypeError.ts(23,25): error TS2322: Type &#039;&quot;THIS IS NOT A NUMBER&quot;&#039; is not assignable to type &#039;number&#039;.\n\n--- End of standard output.</pre>\n<p>In particular the output</p>\n<pre class=\"source-lf language-text\">src/ReactionTypeError.ts(23,25): error TS2322: Type &#039;&quot;THIS IS NOT A NUMBER&quot;&#039; is not assignable to type &#039;number&#039;.</pre>\n<p>identifies the problem: surprisingly, the string <code>\"THIS IS NOT A NUMBER\"</code> is not a number. However the line information <code>(23,25)</code> is a little confusing because it points to the location of the type error <strong>in the generated</strong> .ts file <code>ReactionTypeError/src/ReactionTypeError.ts</code> not in the original .lf file <code>ReactionTypeError.lf</code>. The .ts files produced by the TypeScript code generator are quite readable if you are familiar with the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> submodule, but even if you aren’t familiar it is not too difficult to track down the problem. Just open <code>ReactionTypeError/src/ReactionTypeError.ts</code> in your favorite text editor (we recommend <a href=\"https://code.visualstudio.com/docs/languages/typescript\">Visual Studio</a> for its excellent TypeScript integration) and look at line 23.</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf constant-numeric-int-lflang\">14</span><span class=\"source-lf\">        </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">this</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">addReaction</span><span class=\"source-lf\">(</span>\n<span class=\"source-lf constant-numeric-int-lflang\">15</span><span class=\"source-lf\">            </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> Triggers(</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">this</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">t</span><span class=\"source-lf\">),</span>\n<span class=\"source-lf constant-numeric-int-lflang\">16</span><span class=\"source-lf\">            </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> Args(</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">this</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">t</span><span class=\"source-lf\">),</span>\n<span class=\"source-lf constant-numeric-int-lflang\">17</span><span class=\"source-lf\">            function (this, __t: Readable&lt;Tag&gt;) {</span>\n<span class=\"source-lf constant-numeric-int-lflang\">18</span><span class=\"source-lf\">                </span><span class=\"source-lf comment-line-double-dash-lflang\">// =============== START react prologue</span>\n<span class=\"source-lf constant-numeric-int-lflang\">19</span><span class=\"source-lf\">                </span><span class=\"source-lf storage-modifier-lflang\">const</span><span class=\"source-lf\"> util </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">this</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">util</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf constant-numeric-int-lflang\">20</span><span class=\"source-lf\">                let t </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">__t</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">get</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf constant-numeric-int-lflang\">21</span><span class=\"source-lf\">                </span><span class=\"source-lf comment-line-double-dash-lflang\">// =============== END react prologue</span>\n<span class=\"source-lf constant-numeric-int-lflang\">22</span><span class=\"source-lf\">                try {</span>\n<span class=\"source-lf constant-numeric-int-lflang\">23</span><span class=\"source-lf\">                    let foo:number </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">THIS IS NOT A NUMBER</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf constant-numeric-int-lflang\">24</span><span class=\"source-lf\">                    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">console</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">log</span><span class=\"source-lf\">(</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Hello World.</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf\">);</span>\n<span class=\"source-lf constant-numeric-int-lflang\">25</span><span class=\"source-lf\">                } finally {</span>\n<span class=\"source-lf constant-numeric-int-lflang\">26</span><span class=\"source-lf\">                    </span><span class=\"source-lf comment-line-double-dash-lflang\">// =============== START react epilogue</span>\n<span class=\"source-lf constant-numeric-int-lflang\">27</span>\n<span class=\"source-lf constant-numeric-int-lflang\">28</span><span class=\"source-lf\">                    </span><span class=\"source-lf comment-line-double-dash-lflang\">// =============== END react epilogue</span>\n<span class=\"source-lf constant-numeric-int-lflang\">29</span><span class=\"source-lf\">                }</span>\n<span class=\"source-lf constant-numeric-int-lflang\">30</span><span class=\"source-lf\">            }</span>\n<span class=\"source-lf constant-numeric-int-lflang\">31</span><span class=\"source-lf\">        );</span>\n</pre>\n<p>There (inside the try block) we can find the problematic reaction code. <em>Reaction code is copied verbatim into generated .ts files</em>.</p>\n<p>It can be a bit harder to interpret type errors outside of reaction code, but most type error messages are still relatively clear. For example if you attempt to connect a reactor output to an incompatibly typed input like:</p>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">ConnectionError</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Sender</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">r</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Receiver</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">s</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">foo</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">r</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">bar</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Sender</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> foo:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Receiver</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> bar:</span><span class=\"source-lf storage-type-lflang\">string</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>you should get an error like</p>\n<pre class=\"source-lf language-text\">--- Standard output from command:\nsrc/InputTypeError.ts(36,23): error TS2345: Argument of type &#039;OutPort&lt;number&gt;&#039; is not assignable to parameter of type &#039;Port&lt;string&gt;&#039;.\n  Types of property &#039;value&#039; are incompatible.\n    Type &#039;number | undefined&#039; is not assignable to type &#039;string | undefined&#039;.\n      Type &#039;number&#039; is not assignable to type &#039;string | undefined&#039;.\n\n--- End of standard output.</pre>\n<p>The key message being <code>Argument of type 'OutPort&#x3C;number>' is not assignable to parameter of type 'Port&#x3C;string>'</code>.</p>\n<p>One last tip: if you attempt to reference a port, action, timer etc. named <code>foo</code> that isn’t declared in the triggers, uses, or effects declaration of the reaction, you will get the error <code>Cannot find name 'foo'</code> in the reaction body.</p>\n<h3 id=\"utility-function-reference\" style=\"position:relative;\"><a href=\"#utility-function-reference\" aria-label=\"utility function reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Utility Function Reference</h3>\n<p>These utility functions may be called within a TypeScript reaction:</p>\n<p><code>util.requestShutdown(): void</code> Ends execution after one microstep. See <a href=\"#stopping-execution\">Stopping Execution</a>.</p>\n<p><code>util.getCurrentTag(): Tag</code> Gets the current (logical) tag. See <a href=\"#tags\">Tags</a>.</p>\n<p><code>util.getCurrentLogicalTime(): TimeValue</code> Gets the current logical TimeValue. See <a href=\"#timed-behavior\">Time</a>.</p>\n<p><code>util.getCurrentPhysicalTime(): TimeValue</code> Gets the current physical TimeValue. See <a href=\"#timed-behavior\">Time</a>.</p>\n<p><code>util.getElapsedLogicalTime(): TimeValue</code> Gets the elapsed logical TimeValue from execution start. See <a href=\"#timed-behavior\">Time</a>.</p>\n<p><code>util.getElapsedPhysicalTime(): TimeValue</code> Gets the elapsed physical TimeValue from execution start. See <a href=\"#timed-behavior\">Time</a>.</p>\n<p><code>util.success(): void</code> Invokes the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> App’s default success callback. FIXME: Currently doesn’t do anything in Lingua Franca.</p>\n<p><code>util.failure(): void</code> Invokes the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> App’s default failure callback. Throws an error.</p>\n<h3 id=\"building-reactor-ts-documentation\" style=\"position:relative;\"><a href=\"#building-reactor-ts-documentation\" aria-label=\"building reactor ts documentation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building Reactor-ts Documentation</h3>\n<p>To build and view proper documentation for <code>time.ts</code> (and other reactor-ts libraries), install <a href=\"https://typedoc.org/\">typedoc</a> and run</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">typedoc</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">-out</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">docs</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">src</span>\n</pre>\n<p>from the root of the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a>. You probably already have the reactor-ts submodule at</p>\n<pre class=\"source-lf language-text\">lingua-franca/xtext/org.icyphy.linguafranca/src/lib/TS/reactor-ts/</pre>\n<p>You should see an output like.</p>\n<pre class=\"source-lf language-text\">Using TypeScript 3.8.3 from /usr/local/lib/node_modules/typescript/lib\nRendering [========================================] 100%\n\nDocumentation generated at /Users/&lt;username&gt;/git/lingua-franca/xtext/org.icyphy.linguafranca/src/lib/TS/reactor-ts/docs</pre>\n<p>Open that path in a browser with <code>/index.html</code> appended to the end like</p>\n<pre class=\"source-lf language-text\">/Users/&lt;username&gt;/git/lingua-franca/xtext/org.icyphy.linguafranca/src/lib/TS/reactor-ts/docs/index.html</pre>\n<p>to navigate the docs.</p>\n</div>\n<div class=\"lf-rs\">\n<h3 id=\"target-properties\" style=\"position:relative;\"><a href=\"#target-properties\" aria-label=\"target properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Target Properties</h3>\n<p>Target properties may be mentioned like so:</p>\n<pre class=\"source-lf language-lf-rust\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang comment-line-double-dash-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang comment-line-double-dash-lflang\">// enables single-file project layout</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">single-file-project</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">false</span><span class=\"source-lf meta-targetspec-lflang\">,</span>\n<span class=\"source-lf meta-targetspec-lflang comment-line-double-dash-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang comment-line-double-dash-lflang\">// timeout for the execution. The program will shutdown at most after the specified duration.</span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">timeout</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-int-lflang\">3</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-numeric-lflang\">sec</span><span class=\"source-lf meta-targetspec-lflang\">,</span>\n<span class=\"source-lf meta-targetspec-lflang\"></span>\n<span class=\"source-lf meta-targetspec-lflang\">    </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">cargo-features</span><span class=\"source-lf meta-targetspec-lflang\">: [</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">cli</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang\">]</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span>\n</pre>\n<p>See <a href=\"/docs/handbook/target-declaration\">Target Declaration</a> for the full list of supported target properties.</p>\n<h3 id=\"the-executable\" style=\"position:relative;\"><a href=\"#the-executable\" aria-label=\"the executable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Executable</h3>\n<p>The executable name is the name of the main reactor <em>transformed to snake_case</em>: <code>main reactor RustProgram</code> will generate <code>rust_program</code>. See <a href=\"/docs/handbook/target-declaration#command-line-arguments\">Command-Line Arguments</a> for details.</p>\n<h3 id=\"file-layout\" style=\"position:relative;\"><a href=\"#file-layout\" aria-label=\"file layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>File layout</h3>\n<p>The Rust code generator generates a Cargo project with a classical layout:</p>\n<pre class=\"source-lf language-text\">├── Cargo.lock\n├── Cargo.toml\n├── src\n│   ├── main.rs\n│   └── reactors\n│       ├── mod.rs\n|       ├── ...\n|\n└── target\n    ├── ...</pre>\n<p>The module structure is as follows:</p>\n<ul>\n<li>the crate has a module <code>reactors</code></li>\n<li>each LF reactor has its own submodule of <code>reactors</code>. For instance, <code>Minimal.lf</code> will generate <code>minimal.rs</code>. The name is transformed to snake_case.</li>\n</ul>\n<p>This means that to refer to the contents of another reactor module, e.g. that of <code>Other.lf</code>, you have to write <code>super::other::Foo</code>. This is relevant to access <code>preamble</code> items.</p>\n<h4 id=\"single-file-layout\" style=\"position:relative;\"><a href=\"#single-file-layout\" aria-label=\"single file layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single-file layout</h4>\n<p>The Rust target supports an alternative file layout, where all reactors are generated into the <code>main.rs</code> file, making the project fit in a single file (excluding <code>Cargo.toml</code>). <em>The module structure is unchanged:</em> the file still contains a <code>mod reactors { ... }</code> within which each reactor has its <code>mod foo { ... }</code>. You can thus change the layout without having to update any LF code.</p>\n<p>Set the target property <code>single-file-project: true</code> to use this layout.</p>\n<p>Note: this alternative layout is provided for the purposes of making self-contained benchmark files. Generating actual runnable benchmarks from an LF file may be explored in the future.</p>\n<h3 id=\"specifying-dependencies\" style=\"position:relative;\"><a href=\"#specifying-dependencies\" aria-label=\"specifying dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Specifying dependencies</h3>\n<p>The Rust code generator leverages Cargo to allow LF programs to profit from Rust’s large package ecosystem. The code generator may also link support files written in pure Rust into the generated crate. Target properties are used to achieve all this.</p>\n<h4 id=\"adding-cargo-dependencies\" style=\"position:relative;\"><a href=\"#adding-cargo-dependencies\" aria-label=\"adding cargo dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding cargo dependencies</h4>\n<p>The <code>cargo-dependencies</code> target property may be used to specify dependencies on crates coming from <code>crates.io</code>. Here’s an example:</p>\n<pre class=\"source-lf language-lf-rust\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">   </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">cargo-dependencies</span><span class=\"source-lf meta-targetspec-lflang\">: {</span>\n<span class=\"source-lf meta-targetspec-lflang\">      </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">termcolor</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">0.8</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span>\n<span class=\"source-lf meta-targetspec-lflang\">   }</span>\n<span class=\"source-lf\">};</span>\n</pre>\n<p>The value of the <em>cargo-dependencies</em> property is a map of crate identifiers to a <em>dependency-spec</em>. An informal example follows:</p>\n<pre class=\"source-lf language-json\"><span class=\"source-json\">cargo-dependencies: </span><span class=\"source-json meta-structure-dictionary-json punctuation-definition-dictionary-begin-json\">{</span>\n<span class=\"source-json meta-structure-dictionary-json\">   </span><span class=\"source-json meta-structure-dictionary-json comment-line-double-slash-js punctuation-definition-comment-json\">//</span><span class=\"source-json meta-structure-dictionary-json comment-line-double-slash-js\"> Name-of-the-crate: &quot;version&quot;</span>\n<span class=\"source-json meta-structure-dictionary-json\">   </span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">r</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">a</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">n</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">d</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-key-value-json\">:</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json\"> </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json punctuation-definition-string-begin-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json\">0.8</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json punctuation-definition-string-end-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-pair-json\">,</span>\n<span class=\"source-json meta-structure-dictionary-json\">   </span><span class=\"source-json meta-structure-dictionary-json comment-line-double-slash-js punctuation-definition-comment-json\">//</span><span class=\"source-json meta-structure-dictionary-json comment-line-double-slash-js\"> Equivalent to using an explicit map:</span>\n<span class=\"source-json meta-structure-dictionary-json\">   </span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">r</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">a</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">n</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">d</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-key-value-json\">:</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json\"> </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json punctuation-definition-dictionary-begin-json\">{</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json\">     </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">v</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">e</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">r</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">s</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">i</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">o</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">n</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-key-value-json\">:</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json\"> </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json punctuation-definition-string-begin-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json\">0.8</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json punctuation-definition-string-end-json\">&quot;</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json\">   </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json punctuation-definition-dictionary-end-json\">}</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-pair-json\">,</span>\n<span class=\"source-json meta-structure-dictionary-json\">   </span><span class=\"source-json meta-structure-dictionary-json comment-line-double-slash-js punctuation-definition-comment-json\">//</span><span class=\"source-json meta-structure-dictionary-json comment-line-double-slash-js\"> The map allows specifying more details</span>\n<span class=\"source-json meta-structure-dictionary-json\">   </span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">r</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">a</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">n</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">d</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-key-value-json\">:</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json\"> </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json punctuation-definition-dictionary-begin-json\">{</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json\">     </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json comment-line-double-slash-js punctuation-definition-comment-json\">//</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json comment-line-double-slash-js\"> A path to a local unpublished crate.</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json\">     </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json comment-line-double-slash-js punctuation-definition-comment-json\">//</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json comment-line-double-slash-js\"> Note &#039;path&#039; is mutually exclusive with &#039;git&#039;.</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json\">     </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">p</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">a</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">t</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">h</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-key-value-json\">:</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json\"> </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json punctuation-definition-string-begin-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json\">/home/me/Git/local-rand-clone</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json punctuation-definition-string-end-json\">&quot;</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json\">   </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json punctuation-definition-dictionary-end-json\">}</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-pair-json\">,</span>\n<span class=\"source-json meta-structure-dictionary-json\">   </span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">r</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">a</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">n</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">d</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-key-value-json\">:</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json\"> </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json punctuation-definition-dictionary-begin-json\">{</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json\">     </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json comment-line-double-slash-js punctuation-definition-comment-json\">//</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json comment-line-double-slash-js\"> A URL to a git repo</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json\">     </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">g</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">i</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">t</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-key-value-json\">:</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json\"> </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json punctuation-definition-string-begin-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json\">https://github.com/me/rand</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json punctuation-definition-string-end-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-pair-json\">,</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json\">     </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json comment-line-double-slash-js punctuation-definition-comment-json\">//</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json comment-line-double-slash-js\"> Specify an explicit Git revision number</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json\">     </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">r</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">e</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">v</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-key-value-json\">:</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json\"> </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json punctuation-definition-string-begin-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json\">abcdef1234</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json punctuation-definition-string-end-json\">&quot;</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json\">   </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json punctuation-definition-dictionary-end-json\">}</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-pair-json\">,</span>\n<span class=\"source-json meta-structure-dictionary-json\">   </span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">r</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">a</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">n</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">d</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-key-value-json\">:</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json\"> </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json punctuation-definition-dictionary-begin-json\">{</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json\">     </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">v</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">e</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">r</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">s</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">i</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">o</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">n</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-key-value-json\">:</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json\"> </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json punctuation-definition-string-begin-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json\">0.8</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json punctuation-definition-string-end-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-pair-json\">,</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json\">     </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json comment-line-double-slash-js punctuation-definition-comment-json\">//</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json comment-line-double-slash-js\"> you can specify cargo features</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json\">     </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">f</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">e</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">a</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">t</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">u</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">r</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">e</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">s</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-key-value-json\">:</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json\"> </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json punctuation-definition-array-begin-json\">[</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json string-quoted-double-json punctuation-definition-string-begin-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json string-quoted-double-json\">some-cargo-feature</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json string-quoted-double-json punctuation-definition-string-end-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json punctuation-separator-array-json\">,</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json punctuation-definition-array-end-json\">]</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json\">   </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json punctuation-definition-dictionary-end-json\">}</span>\n<span class=\"source-json meta-structure-dictionary-json punctuation-definition-dictionary-end-json\">}</span>\n</pre>\n<p>When a <em>dependency-spec</em> is specified as an object, its key-value pairs correspond directly to those of a <a href=\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories\">Cargo dependency specification</a>. For instance for the following dependency spec:</p>\n<pre class=\"source-lf language-json\"><span class=\"source-json\">   rand: </span><span class=\"source-json meta-structure-dictionary-json punctuation-definition-dictionary-begin-json\">{</span>\n<span class=\"source-json meta-structure-dictionary-json\">     </span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">v</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">e</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">r</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">s</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">i</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">o</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">n</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-key-value-json\">:</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json\"> </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json punctuation-definition-string-begin-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json\">0.8</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json string-quoted-double-json punctuation-definition-string-end-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-pair-json\">,</span>\n<span class=\"source-json meta-structure-dictionary-json\">     </span><span class=\"source-json meta-structure-dictionary-json comment-line-double-slash-js punctuation-definition-comment-json\">//</span><span class=\"source-json meta-structure-dictionary-json comment-line-double-slash-js\"> you can specify cargo features</span>\n<span class=\"source-json meta-structure-dictionary-json\">     </span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">f</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">e</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">a</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">t</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">u</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">r</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">e</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">s</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-key-value-json\">:</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json\"> </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json punctuation-definition-array-begin-json\">[</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json string-quoted-double-json punctuation-definition-string-begin-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json string-quoted-double-json\">some-cargo-feature</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json string-quoted-double-json punctuation-definition-string-end-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json punctuation-separator-array-json\">,</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json punctuation-definition-array-end-json\">]</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json\">   </span><span class=\"source-json meta-structure-dictionary-json punctuation-definition-dictionary-end-json\">}</span>\n</pre>\n<p>we add the following to the generated <code>Cargo.toml</code>:</p>\n<pre class=\"source-lf language-toml\"><span class=\"source-toml meta-tag-table-toml punctuation-definition-table-toml\">[</span><span class=\"source-toml meta-tag-table-toml entity-other-attribute-name-table-toml\">dependencies</span><span class=\"source-toml meta-tag-table-toml\">.</span><span class=\"source-toml meta-tag-table-toml entity-other-attribute-name-table-toml\">rand</span><span class=\"source-toml meta-tag-table-toml punctuation-definition-table-toml\">]</span>\n<span class=\"source-toml keyword-key-toml\">version</span><span class=\"source-toml\"> </span><span class=\"source-toml punctuation-definition-keyValuePair-toml\">=</span><span class=\"source-toml\"> </span><span class=\"source-toml string-quoted-single-basic-line-toml\">&quot;0.8&quot;</span>\n<span class=\"source-toml keyword-key-toml\">features</span><span class=\"source-toml\"> </span><span class=\"source-toml punctuation-definition-keyValuePair-toml\">=</span><span class=\"source-toml\"> </span><span class=\"source-toml punctuation-definition-array-toml\">[</span><span class=\"source-toml string-quoted-single-basic-line-toml\">&quot;some-cargo-feature&quot;</span><span class=\"source-toml punctuation-definition-array-toml\">]</span>\n</pre>\n<p>Not all keys are necessarily supported though, e.g. the <code>registry</code> key is not supported (yet).</p>\n<h4 id=\"configuring-the-runtime\" style=\"position:relative;\"><a href=\"#configuring-the-runtime\" aria-label=\"configuring the runtime permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring the runtime</h4>\n<p>The runtime crate can be configured just like other crates, using the <code>cargo-dependencies</code> target property, e.g.:</p>\n<pre class=\"source-lf language-json\"><span class=\"source-json\">cargo-dependencies: </span><span class=\"source-json meta-structure-dictionary-json punctuation-definition-dictionary-begin-json\">{</span>\n<span class=\"source-json meta-structure-dictionary-json\">   </span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">r</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">e</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">a</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">c</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">t</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">o</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">r</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">_</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">r</span><span class=\"source-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">t</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-key-value-json\">:</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json\"> </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json punctuation-definition-dictionary-begin-json\">{</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json\">     </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">f</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">e</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">a</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">t</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">u</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">r</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">e</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json invalid-illegal-expected-dictionary-separator-json\">s</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json punctuation-separator-dictionary-key-value-json\">:</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json\"> </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json punctuation-definition-array-begin-json\">[</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json string-quoted-double-json punctuation-definition-string-begin-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json string-quoted-double-json\">parallel-runtime</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json string-quoted-double-json punctuation-definition-string-end-json\">&quot;</span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-array-json punctuation-definition-array-end-json\">]</span>\n<span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json meta-structure-dictionary-value-json\">   </span><span class=\"source-json meta-structure-dictionary-json meta-structure-dictionary-value-json meta-structure-dictionary-json punctuation-definition-dictionary-end-json\">}</span>\n<span class=\"source-json meta-structure-dictionary-json punctuation-definition-dictionary-end-json\">}</span>\n</pre>\n<p>The dependency is always included, with defaults picked by LFC. The location information (<em>path</em>/<em>git</em>/<em>version</em> key) is optional.\nSee <a href=\"https://lf-lang.github.io/reactor-rust/reactor_rt/index.html\">reactor_rt</a> for the supported features.</p>\n<h4 id=\"linking-support-files\" style=\"position:relative;\"><a href=\"#linking-support-files\" aria-label=\"linking support files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linking support files</h4>\n<p>You can link-in additional rust modules using the <code>rust-include</code> target property:</p>\n<pre class=\"source-lf language-lf-rust\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Rust</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang\">  </span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">rust-include</span><span class=\"source-lf meta-targetspec-lflang\">: [</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">foo.rs</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang\">]</span>\n<span class=\"source-lf meta-targetspec-lflang\">}</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n</pre>\n<p>The property is a list of paths (relative to the directory containing the <code>.lf</code> file). Each path should either point to a Rust file (<code>.rs</code>), or a directory that contains a <code>mod.rs</code> file. Each of those will be copied to the <code>src</code> directory of the generated Cargo project, and linked in to the <code>main.rs</code> file.</p>\n<p>To refer to the included module, you can use e.g. <code>crate::foo</code> if your module is named <code>foo</code>.</p>\n<h3 id=\"generation-scheme\" style=\"position:relative;\"><a href=\"#generation-scheme\" aria-label=\"generation scheme permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generation scheme</h3>\n<p>Each reactor generates its own <code>struct</code> which contains state variables. For instance,</p>\n<table>\n<thead>\n<tr>\n<th>LF</th>\n<th>Generated Rust</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<pre class=\"source-lf language-lf-rust\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">SomeReactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">  </span><span class=\"source-lf storage-modifier-lflang\">state</span><span class=\"source-lf\"> field: </span><span class=\"source-lf entity-name-type-lflang\">u32</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">0</span><span class=\"source-lf\">)</span>\n<span class=\"source-lf\">}</span>\n</pre>\n</td>\n<td>\n<pre class=\"source-lf language-rust\"><span class=\"source-rust storage-type-rust\">struct</span><span class=\"source-rust\"> </span><span class=\"source-rust entity-name-type-rust\">SomeReactor</span><span class=\"source-rust\"> </span><span class=\"source-rust\">{</span>\n<span class=\"source-rust\">  field: </span><span class=\"source-rust support-type-primitive-rust\">u32</span>\n<span class=\"source-rust\">}</span>\n</pre>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In the following we refer to that struct as the <em>state struct</em>.</p>\n<h4 id=\"reactions\" style=\"position:relative;\"><a href=\"#reactions\" aria-label=\"reactions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reactions</h4>\n<p>Reactions are each generated in a separate method of the reactor struct. Reaction names are unspecified and may be mangled to prevent explicit calling. The parameters of that method are</p>\n<ul>\n<li><code>&#x26;mut self</code>: the state struct described above,</li>\n<li><code>ctx: &#x26;mut ReactionCtx</code>: the context object for the reaction execution,</li>\n<li>For each dependency, a parameter is generated.\n<ul>\n<li>If the dependency is a component of this reactor, the name of the parameter is just the name of the component</li>\n<li>If the dependency is a port of a child reactor, the name of the parameter is <code>&#x3C;name of the child instance>__&#x3C;name of the port></code>, e.g. <code>child__out</code> for <code>child.out</code>.</li>\n<li>The type of the parameter depends on the kind of dependency and of component:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Use/trigger dependency</th>\n<th>Effect dependency</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n</li>\n</ul>\n<p>Port of type <code>T</code></p>\n</td>\n<td>\n<p><code>&#x26;ReadablePort&#x3C;T></code></p>\n</td>\n<td>\n<p><code>WritablePort&#x3C;T></code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Logical action of type <code>T</code></p>\n</td>\n<td>\n<p><code>&#x26;LogicalAction&#x3C;T></code></p>\n</td>\n<td>\n<p><code>&#x26;mut LogicalAction&#x3C;T></code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Physical action of type <code>T</code></p>\n</td>\n<td>\n<p><code>&#x26;PhysicalActionRef&#x3C;T></code></p>\n</td>\n<td>\n<p><code>&#x26;mut PhysicalActionRef&#x3C;T></code></p>\n</td>\n</tr>\n<tr>\n<td>Timer</td>\n<td>\n<p><code>&#x26;Timer</code></p>\n</td>\n<td>\n<p>n/a</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Port bank of type <code>T</code></p>\n</td>\n<td>\n<p><code>&#x26;ReadablePortBank&#x3C;T></code></p>\n</td>\n<td>\n<p><code>WritablePortBank&#x3C;T></code></p>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Undeclared dependencies, and dependencies on timers and <code>startup</code> or <code>shutdown</code>, do not generate a parameter.</p>\n<p>The <a href=\"https://lf-lang.github.io/reactor-rust/reactor_rt/struct.ReactionCtx.html\"><code>ReactionCtx</code></a> object is a mediator to manipulate all those dependency objects. It has methods to set ports, schedule actions, retrieve the current logical time, etc.</p>\n<p>For instance:</p>\n<pre class=\"source-lf language-lf-rust\"><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Source</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> out: </span><span class=\"source-lf entity-name-type-lflang\">i32</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> out </span><span class=\"source-lf meta-embedded-block-rs\">{=</span>\n<span class=\"source-lf meta-embedded-block-rs\">        ctx.</span><span class=\"source-lf meta-embedded-block-rs entity-name-function-rust\">set</span><span class=\"source-lf meta-embedded-block-rs\">(</span><span class=\"source-lf meta-embedded-block-rs\">out, </span><span class=\"source-lf meta-embedded-block-rs constant-numeric-integer-decimal-rust\">76600</span><span class=\"source-lf meta-embedded-block-rs\">)</span>\n<span class=\"source-lf meta-embedded-block-rs\">    </span><span class=\"source-lf meta-embedded-block-rs\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>In this example, the context object <code>ctx</code> is used to set a port to a value. The port is in scope as <code>out</code>.</p>\n<blockquote>\n<p>⚠ TODO when the runtime crate is public link to the docs, they should be the most exhaustive documentation.</p>\n</blockquote>\n</div>","headings":[{"value":"Overview","depth":2},{"value":"Requirements","depth":2},{"value":"Limitations","depth":2},{"value":"The Target Specification","depth":2},{"value":"Parameters and State Variables","depth":2},{"value":"Array Values for Parameters","depth":3},{"value":"Array Values for States","depth":3},{"value":"States and Parameters with Struct Values","depth":3},{"value":"Array-Valued Parameters","depth":3},{"value":"State Variables","depth":3},{"value":"Array Expressions for State Variables and Parameters","depth":3},{"value":"Assigning Arbitrary Initial Expressions to State Variables and Parameters","depth":3},{"value":"Array or Object Parameters","depth":3},{"value":"Inputs and Outputs","depth":2},{"value":"Sending and Receiving Data","depth":3},{"value":"Fixed Length Array Inputs and Outputs","depth":3},{"value":"Variable Length Array Inputs and Outputs","depth":3},{"value":"Dynamically Allocated Data","depth":3},{"value":"Mutable Inputs","depth":3},{"value":"String Types","depth":3},{"value":"Macros For Setting Output Values","depth":3},{"value":"Sending and Receiving Large Data Types","depth":3},{"value":"Sending and Receiving Objects","depth":3},{"value":"Sending and Receiving Custom Types","depth":3},{"value":"Time","depth":2},{"value":"Tags","depth":3},{"value":"Summary of Time Functions","depth":3},{"value":"Actions","depth":2},{"value":"Zero-Delay Actions","depth":3},{"value":"Actions With Values","depth":3},{"value":"Zero-Delay Actions","depth":3},{"value":"Actions With Values","depth":3},{"value":"Schedule Functions","depth":3},{"value":"Stopping Execution","depth":2},{"value":"Log and Debug Information","depth":2},{"value":"Libraries Available to Programmers","depth":2},{"value":"Libraries Available in All Programs","depth":4},{"value":"Standard C Libraries","depth":4},{"value":"Available Libraries Requiring #include","depth":4},{"value":"Available Libraries Requiring #include, a files entry, and a cmake-include","depth":4},{"value":"Scheduler Target Property","depth":2},{"value":"Target Implementation Details","depth":2},{"value":"Included Libraries","depth":3},{"value":"Single Threaded Implementation","depth":3},{"value":"Multithreaded Implementation","depth":3},{"value":"The XXX.py file containing user code","depth":3},{"value":"The generated LinguaFrancaXXX Python module (a C extension module)","depth":3},{"value":"Interactions between XXX.py and LinguaFrancaXXX","depth":3},{"value":"The LinguaFrancaBase package","depth":3},{"value":"Already imported Python modules","depth":3},{"value":"package.json","depth":3},{"value":"tsconfig.json","depth":3},{"value":"babel.config.js","depth":3},{"value":"Debugging Type Errors","depth":3},{"value":"Utility Function Reference","depth":3},{"value":"Building Reactor-ts Documentation","depth":3},{"value":"Target Properties","depth":3},{"value":"The Executable","depth":3},{"value":"File layout","depth":3},{"value":"Single-file layout","depth":4},{"value":"Specifying dependencies","depth":3},{"value":"Adding cargo dependencies","depth":4},{"value":"Configuring the runtime","depth":4},{"value":"Linking support files","depth":4},{"value":"Generation scheme","depth":3},{"value":"Reactions","depth":4}],"frontmatter":{"permalink":"/docs/handbook/target-language-details","title":"Target Language Details","oneline":"Detailed reference for each target langauge.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Expressions","oneline":"Expressions in Lingua Franca.","permalink":"/docs/handbook/expressions"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Target Declaration","oneline":"The target declaration and its parameters in Lingua Franca.","permalink":"/docs/handbook/target-declaration"}}}},"pageContext":{"id":"3-target-language-details","slug":"/docs/handbook/target-language-details","repoPath":"/packages/documentation/copy/en/reference/Target Language Details.md","previousID":"24e3b5ae-ac22-5a79-956a-4258d40ae77c","nextID":"de456861-0847-5726-aba2-da3ba779bd9d","lang":"en","modifiedTime":"2023-08-29T19:51:30.105Z"}},"staticQueryHashes":[]}