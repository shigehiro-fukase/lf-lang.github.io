{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/running-benchmarks","result":{"data":{"markdownRemark":{"id":"ac793a6f-ced3-5dd9-972e-a6891620a738","excerpt":"Running Benchmarks The LF repository contains a series of benchmarks in the benchmark directory. There is also a flexible benchmark runner that automates the…","html":"<h1 id=\"running-benchmarks\" style=\"position:relative;\"><a href=\"#running-benchmarks\" aria-label=\"running benchmarks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running Benchmarks</h1>\n<p>The LF repository contains a series of benchmarks in the <code>benchmark</code> directory. There is also a flexible benchmark runner that automates the process of running benchmarks for various settings and collecting results from those benchmarks. It is located in <code>benchmark/runner</code>.\nThe runner is written in python and is based on <a href=\"https://hydra.cc/docs/intro\">hydra</a>, a tool for dynamically creating hierarchical configurations by composition</p>\n<h2 id=\"prerequisites\" style=\"position:relative;\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h2>\n<h3 id=\"install-python-dependencies\" style=\"position:relative;\"><a href=\"#install-python-dependencies\" aria-label=\"install python dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install Python dependencies</h3>\n<p>The benchmark runner is written in Python and requires a working Python3 installation. It also requires a few python packages to be installed. Namely, <code>hydra-core</code>, <code>cogapp</code> and <code>pandas</code>.</p>\n<p>It is recommended to install the dependencies and execute the benchmark runner in a virtual environment. For instance, this can be done with <code>virtualenv</code>:</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">virtualenv</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">~/virtualenvs/lfrunner</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">p</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">python3</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell support-function-builtin-shell\">source</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">~/virtualenvs/lfrunner/bin/activate</span>\n</pre>\n<p>Then the dependencies can be installed by running:</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">pip</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">install</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">r</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">benchmark/runner/requirements.txt</span>\n</pre>\n<h3 id=\"compile-lfc\" style=\"position:relative;\"><a href=\"#compile-lfc\" aria-label=\"compile lfc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compile lfc</h3>\n<p>For running LF benchmarks, the command-line compiler <code>lfc</code> needs to be built. Simply run</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">bin/build-lfc</span>\n</pre>\n<p>in the root directory of the LF repository.</p>\n<p>Also, the environment variable <code>LF_PATH</code> needs to be set and point to the location of the LF repository. This needs to be an absolute path.</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-expression-assignment-shell storage-modifier-export-shell\">export</span><span class=\"source-shell meta-statement-shell meta-expression-assignment-shell\"> </span><span class=\"source-shell meta-statement-shell meta-expression-assignment-shell variable-other-assignment-shell\">LF_PATH</span><span class=\"source-shell meta-statement-shell meta-expression-assignment-shell keyword-operator-assignment-shell\">=</span><span class=\"source-shell meta-statement-shell meta-expression-assignment-shell string-unquoted-argument-shell\">/path/to/lf</span>\n</pre>\n<h3 id=\"setup-savina\" style=\"position:relative;\"><a href=\"#setup-savina\" aria-label=\"setup savina permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup Savina</h3>\n<p>Currently all of our benchmarks are ported from the <a href=\"https://doi.org/10.1145/2687357.2687368\">Savina actor benchmark suite</a>. In order to compare our LF implementations with actor based implementation, the Savina benchmark suite needs to be downloaded and compiled. Note that we require a modified version of the Savina suite, that adds support for specifying the number of worker threads and that includes CAF implementations of most benchmarks.</p>\n<p>To download and build Savina, run the following commands:</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">git</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">clone</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">https://github.com/lf-lang/savina.git</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell support-function-builtin-shell\">cd</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">savina</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">mvn</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">install</span>\n</pre>\n<p>Building Savina requires a Java 8 JDK. Depending on the local setup, <code>JAVA_HOME</code> might need to be adjusted before running <code>mvn</code> in order to point to the correct JDK.</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-expression-assignment-shell storage-modifier-export-shell\">export</span><span class=\"source-shell meta-statement-shell meta-expression-assignment-shell\"> </span><span class=\"source-shell meta-statement-shell meta-expression-assignment-shell variable-other-assignment-shell\">JAVA_HOME</span><span class=\"source-shell meta-statement-shell meta-expression-assignment-shell keyword-operator-assignment-shell\">=</span><span class=\"source-shell meta-statement-shell meta-expression-assignment-shell string-unquoted-argument-shell\">/path/to/jdk8</span>\n</pre>\n<p>Before invoking the benchmark runner, the environment variable <code>SAVINA_PATH</code> needs to be set and point to the location of the Savina repository using an absolute path.</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-expression-assignment-shell storage-modifier-export-shell\">export</span><span class=\"source-shell meta-statement-shell meta-expression-assignment-shell\"> </span><span class=\"source-shell meta-statement-shell meta-expression-assignment-shell variable-other-assignment-shell\">SAVINA_PATH</span><span class=\"source-shell meta-statement-shell meta-expression-assignment-shell keyword-operator-assignment-shell\">=</span><span class=\"source-shell meta-statement-shell meta-expression-assignment-shell string-unquoted-argument-shell\">/path/to/savina</span>\n</pre>\n<h4 id=\"caf\" style=\"position:relative;\"><a href=\"#caf\" aria-label=\"caf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CAF</h4>\n<p>To further build the CAF benchmarks, CAF 0.16.5 needs to be downloaded, compiled and installed first:</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">git</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">clone</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">-branch</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-quoted-double-shell punctuation-definition-string-begin-shell\">&quot;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-quoted-double-shell\">0.16.5</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-quoted-double-shell punctuation-definition-string-end-shell\">&quot;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">git@github.com:actor-framework/actor-framework.git</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">mkdir</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">actor-framework/build</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell punctuation-separator-statement-and-shell\">&amp;&amp;</span><span class=\"source-shell meta-statement-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell support-function-builtin-shell\">cd</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">actor-framework/build</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">cmake</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">DCMAKE_INSTALL_PREFIX=</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option keyword-operator-redirect-shell\">&lt;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">preferred/install/location</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option keyword-operator-redirect-shell\">&gt;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">..</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">make</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">install</span>\n</pre>\n<p>Then, from within the Savina directory, the CAF benchmarks can be build:</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">cmake</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">DCAF_ROOT_DIR=</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option keyword-operator-redirect-shell\">&lt;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">path/to/caf/install/location</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option keyword-operator-redirect-shell\">&gt;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">..</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">make</span>\n</pre>\n<p>The CAF benchmarks are used in these two publications:</p>\n<ul>\n<li><a href=\"https://www.researchgate.net/publication/322519252_Reducing_Message_Latency_and_CPU_Utilization_in_the_CAF_Actor_Framework\">“Reducing Message Latency and CPU Utilization in the CAF Actor Framework”</a></li>\n<li><a href=\"https://link.springer.com/article/10.1007/s10766-020-00663-1\">“Improving the Performance of Actors on Multi-cores with Parallel Patterns”</a></li>\n</ul>\n<h2 id=\"running-a-benchmark\" style=\"position:relative;\"><a href=\"#running-a-benchmark\" aria-label=\"running a benchmark permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running a benchmark</h2>\n<p>A benchmark can simply be run by specifying a benchmark and a target. For instance</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell support-function-builtin-shell\">cd</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">benchmark/runner</span>\n<span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">./run_benchmark.py</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">benchmark=savina_micro_pingpong</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">target=lf-c</span>\n</pre>\n<p>runs the Ping Pong benchmark from the Savina suite using the C-target of LF. Currently, supported targets are <code>lf-c</code>, <code>lf-cpp</code>, <code>akka</code>, and <code>caf</code> where <code>akka</code> corresponds to the Akka implementation in the original Savina suite and <code>caf</code> corresponds to a implementation using the <a href=\"https://www.actor-framework.org/\">C++ Actor Framework</a> .</p>\n<p>The benchmarks can also be configured. The <code>threads</code> and <code>iterations</code> parameters apply to every benchmark and specify the number of worker threads as well as how many times the benchmark should be run. Most benchmarks allow additional parameters. For instance, the Ping Pong benchmark sends a configurable number of pings that be set via the <code>benchmark.params.messages</code> configuration key. Running the Akka version of the Ping Pong benchmark for 1000 messages, 1 thread and 12 iterations could be done like this:</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">./run_benchmark.py</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">benchmark=savina_micro_pingpong</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">target=akka</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">threads=</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell constant-numeric-shell constant-numeric-integer-shell\">1</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">iterations=</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell constant-numeric-shell constant-numeric-integer-shell\">12</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">benchmark.params.messages=</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell constant-numeric-shell constant-numeric-integer-shell\">1000</span>\n</pre>\n<p>Each benchmark run produces an output directory in the scheme <code>outputs/&#x3C;date>/&#x3C;time>/</code> (e.g. <code>outputs/2020-12-17/16-46-16/</code>). This directory contains a files <code>results.csv</code> which contains the measured execution time for each iteration and all the parameters used for running this particular benchmark. The CSV file contains precisely one row per iteration.</p>\n<h2 id=\"running-a-series-of-benchmarks-multirun\" style=\"position:relative;\"><a href=\"#running-a-series-of-benchmarks-multirun\" aria-label=\"running a series of benchmarks multirun permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running a series of benchmarks (multirun)</h2>\n<p>The runner also allows to automatically run a single benchmark or a series of benchmarks with a range of settings. The multirun feature is simply used by the <code>-m</code> switch. For instance:</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">./run_benchmark.py</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">m</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">benchmark=savina_micro_pingpong</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">target=</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-quoted-double-shell punctuation-definition-string-begin-shell\">&quot;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-quoted-double-shell\">glob(*)</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-quoted-double-shell punctuation-definition-string-end-shell\">&quot;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">threads=</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell constant-numeric-shell constant-numeric-integer-shell\">1</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">,2,4</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">iterations=</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell constant-numeric-shell constant-numeric-integer-shell\">12</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">benchmark.params.messages=</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-quoted-double-shell punctuation-definition-string-begin-shell\">&quot;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-quoted-double-shell\">range(1000000,10000000,1000000)</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-quoted-double-shell punctuation-definition-string-end-shell\">&quot;</span>\n</pre>\n<p>runs the Ping Pong benchmark for all targets using 1, 2 and 4 threads and for a number of messages ranging from 1M to 10M (in 1M steps).</p>\n<p>This mechanism can also be used to run multiple benchmarks. For instance,</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">./run_benchmark.py</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">m</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">benchmark=</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-quoted-double-shell punctuation-definition-string-begin-shell\">&quot;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-quoted-double-shell\">glob(*)</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-quoted-double-shell punctuation-definition-string-end-shell\">&quot;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">target=</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-quoted-double-shell punctuation-definition-string-begin-shell\">&quot;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-quoted-double-shell\">glob(*)</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-quoted-double-shell punctuation-definition-string-end-shell\">&quot;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">threads=</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell constant-numeric-shell constant-numeric-integer-shell\">4</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">iterations=</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell constant-numeric-shell constant-numeric-integer-shell\">12</span>\n</pre>\n<p>runs all benchmarks for all targets using 4 threads and 12 iterations.</p>\n<p>The results for a multirun are written to a directory in the scheme <code>multirun/&#x3C;date>/&#x3C;time>/&#x3C;n></code> (e.g. <code>multirun/2020-12-17/17-11-03/0/</code>) where <code>&#x3C;n></code> denotes the particular run. Each of the <code>&#x3C;n></code> subdirectories contains a <code>results.csv</code> for this particular run.</p>\n<h2 id=\"collecting-results-from-multirun\" style=\"position:relative;\"><a href=\"#collecting-results-from-multirun\" aria-label=\"collecting results from multirun permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collecting results from multirun</h2>\n<p>A second script called <code>collect_results.py</code> provides a convenient way for collecting results from a multirun and merging them into a single CSV file. Simply running</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">./collect_results.py</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">multirun/</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell keyword-operator-redirect-shell\">&lt;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">dat</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\">e</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell keyword-operator-redirect-shell\">&gt;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">/</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell keyword-operator-redirect-shell\">&lt;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">tim</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\">e</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell keyword-operator-redirect-shell\">&gt;</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">/</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">out.csv</span>\n</pre>\n<p>collects all results from the particular multirun and stores the merged data structure in out.csv. <code>collect_results.py</code> not only merges the results, but it also calculates minimum, maximum and median execution time for each individual run. The resulting CSV does not contain the measured values of individual iterations anymore and only contains a single row per run. This behavior can be disabled with the <code>--raw</code> command line flag. With the flag set, the results from all runs are merged as say are and the resulting file contains rows for all individual runs, but no minimum, maximum and median values.</p>\n<h2 id=\"how-it-works\" style=\"position:relative;\"><a href=\"#how-it-works\" aria-label=\"how it works permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How it works</h2>\n<p>The benchmark runner itself is actually relatively simple. Most of the complexity is dealt with by <a href=\"https://hydra.cc/\">hydra</a>. Hydra is a complex and convenient tool for handling configurations. These configurations can be merged from different sources and be overridden via command line arguments as you have seen above. The actual benchmark runner receives the configuration represented as nested dictionaries from hydra. It then executes the benchmarks precisely as instructed by the configuration.</p>\n<p>The configuration is split into two big parts: the benchmark configuration and the target configuration. The benchmark configuration describes a particular benchmark instance. This is described in more detail in the <a href=\"#adding-new-benchmarks\">next section</a>. The target configuration specifies how to run a benchmark for a specific target (e.g. akka, lf-c, lf-cpp). This is not intended to be changed by the user and therefore isn’t explained in detail here. Essentially a benchmark run is split into 5 steps as is outlined in the following. The target configuration precisely specifies what needs to be done in each step</p>\n<ol>\n<li><strong>copy</strong> The command used to copy relevant source files to a temporary directory.</li>\n<li><strong>gen</strong> The command used to generate a configured LF file. This is intended to apply a code generation tool like cog to the source code in order to make benchmarks parameterized.</li>\n<li><strong>compile</strong> The command used to compile the benchmark.</li>\n<li><strong>run</strong> The command used to generate the benchmark.</li>\n<li><strong>parser</strong> A parser (a python method) that is used to process the output of the benchmark run and that returns the execution times of individual benchmark runs in a list.</li>\n</ol>\n<h2 id=\"adding-new-benchmarks\" style=\"position:relative;\"><a href=\"#adding-new-benchmarks\" aria-label=\"adding new benchmarks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding new benchmarks</h2>\n<p>In order to add new benchmarks, a new configuration file needs to be created in the <code>conf/benchmark</code> subdirectory. Benchmarks may be grouped by the underscore-delimited segments in their file name. For instance, the PingPong benchmark is part of the micro-benchmarks of the Savina suite, and consequently its configuration file is named in <code>conf/benchmark/savina_micro_pingpong.yaml</code>. This allows to later specify <code>benchmark=savina/micro/pingpong</code> on the command line. Below you can see the contents of <code>savina_micro_pingpong.yaml</code> which we will break down in the following.</p>\n<pre class=\"source-lf language-yaml\"><span class=\"source-yaml comment-line-number-sign-yaml punctuation-definition-comment-yaml\">#</span><span class=\"source-yaml comment-line-number-sign-yaml\"> @package benchmark</span>\n<span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">n</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">ame</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">Ping Pong</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">p</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">arams</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">  </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">p</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">ings</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml constant-numeric-integer-yaml\">1000000</span>\n<span class=\"source-yaml\"></span>\n<span class=\"source-yaml comment-line-number-sign-yaml punctuation-definition-comment-yaml\">#</span><span class=\"source-yaml comment-line-number-sign-yaml\"> target specific configuration</span>\n<span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">t</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">argets</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">  </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">a</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">kka</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">j</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">ar</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">${savina_path}/target/savina-0.0.1-SNAPSHOT-jar-with-dependencies.jar</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">c</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">lass</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">edu.rice.habanero.benchmarks.pingpong.PingPongAkkaActorBenchmark</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">r</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">un_args</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">      </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">p</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">ings</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-definition-sequence-begin-yaml\">[</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml\">-n</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-separator-sequence-yaml\">,</span><span class=\"source-yaml meta-flow-sequence-yaml\"> </span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml\">&lt;value&gt;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-definition-sequence-end-yaml\">]</span>\n<span class=\"source-yaml\">  </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">c</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">af</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">b</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">in</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">caf_01_pingpong</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">r</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">un_args</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">      </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">p</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">ings</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-definition-sequence-begin-yaml\">[</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml\">-n</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-separator-sequence-yaml\">,</span><span class=\"source-yaml meta-flow-sequence-yaml\"> </span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml\">&lt;value&gt;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-definition-sequence-end-yaml\">]</span>\n<span class=\"source-yaml\">  </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">l</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">f-cpp</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">c</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">opy_sources</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">      </span><span class=\"source-yaml punctuation-definition-block-sequence-item-yaml\">-</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">${lf_path}/benchmark/Cpp/Savina/src/BenchmarkRunner.lf</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">      </span><span class=\"source-yaml punctuation-definition-block-sequence-item-yaml\">-</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">${lf_path}/benchmark/Cpp/Savina/src/micro</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">l</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">f_file</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">micro/PingPong.lf</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">b</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">inary</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">PingPong</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">g</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">en_args</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml constant-language-null-yaml\">null</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">r</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">un_args</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">      </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">p</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">ings</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-definition-sequence-begin-yaml\">[</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml\">--count</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-separator-sequence-yaml\">,</span><span class=\"source-yaml meta-flow-sequence-yaml\"> </span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml\">&lt;value&gt;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-definition-sequence-end-yaml\">]</span>\n<span class=\"source-yaml\">  </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">l</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">f-c</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">c</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">opy_sources</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">      </span><span class=\"source-yaml punctuation-definition-block-sequence-item-yaml\">-</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">${lf_path}/benchmark/C/Savina/src/micro/PingPong.lf</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">l</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">f_file</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">PingPong.lf</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">b</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">inary</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">PingPong</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">g</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">en_args</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">      </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">p</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">ings</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-definition-sequence-begin-yaml\">[</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml\">-D</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-separator-sequence-yaml\">,</span><span class=\"source-yaml meta-flow-sequence-yaml\"> </span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml\">count=&lt;value&gt;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-definition-sequence-end-yaml\">]</span>\n</pre>\n<p>The first line <code># @package benchmark</code> is hydra specific. It specifies that this configuration is part of the benchmark package. Essentially this enables the configuration to be assigned to <code>benchmark</code> on the command line.</p>\n<pre class=\"source-lf language-yaml\"><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">n</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">ame</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">Ping Pong</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">p</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">arams</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">  </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">p</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">ings</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml constant-numeric-integer-yaml\">1000000</span>\n</pre>\n<p>This part sets the benchmark name to “Ping Pong” and declares that there is one benchmark specific parameter: <code>pings</code>. This configuration also set the default value for <code>pings</code> to 1000000. Note that the <code>params</code> dictionary may specify an arbitrary number of parameters.</p>\n<p>The remainder of the configuration file contains target specific configurations that provide instructions on how the particular benchmark can be run for the various targets. This block</p>\n<pre class=\"source-lf language-yaml\"><span class=\"source-yaml comment-line-number-sign-yaml punctuation-definition-comment-yaml\">#</span><span class=\"source-yaml comment-line-number-sign-yaml\"> target specific configuration</span>\n<span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">t</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">argets</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">  </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">a</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">kka</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">j</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">ar</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">${savina_path}/target/savina-0.0.1-SNAPSHOT-jar-with-dependencies.jar</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">c</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">lass</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">edu.rice.habanero.benchmarks.pingpong.PingPongAkkaActorBenchmark</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">r</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">un_args</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">      </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">p</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">ings</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-definition-sequence-begin-yaml\">[</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml\">-n</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-separator-sequence-yaml\">,</span><span class=\"source-yaml meta-flow-sequence-yaml\"> </span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml\">&lt;value&gt;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-definition-sequence-end-yaml\">]</span>\n</pre>\n<p>specifies how the benchmark is executed using Akka. The <code>jar</code> and <code>class</code> configuration keys simply instruct the benchmark runner which class in which jar to run. Note that hydra automatically resolves <code>${savina_path}</code> to the value you set in the <code>SAVINA_PATH</code> environment variable.</p>\n<p>The <code>run_args</code> configuration key allows specification of further arguments that are added to the command to be executed when running the benchmark. It expects a dictionary, where the keys are names of parameters as specified above in the <code>params</code> configuration key, and the values are a list of arguments to be added to the executed command. In the case of the <code>pings</code> parameter, the Akka implementation of the benchmark expects the <code>-n</code> flag followed by the parameter value. Note that the special string <code>&#x3C;value></code> is automatically resolved by the runner to the actual parameter value when executing the command.</p>\n<p>Instructions for the C++ target are specified as follows.</p>\n<pre class=\"source-lf language-yaml\"><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">l</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">f-cpp</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">  </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">c</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">opy_sources</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml punctuation-definition-block-sequence-item-yaml\">-</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">${lf_path}/benchmark/Cpp/Savina/src/BenchmarkRunner.lf</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml punctuation-definition-block-sequence-item-yaml\">-</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">${lf_path}/benchmark/Cpp/Savina/src/micro</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">  </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">l</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">f_file</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">micro/PingPong.lf</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">  </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">b</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">inary</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">PingPong</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">  </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">g</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">en_args</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml constant-language-null-yaml\">null</span>\n<span class=\"source-yaml\">  </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">r</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">un_args</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">p</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">ings</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-definition-sequence-begin-yaml\">[</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml\">--count</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-separator-sequence-yaml\">,</span><span class=\"source-yaml meta-flow-sequence-yaml\"> </span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml\">&lt;value&gt;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-definition-sequence-end-yaml\">]</span>\n</pre>\n<p>For C and C++ programs, we cannot run a precompiled program as it is the case for Akka, but we need to compile the benchmark first. The benchmark handler automatically performs the build in a temporary directory, so that it doesn’t interfere with the source tree. First, it copies all files listed under <code>copy_sources</code> to the temporary directory. If the specified source path is a directory, the whole directory is copied recursively. The <code>lf_file</code> configuration file specifies the file to be compiled with <code>lfc</code>. <code>binary</code> indicates the name of the binary file resulting from the compilation process.</p>\n<p>For some benchmarks, not all parameters can be applied at runtime. In such cases, the <code>gen_args</code> configuration key can be used to provide additional arguments that should be passed to cog. cog then applies the parameters to the source file (assuming that the source LF file uses cog directives to generate code according to the configuration). Similarly <code>run_args</code> specifies any additional arguments that should be passed to the binary when running the benchmark. In the case of the C++ configuration for the Ping Pong benchmark, the number of pings is a runtime parameter and specified with <code>--count</code>. Since this particular benchmark does not have any parameter that need to be set during generation, <code>gen_args</code> is set to <code>null</code>.</p>\n<p>Finally, we have the C part of the target configuration.</p>\n<pre class=\"source-lf language-yaml\"><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">l</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">f-c</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">  </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">c</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">opy_sources</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml punctuation-definition-block-sequence-item-yaml\">-</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">${lf_path}/benchmark/C/Savina/src/micro/PingPong.lf</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">  </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">l</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">f_file</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">PingPong.lf</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">  </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">b</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">inary</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml string-quoted-double-yaml\">PingPong</span><span class=\"source-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span>\n<span class=\"source-yaml\">  </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">g</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">en_args</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span>\n<span class=\"source-yaml\">    </span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">p</span><span class=\"source-yaml string-unquoted-plain-out-yaml entity-name-tag-yaml\">ings</span><span class=\"source-yaml punctuation-separator-key-value-mapping-yaml\">:</span><span class=\"source-yaml\"> </span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-definition-sequence-begin-yaml\">[</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml\">-D</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-separator-sequence-yaml\">,</span><span class=\"source-yaml meta-flow-sequence-yaml\"> </span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-begin-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml\">count=&lt;value&gt;</span><span class=\"source-yaml meta-flow-sequence-yaml string-quoted-double-yaml punctuation-definition-string-end-yaml\">&quot;</span><span class=\"source-yaml meta-flow-sequence-yaml punctuation-definition-sequence-end-yaml\">]</span>\n</pre>\n<p>This is very similar to the C++ configuration. However, the C target of LF currently does not support overriding of parameter values at runtime. Therefore, all parameters need to be provided as arguments to the code generator and the benchmark needs to provide corresponding cog directives.</p>\n<p>New benchmarks can be simply added by replicating this example and adjusting the precise configuration values and parameters to the specific benchmark.</p>","headings":[{"value":"Running Benchmarks","depth":1},{"value":"Prerequisites","depth":2},{"value":"Install Python dependencies","depth":3},{"value":"Compile lfc","depth":3},{"value":"Setup Savina","depth":3},{"value":"CAF","depth":4},{"value":"Running a benchmark","depth":2},{"value":"Running a series of benchmarks (multirun)","depth":2},{"value":"Collecting results from multirun","depth":2},{"value":"How it works","depth":2},{"value":"Adding new benchmarks","depth":2}],"frontmatter":{"permalink":"/docs/handbook/running-benchmarks","title":"Running Benchmarks","oneline":"Running Benchmarks.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Regression Tests","oneline":"Regression Tests for Lingua Franca.","permalink":"/docs/handbook/regression-tests"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Website Development","oneline":"Development of the Lingua Franca website.","permalink":"/docs/handbook/website-development"}}}},"pageContext":{"id":"5-running-benchmarks","slug":"/docs/handbook/running-benchmarks","repoPath":"/packages/documentation/copy/en/developer/Running Benchmarks.md","previousID":"b004db16-2d0f-54e3-a2a8-d9d6f510eea1","nextID":"6fe7623e-c5ce-509d-9532-9d282ae790cc","lang":"en","modifiedTime":"2023-07-06T00:35:21.196Z"}},"staticQueryHashes":[]}