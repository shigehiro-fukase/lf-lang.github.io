{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/containerized-execution","result":{"data":{"markdownRemark":{"id":"2548d58b-6c82-5c27-83b8-e05a47521264","excerpt":"For the C target at least, the Lingua Franca code generator is able to generate a Dockerfile when it generates the C source files. To enable this, include the…","html":"<p>For the <code>C</code> target at least, the Lingua Franca code generator is able to generate a Dockerfile when it generates the C source files. To enable this, include the <code>docker</code> property in your target specification, as follows:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">    docker</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">true</span>\n<span class=\"source-lf meta-targetspec-lflang\">};</span>\n</pre>\n<p>The generated Docker file has the same name as the LF file except that the extension is <code>.Dockerfile</code> and will be put in the <code>src-gen</code> directory. You can also specify options. Currently, only the base image (<code>FROM</code>) can be customized, but this will be extended to allow further customization is the future. To customize the Docker file, instead of just <code>true</code> above, which gives default options, specify the options as in the following example:</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\"> {</span>\n<span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">    docker</span><span class=\"source-lf meta-targetspec-lflang\">: {</span><span class=\"source-lf meta-targetspec-lflang variable-parameter-lflang\">FROM</span><span class=\"source-lf meta-targetspec-lflang\">: </span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">alpine:latest</span><span class=\"source-lf meta-targetspec-lflang string-quoted-double-lflang\">&quot;</span><span class=\"source-lf meta-targetspec-lflang\">}</span>\n<span class=\"source-lf\">};</span>\n</pre>\n<p>This specifies that the base image is the latest version of <code>alpine</code>, a very small Linux. In fact, <code>alpine:latest</code> is the default value for this option, so you only need to specify this option if you need something other than <code>alpine:latest</code>.</p>\n<p>How to use this depends on whether your application is federated. You will need to <a href=\"https://docs.docker.com/get-docker/\">install Docker</a> if you haven’t already in order to use this.</p>\n<h2 id=\"unfederated-execution\" style=\"position:relative;\"><a href=\"#unfederated-execution\" aria-label=\"unfederated execution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unfederated Execution</h2>\n<h3 id=\"using-docker-build-and-docker-run\" style=\"position:relative;\"><a href=\"#using-docker-build-and-docker-run\" aria-label=\"using docker build and docker run permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using docker build and docker run</h3>\n<p>Suppose your LF source file is <code>Foo.lf</code>. When you run <code>lfc</code> or use the IDE to generate code, a file called <code>Foo.Dockerfile</code> will appear in the <code>src_gen</code> directory. You can use this file to build a Docker image as follows. First, make sure you are in the same directory as the source file. Then issue the command:</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell\">   </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">docker</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">build</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">t</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">foo</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">f</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">src-gen/Foo.Dockerfile</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">.</span>\n</pre>\n<p>This will create a Docker image with tag <code>foo</code>. The tag is required to be all lower-case letters. By convention, we advise using the LF source file name, converted to lower case.</p>\n<p>You can then use this tag to run the image in a container:</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell\">    </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">docker</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">run</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">t</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">-rm</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">foo</span>\n</pre>\n<p>The <code>-t</code> option creates a pseudo terminal, which is necessary for you to see any output produced by your program to <code>stdout</code>. If your program also reads from <code>stdin</code>, then you will need to give the <code>-i</code> option as well, or combine the two as <code>it</code>.</p>\n<p>The <code>--rm</code> option is important. This removes the container upon completion of the run. If you omit this option, the container will continue to exist even after your program has terminated. You can alternatively remove the container after the run using <code>docker rm</code>.</p>\n<p>If you wish for your program to run in the background, give a <code>-d</code> option as well (for “detached”). In this case, you will not see any output from your run.</p>\n<p>The above run command can include any supported command-line arguments to the LF program. For example, to specify a logical timeout, you can do this:</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell\">    </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">docker</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">run</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">t</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">-rm</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">foo</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">-timeout</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell constant-numeric-shell constant-numeric-integer-shell\">20</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">sec</span>\n</pre>\n<h3 id=\"using-docker-compose-up\" style=\"position:relative;\"><a href=\"#using-docker-compose-up\" aria-label=\"using docker compose up permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using docker compose up</h3>\n<p>When you use <code>lfc</code> to compile <code>Foo.lf</code>, a file called <code>docker-compose.yml</code> will also appear in the same directory where <code>Foo.Dockerfile</code> is located. <code>cd</code> to that directory. Then, use <code>docker compose up</code> to automatically build and run the container. Once the container finishes execution, use <code>docker compose down</code> in the same directory where <code>docker-compose.yml</code> is located to remove the container.</p>\n<h2 id=\"federated-execution\" style=\"position:relative;\"><a href=\"#federated-execution\" aria-label=\"federated execution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Federated Execution</h2>\n<h3 id=\"using-docker-build-and-docker-run-1\" style=\"position:relative;\"><a href=\"#using-docker-build-and-docker-run-1\" aria-label=\"using docker build and docker run 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using docker build and docker run</h3>\n<p>For a federated Lingua Franca program, one Dockerfile is created for each federate plus an additional one for the RTI. The Dockerfile for the RTI will be generated at <code>src-gen/RTI</code>. You will need to run <code>docker build</code> for each of these. For example, to build the image for the RTI, you can do this:</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">docker</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">build</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">t</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">distributedcountcontainerized_rti</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">f</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">src-gen/DistributedCountContainerized_RTI.Dockerfile</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">.</span>\n</pre>\n<p>This is for the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/docker/federated/DistributedCountContainerized.lf\">DistributedCountContainerized.lf</a>, a federated that automatically runs in multiple Docker containers (one for the RTI and one for each federate) in continuous integration.</p>\n<p>Now, there are several options for how to proceed. One is to create a named network on which to run your federation. For example, to create a network named <code>lf</code>, do this:</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell\">    </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">docker</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">network</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">create</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">lf</span>\n</pre>\n<p>You can then run the RTI on this network and assign the RTI a name that the federates can use to find the RTI:</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell\">    </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">docker</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">run</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">t</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">-rm</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">-network</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">lf</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">-name</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">distributedcount-rti</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">distributedcount_rti</span>\n</pre>\n<p>Here, the assigned name is not quite the same as the tag that was specified when building the image (the last argument is the tag of the image to run in a container) because a host name is not allowed to have an underscore in it.</p>\n<p>Currently, you will also have to specify this host name in the LF source file so that the federates know where to find the RTI. E.g., in <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/federated/DistributedCount.lf\">DistributedCount.lf</a>, change the end of the file to read as follows:</p>\n<pre class=\"source-lf language-lf\"><span class=\"source-lf storage-modifier-lflang\">federated</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">DistributedCount</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">at</span><span class=\"source-lf\"> distributedcount</span><span class=\"source-lf keyword-operator-lflang\">-</span><span class=\"source-lf\">rti {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Count</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Print</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">c</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">out</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">p</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">in</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">after</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-int-lflang\">200</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<p>Notice the <code>at distributedcount-rti</code>, which must match the name you use when running the RTI. <strong>FIXME:</strong> We should find a way to make this more automatic!</p>\n<p>In two other terminals, you can now run the other federates on the same network:</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">docker</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">run</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">t</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">-rm</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">-network</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">lf</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">distributedcount_c</span>\n</pre>\n<p>and</p>\n<pre class=\"source-lf language-sh\"><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-statement-command-name-shell entity-name-function-call-shell entity-name-command-shell\">docker</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">run</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">t</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">-rm</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument-shell constant-other-option-dash-shell\">-</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell string-unquoted-argument constant-other-option\">-network</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">lf</span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell\"> </span><span class=\"source-shell meta-statement-shell meta-statement-command-shell meta-argument-shell string-unquoted-argument-shell\">distributedcount_p</span>\n</pre>\n<h3 id=\"using-docker-compose-up-1\" style=\"position:relative;\"><a href=\"#using-docker-compose-up-1\" aria-label=\"using docker compose up 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using docker compose up</h3>\n<p>For a federated Lingua Franca program, once you use <code>lfc</code> to compile <code>Foo.lf</code>, on top of the <code>docker-compose.yml</code> for the reactors, an additional <code>docker-compose.yml</code> will be generated for the RTI and placed in <code>src-gen/RTI</code>.</p>\n<p>To run the federated program, open two terminals. In the first terminal, go to <code>src-gen/RTI</code> and use <code>docker compose up</code> to build and run the containerized RTI. Wait until the RTI is booted up. Then, open a second terminal and <code>cd</code> to the top level folder of the program (this is the folder that contains one folder for each of the federated reactors). You should see a <code>docker-compose.yml</code> there. Run <code>docker compose up</code> to build and run the containers.</p>\n<p>Once the program finished executing, run <code>docker compose down</code> in both the folder that contains the <code>docker-compose.yml</code> for the RTI as well as the folder that contains the <code>docker-compose.yml</code> for the reactors to remove the containers.</p>","headings":[{"value":"Unfederated Execution","depth":2},{"value":"Using docker build and docker run","depth":3},{"value":"Using docker compose up","depth":3},{"value":"Federated Execution","depth":2},{"value":"Using docker build and docker run","depth":3},{"value":"Using docker compose up","depth":3}],"frontmatter":{"permalink":"/docs/handbook/containerized-execution","title":"Containerized Execution","oneline":"Containerized Execution using Docker","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Tracing","oneline":"Tracing (preliminary)","permalink":"/docs/handbook/tracing"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Security","oneline":"Secure Federated Execution","permalink":"/docs/handbook/security"}}}},"pageContext":{"id":"3-containerized-execution","slug":"/docs/handbook/containerized-execution","repoPath":"/packages/documentation/copy/en/reference/Containerized Execution.md","previousID":"3f4000b5-1133-5c34-807d-29c05884f149","nextID":"b02df86d-9ef8-5f8e-ba32-437934fba499","lang":"en","modifiedTime":"2023-09-03T07:55:40.505Z"}},"staticQueryHashes":[]}